webpackJsonp([0],[
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ALL_BODIES = exports.AU = undefined;\n\nvar _three = __webpack_require__(1);\n\n/**\n * Kepler elements taken from http://ssd.jpl.nasa.gov/txt/aprx_pos_planets.pdf\n * Planetary constants taken from http://www.braeunig.us/space/constant.htm\n *\n * All distances are scaled down by the AU to reduce the size of the numbers\n * throughout the simulation.\n */\n\nvar AU = exports.AU = 149.59787e9;\n\nvar body_data = {\n  \"sun\": {\n    constants: {\n      u: 1.32712438e20 / Math.pow(AU, 3),\n      radius: 696e6 / AU\n    },\n    kepler_elements: {\n      a: [0, 0],\n      e: [0, 0],\n      I: [0, 0],\n      L: [0, 0],\n      w: [0, 0],\n      omega: [0, 0]\n    }\n  },\n  \"mercury\": {\n    primary: \"sun\",\n    constants: {\n      u: 0.02203e15 / Math.pow(AU, 3),\n      radius: 2.4397e6 / AU,\n      rotation_period: 58.646, // days\n      axial_tilt: 0.034 },\n    kepler_elements: {\n      a: [0.38709843, 0.0],\n      e: [0.20563661, 0.00002123],\n      I: [7.00559432, -0.00590158],\n      L: [252.25166724, 149472.67486623],\n      w: [77.45771895, 0.15940013],\n      omega: [48.33961819, -0.12214182]\n    }\n  },\n  \"venus\": {\n    primary: \"sun\",\n    constants: {\n      u: 0.3249e15 / Math.pow(AU, 3),\n      radius: 6.0518e6 / AU,\n      rotation_period: -243.025, // days (negative == retrograde)\n      axial_tilt: 177.36 },\n    kepler_elements: {\n      a: [0.72332102, -0.00000026],\n      e: [0.00676399, -0.00005107],\n      I: [3.39777545, 0.00043494],\n      L: [181.97970850, 58517.81560260],\n      w: [131.76755713, 0.05679648],\n      omega: [76.67261496, -0.27274174]\n    }\n  },\n\n  \"moon\": {\n    primary: \"earth\",\n    constants: {\n      u: 4.902794e12 / Math.pow(AU, 3),\n      radius: 1738e3 / AU,\n      rotation_period: 27.321661,\n      axial_tilt: 6.687\n    },\n    kepler_elements: {\n      a: [0.00257, 0],\n      e: [0.0549, 0],\n      I: [5.145, 0],\n      // mean longitude,\n      L: [0, 500000],\n      // longitude of perihelion\n      w: [0, 0],\n      // longitude of the ascending node\n      omega: [0, 0]\n    }\n  },\n  \"earth\": {\n    primary: \"sun\",\n    constants: {\n      u: 0.3986e15 / Math.pow(AU, 3),\n      radius: 6.3781e6 / AU,\n      rotation_period: 0.99726968,\n      axial_tilt: 23.4392811\n    },\n    kepler_elements: {\n      a: [1.00000018, -0.00000003],\n      e: [0.01673163, -0.00003661],\n      I: [-0.00054346, -0.01337178],\n      L: [100.46691572, 35999.37306329],\n      w: [102.93005885, 0.31795260],\n      omega: [-5.11260389, -0.24123856]\n    }\n  },\n  \"firefly\": {\n    primary: \"earth\",\n    constants: {\n      radius: 100 / AU\n    },\n    kepler_elements: {\n      a: [(400e3 + 6.3781e6) / AU, 0],\n      e: [0, 0],\n      I: [10, 0],\n      L: [0, 0],\n      w: [0, 0],\n      omega: [0, 0]\n    }\n  },\n  \"mars\": {\n    primary: \"sun\",\n    constants: {\n      u: 0.04283e15 / Math.pow(AU, 3),\n      radius: 3.397e6 / AU,\n      rotation_period: 1.025957, // days\n      axial_tilt: 25.19 },\n    kepler_elements: {\n      a: [1.52371243, 0.00000097],\n      e: [0.09336511, 0.00009149],\n      I: [1.85181869, -0.00724757],\n      L: [-4.56813164, 19140.29934243],\n      w: [-23.91744784, 0.45223625],\n      omega: [49.71320984, -0.26852431]\n    }\n  },\n  \"jupiter\": {\n    primary: \"sun\",\n    constants: {\n      u: 126.686e15 / Math.pow(AU, 3),\n      radius: 7.1492e7 / AU,\n      rotation_period: 0.413542, // days\n      axial_tilt: 3.13 },\n    kepler_elements: {\n      a: [5.20248019, -0.00002864],\n      e: [0.04853590, 0.00018026],\n      I: [1.29861416, -0.00322699],\n      L: [34.33479152, 3034.90371757],\n      w: [14.27495244, 0.18199196],\n      omega: [100.29282654, 0.13024619],\n      perturbations: {\n        b: -0.00012452,\n        c: 0.6064060,\n        s: -0.35635438,\n        f: 38.35125000\n      }\n    }\n  },\n  \"saturn\": {\n    primary: \"sun\",\n    constants: {\n      u: 37.391e15 / Math.pow(AU, 3),\n      radius: 6.0268e7 / AU,\n      rotation_period: 0.439583, // days\n      axial_tilt: 26.73 },\n    kepler_elements: {\n      a: [9.54149883, -0.00003065],\n      e: [0.05550825, -0.00032044],\n      I: [2.49424102, 0.00451969],\n      L: [50.07571329, 1222.11494724],\n      w: [92.86136063, 0.54179478],\n      omega: [113.63998702, -0.25015002],\n      perturbations: {\n        b: 0.00025899,\n        c: -0.13434469,\n        s: 0.87320147,\n        f: 38.35125000\n      }\n    }\n  },\n  \"uranus\": {\n    primary: \"sun\",\n    constants: {\n      u: 5.794e15 / Math.pow(AU, 3),\n      radius: 2.5559e7 / AU,\n      rotation_period: 0.71833, // days (negative == retrograde)\n      axial_tilt: 97.77 },\n    kepler_elements: {\n      a: [19.18797948, -0.00020455],\n      e: [0.04685740, -0.00001550],\n      I: [0.77298127, -0.00180155],\n      L: [314.20276625, 428.49512595],\n      w: [172.43404441, 0.09266985],\n      omega: [73.96250215, 0.05739699],\n      perturbations: {\n        b: 0.00058331,\n        c: -0.97731848,\n        s: 0.17689245,\n        f: 7.67025000\n      }\n    }\n  },\n  \"neptune\": {\n    primary: \"sun\",\n    constants: {\n      u: 6.835e15 / Math.pow(AU, 3),\n      radius: 2.4764e7 / AU,\n      rotation_period: 0.6713, // days (negative == retrograde)\n      axial_tilt: 28.32 // relative to orbit\n    },\n    kepler_elements: {\n      a: [30.06952752, 0.00006447],\n      e: [0.00895439, 0.00000818],\n      I: [1.77005520, 0.00022400],\n      L: [304.22289287, 218.46515314],\n      w: [46.68158724, 0.01009938],\n      omega: [131.78635853, -0.00606302],\n      perturbations: {\n        b: -0.00041348,\n        c: 0.68346318,\n        s: -0.10162547,\n        f: 7.67025000\n      }\n    }\n  },\n  \"pluto\": {\n    primary: \"sun\",\n    constants: {\n      u: 0.00083e15 / Math.pow(AU, 3),\n      radius: 1.195e6 / AU,\n      rotation_period: 6.387230, // days\n      axial_tilt: 122.53 },\n    kepler_elements: {\n      a: [39.48686035, 0.00449751],\n      e: [0.24885238, 0.00006016],\n      I: [17.14104260, 0.00000501],\n      L: [238.96535011, 145.18042903],\n      w: [224.09702598, -0.00968827],\n      omega: [110.30167986, -0.00809981],\n      perturbations: {\n        b: -0.01262724,\n        c: 0,\n        s: 0,\n        f: 0\n      }\n    }\n  }\n};\n\n// Initialize map\nvar bodyMap = new Map(Object.keys(body_data).map(function (name) {\n  var body = body_data[name];\n  body.name = name;\n  body.derived = {};\n\n  if (name === 'sun') {\n    body.derived = {\n      position: new _three.Vector3(0, 0, 0),\n      velocity: new _three.Vector3(0, 0, 0),\n      apoapsis: new _three.Vector3(0, 0, 0),\n      periapsis: new _three.Vector3(0, 0, 0),\n      center: new _three.Vector3(0, 0, 0)\n    };\n  }\n\n  return [name, body];\n}));\n\n// Set back-references on body graph\nArray.from(bodyMap.values()).forEach(function (body) {\n\n  // Set primary\n  if (body.primary) {\n    body.primary = bodyMap.get(body.primary);\n\n    // Add self to primary's secondaries property\n    if (!body.primary.secondaries) body.primary.secondaries = [];\n\n    body.primary.secondaries.push(body);\n  }\n});\n\n// Flatten the dependency graph to ensure that primary bodies are always\n// evaluated before their secondaries (satellites)\n\nfunction flatten(body) {\n  if (!body) {\n    return [];\n  }\n\n  return (body.secondaries || []).reduce(function (bodies, b) {\n    return bodies.concat(flatten(b));\n  }, [body]);\n}\n\nvar ALL_BODIES = exports.ALL_BODIES = flatten(bodyMap.get('sun'));//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */,
/* 4 */
/***/ (function(module, exports) {

eval("module.exports = function( THREE ) {\n\t/**\n\t * @author qiao / https://github.com/qiao\n\t * @author mrdoob / http://mrdoob.com\n\t * @author alteredq / http://alteredqualia.com/\n\t * @author WestLangley / http://github.com/WestLangley\n\t * @author erich666 / http://erichaines.com\n\t */\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one finger move\n//    Zoom - middle mouse, or mousewheel / touch: two finger spread or squish\n//    Pan - right mouse, or arrow keys / touch: three finter swipe\n\n\tfunction OrbitControls( object, domElement ) {\n\n\t\tthis.object = object;\n\n\t\tthis.domElement = ( domElement !== undefined ) ? domElement : document;\n\n\t\t// Set to false to disable this control\n\t\tthis.enabled = true;\n\n\t\t// \"target\" sets the location of focus, where the object orbits around\n\t\tthis.target = new THREE.Vector3();\n\n\t\t// How far you can dolly in and out ( PerspectiveCamera only )\n\t\tthis.minDistance = 0;\n\t\tthis.maxDistance = Infinity;\n\n\t\t// How far you can zoom in and out ( OrthographicCamera only )\n\t\tthis.minZoom = 0;\n\t\tthis.maxZoom = Infinity;\n\n\t\t// How far you can orbit vertically, upper and lower limits.\n\t\t// Range is 0 to Math.PI radians.\n\t\tthis.minPolarAngle = 0; // radians\n\t\tthis.maxPolarAngle = Math.PI; // radians\n\n\t\t// How far you can orbit horizontally, upper and lower limits.\n\t\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\t\tthis.minAzimuthAngle = - Infinity; // radians\n\t\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t\t// Set to true to enable damping (inertia)\n\t\t// If damping is enabled, you must call controls.update() in your animation loop\n\t\tthis.enableDamping = false;\n\t\tthis.dampingFactor = 0.25;\n\n\t\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t\t// Set to false to disable zooming\n\t\tthis.enableZoom = true;\n\t\tthis.zoomSpeed = 1.0;\n\n\t\t// Set to false to disable rotating\n\t\tthis.enableRotate = true;\n\t\tthis.rotateSpeed = 1.0;\n\n\t\t// Set to false to disable panning\n\t\tthis.enablePan = true;\n\t\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t\t// Set to true to automatically rotate around the target\n\t\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\t\tthis.autoRotate = false;\n\t\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t\t// Set to false to disable use of the keys\n\t\tthis.enableKeys = true;\n\n\t\t// The four arrow keys\n\t\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t\t// Mouse buttons\n\t\tthis.mouseButtons = { ORBIT: THREE.MOUSE.LEFT, ZOOM: THREE.MOUSE.MIDDLE, PAN: THREE.MOUSE.RIGHT };\n\n\t\t// for reset\n\t\tthis.target0 = this.target.clone();\n\t\tthis.position0 = this.object.position.clone();\n\t\tthis.zoom0 = this.object.zoom;\n\n\t\t//\n\t\t// public methods\n\t\t//\n\n\t\tthis.getPolarAngle = function () {\n\n\t\t\treturn spherical.phi;\n\n\t\t};\n\n\t\tthis.getAzimuthalAngle = function () {\n\n\t\t\treturn spherical.theta;\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\tscope.target.copy( scope.target0 );\n\t\t\tscope.object.position.copy( scope.position0 );\n\t\t\tscope.object.zoom = scope.zoom0;\n\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\tscope.update();\n\n\t\t\tstate = STATE.NONE;\n\n\t\t};\n\n\t\t// this method is exposed, but perhaps it would be better if we can make it private...\n\t\tthis.update = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\t// so camera.up is the orbit axis\n\t\t\tvar quat = new THREE.Quaternion().setFromUnitVectors( object.up, new THREE.Vector3( 0, 1, 0 ) );\n\t\t\tvar quatInverse = quat.clone().inverse();\n\n\t\t\tvar lastPosition = new THREE.Vector3();\n\t\t\tvar lastQuaternion = new THREE.Quaternion();\n\n\t\t\treturn function update () {\n\n\t\t\t\tvar position = scope.object.position;\n\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t\t// angle from z-axis around y-axis\n\t\t\t\tspherical.setFromVector3( offset );\n\n\t\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t\t}\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t\t// restrict theta to be between desired limits\n\t\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t\t// restrict phi to be between desired limits\n\t\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\t\tspherical.makeSafe();\n\n\n\t\t\t\tspherical.radius *= scale;\n\n\t\t\t\t// restrict radius to be between desired limits\n\t\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t\t// move target to panned location\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t\tscale = 1;\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t\t// update condition is:\n\t\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\t\tif ( zoomChanged ||\n\t\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\t\tzoomChanged = false;\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t}();\n\n\t\tthis.dispose = function() {\n\n\t\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\twindow.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t\t};\n\n\t\t//\n\t\t// internals\n\t\t//\n\n\t\tvar scope = this;\n\n\t\tvar changeEvent = { type: 'change' };\n\t\tvar startEvent = { type: 'start' };\n\t\tvar endEvent = { type: 'end' };\n\n\t\tvar STATE = { NONE : - 1, ROTATE : 0, DOLLY : 1, PAN : 2, TOUCH_ROTATE : 3, TOUCH_DOLLY : 4, TOUCH_PAN : 5 };\n\n\t\tvar state = STATE.NONE;\n\n\t\tvar EPS = 0.000001;\n\n\t\t// current position in spherical coordinates\n\t\tvar spherical = new THREE.Spherical();\n\t\tvar sphericalDelta = new THREE.Spherical();\n\n\t\tvar scale = 1;\n\t\tvar panOffset = new THREE.Vector3();\n\t\tvar zoomChanged = false;\n\n\t\tvar rotateStart = new THREE.Vector2();\n\t\tvar rotateEnd = new THREE.Vector2();\n\t\tvar rotateDelta = new THREE.Vector2();\n\n\t\tvar panStart = new THREE.Vector2();\n\t\tvar panEnd = new THREE.Vector2();\n\t\tvar panDelta = new THREE.Vector2();\n\n\t\tvar dollyStart = new THREE.Vector2();\n\t\tvar dollyEnd = new THREE.Vector2();\n\t\tvar dollyDelta = new THREE.Vector2();\n\n\t\tfunction getAutoRotationAngle() {\n\n\t\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t\t}\n\n\t\tfunction getZoomScale() {\n\n\t\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t\t}\n\n\t\tfunction rotateLeft( angle ) {\n\n\t\t\tsphericalDelta.theta -= angle;\n\n\t\t}\n\n\t\tfunction rotateUp( angle ) {\n\n\t\t\tsphericalDelta.phi -= angle;\n\n\t\t}\n\n\t\tvar panLeft = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\t\tv.multiplyScalar( - distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\tvar panUp = function() {\n\n\t\t\tvar v = new THREE.Vector3();\n\n\t\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 ); // get Y column of objectMatrix\n\t\t\t\tv.multiplyScalar( distance );\n\n\t\t\t\tpanOffset.add( v );\n\n\t\t\t};\n\n\t\t}();\n\n\t\t// deltaX and deltaY are in pixels; right and down are positive\n\t\tvar pan = function() {\n\n\t\t\tvar offset = new THREE.Vector3();\n\n\t\t\treturn function pan ( deltaX, deltaY ) {\n\n\t\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\t\t// perspective\n\t\t\t\t\tvar position = scope.object.position;\n\t\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t\t// we actually don't use screenWidth, since perspective camera is fixed to screen height\n\t\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\t\t// orthographic\n\t\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\t\tscope.enablePan = false;\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}();\n\n\t\tfunction dollyIn( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale /= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction dollyOut( dollyScale ) {\n\n\t\t\tif ( scope.object instanceof THREE.PerspectiveCamera ) {\n\n\t\t\t\tscale *= dollyScale;\n\n\t\t\t} else if ( scope.object instanceof THREE.OrthographicCamera ) {\n\n\t\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\t\tscope.object.updateProjectionMatrix();\n\t\t\t\tzoomChanged = true;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\t\tscope.enableZoom = false;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\t\t// event callbacks - update the object state\n\t\t//\n\n\t\tfunction handleMouseDownRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseDownRotate' );\n\n\t\t\trotateStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseDownDolly' );\n\n\t\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseDownPan( event ) {\n\n\t\t\t//console.log( 'handleMouseDownPan' );\n\n\t\t\tpanStart.set( event.clientX, event.clientY );\n\n\t\t}\n\n\t\tfunction handleMouseMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveRotate' );\n\n\t\t\trotateEnd.set( event.clientX, event.clientY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleMouseMoveDolly' );\n\n\t\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseMovePan( event ) {\n\n\t\t\t//console.log( 'handleMouseMovePan' );\n\n\t\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleMouseUp( event ) {\n\n\t\t\t//console.log( 'handleMouseUp' );\n\n\t\t}\n\n\t\tfunction handleMouseWheel( event ) {\n\n\t\t\t//console.log( 'handleMouseWheel' );\n\n\t\t\tif ( event.deltaY < 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleKeyDown( event ) {\n\n\t\t\t//console.log( 'handleKeyDown' );\n\n\t\t\tswitch ( event.keyCode ) {\n\n\t\t\t\tcase scope.keys.UP:\n\t\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.LEFT:\n\t\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase scope.keys.RIGHT:\n\t\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\t\tscope.update();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction handleTouchStartRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchStartRotate' );\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchStartDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchStartDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyStart.set( 0, distance );\n\n\t\t}\n\n\t\tfunction handleTouchStartPan( event ) {\n\n\t\t\t//console.log( 'handleTouchStartPan' );\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t}\n\n\t\tfunction handleTouchMoveRotate( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveRotate' );\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\t\t\trotateDelta.subVectors( rotateEnd, rotateStart );\n\n\t\t\tvar element = scope.domElement === document ? scope.domElement.body : scope.domElement;\n\n\t\t\t// rotating across whole screen goes 360 degrees around\n\t\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientWidth * scope.rotateSpeed );\n\n\t\t\t// rotating up and down along whole screen attempts to go 360, but limited to 180\n\t\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight * scope.rotateSpeed );\n\n\t\t\trotateStart.copy( rotateEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMoveDolly( event ) {\n\n\t\t\t//console.log( 'handleTouchMoveDolly' );\n\n\t\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\t\tdollyEnd.set( 0, distance );\n\n\t\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\t\tdollyOut( getZoomScale() );\n\n\t\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\t\tdollyIn( getZoomScale() );\n\n\t\t\t}\n\n\t\t\tdollyStart.copy( dollyEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchMovePan( event ) {\n\n\t\t\t//console.log( 'handleTouchMovePan' );\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t\tpanDelta.subVectors( panEnd, panStart );\n\n\t\t\tpan( panDelta.x, panDelta.y );\n\n\t\t\tpanStart.copy( panEnd );\n\n\t\t\tscope.update();\n\n\t\t}\n\n\t\tfunction handleTouchEnd( event ) {\n\n\t\t\t//console.log( 'handleTouchEnd' );\n\n\t\t}\n\n\t\t//\n\t\t// event handlers - FSM: listen for events and reset state\n\t\t//\n\n\t\tfunction onMouseDown( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( event.button === scope.mouseButtons.ORBIT ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.ZOOM ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t} else if ( event.button === scope.mouseButtons.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\tstate = STATE.PAN;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\n\t\t\tif ( state === STATE.ROTATE ) {\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t} else if ( state === STATE.DOLLY ) {\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t} else if ( state === STATE.PAN ) {\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onMouseUp( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleMouseUp( event );\n\n\t\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onMouseWheel( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\thandleMouseWheel( event );\n\n\t\t\tscope.dispatchEvent( startEvent ); // not sure why these are here...\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t}\n\n\t\tfunction onKeyDown( event ) {\n\n\t\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\t\thandleKeyDown( event );\n\n\t\t}\n\n\t\tfunction onTouchStart( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1:\t// one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\t// two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\thandleTouchStartDolly( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_DOLLY;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t\tif ( state !== STATE.NONE ) {\n\n\t\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchMove( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\tevent.preventDefault();\n\t\t\tevent.stopPropagation();\n\n\t\t\tswitch ( event.touches.length ) {\n\n\t\t\t\tcase 1: // one-fingered touch: rotate\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_ROTATE ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // two-fingered touch: dolly\n\n\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_DOLLY ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMoveDolly( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // three-fingered touch: pan\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\t\t\t\t\tif ( state !== STATE.TOUCH_PAN ) return; // is this needed?...\n\n\t\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onTouchEnd( event ) {\n\n\t\t\tif ( scope.enabled === false ) return;\n\n\t\t\thandleTouchEnd( event );\n\n\t\t\tscope.dispatchEvent( endEvent );\n\n\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tfunction onContextMenu( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t}\n\n\t\t//\n\n\t\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\t\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\t\twindow.addEventListener( 'keydown', onKeyDown, false );\n\n\t\t// force an update at start\n\n\t\tthis.update();\n\n\t};\n\n\tOrbitControls.prototype = Object.create( THREE.EventDispatcher.prototype );\n\tOrbitControls.prototype.constructor = OrbitControls;\n\n\tObject.defineProperties( OrbitControls.prototype, {\n\n\t\tcenter: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .center has been renamed to .target' );\n\t\t\t\treturn this.target;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// backward compatibility\n\n\t\tnoZoom: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\treturn ! this.enableZoom;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noZoom has been deprecated. Use .enableZoom instead.' );\n\t\t\t\tthis.enableZoom = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoRotate: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\treturn ! this.enableRotate;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noRotate has been deprecated. Use .enableRotate instead.' );\n\t\t\t\tthis.enableRotate = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoPan: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\treturn ! this.enablePan;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noPan has been deprecated. Use .enablePan instead.' );\n\t\t\t\tthis.enablePan = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tnoKeys: {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\treturn ! this.enableKeys;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .noKeys has been deprecated. Use .enableKeys instead.' );\n\t\t\t\tthis.enableKeys = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tstaticMoving : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\treturn ! this.enableDamping;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .staticMoving has been deprecated. Use .enableDamping instead.' );\n\t\t\t\tthis.enableDamping = ! value;\n\n\t\t\t}\n\n\t\t},\n\n\t\tdynamicDampingFactor : {\n\n\t\t\tget: function () {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\treturn this.dampingFactor;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tconsole.warn( 'THREE.OrbitControls: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.' );\n\t\t\t\tthis.dampingFactor = value;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn OrbitControls;\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vdGhyZWUtb3JiaXQtY29udHJvbHMvaW5kZXguanM/ZjY5ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCBUSFJFRSApIHtcblx0LyoqXG5cdCAqIEBhdXRob3IgcWlhbyAvIGh0dHBzOi8vZ2l0aHViLmNvbS9xaWFvXG5cdCAqIEBhdXRob3IgbXJkb29iIC8gaHR0cDovL21yZG9vYi5jb21cblx0ICogQGF1dGhvciBhbHRlcmVkcSAvIGh0dHA6Ly9hbHRlcmVkcXVhbGlhLmNvbS9cblx0ICogQGF1dGhvciBXZXN0TGFuZ2xleSAvIGh0dHA6Ly9naXRodWIuY29tL1dlc3RMYW5nbGV5XG5cdCAqIEBhdXRob3IgZXJpY2g2NjYgLyBodHRwOi8vZXJpY2hhaW5lcy5jb21cblx0ICovXG5cbi8vIFRoaXMgc2V0IG9mIGNvbnRyb2xzIHBlcmZvcm1zIG9yYml0aW5nLCBkb2xseWluZyAoem9vbWluZyksIGFuZCBwYW5uaW5nLlxuLy8gVW5saWtlIFRyYWNrYmFsbENvbnRyb2xzLCBpdCBtYWludGFpbnMgdGhlIFwidXBcIiBkaXJlY3Rpb24gb2JqZWN0LnVwICgrWSBieSBkZWZhdWx0KS5cbi8vXG4vLyAgICBPcmJpdCAtIGxlZnQgbW91c2UgLyB0b3VjaDogb25lIGZpbmdlciBtb3ZlXG4vLyAgICBab29tIC0gbWlkZGxlIG1vdXNlLCBvciBtb3VzZXdoZWVsIC8gdG91Y2g6IHR3byBmaW5nZXIgc3ByZWFkIG9yIHNxdWlzaFxuLy8gICAgUGFuIC0gcmlnaHQgbW91c2UsIG9yIGFycm93IGtleXMgLyB0b3VjaDogdGhyZWUgZmludGVyIHN3aXBlXG5cblx0ZnVuY3Rpb24gT3JiaXRDb250cm9scyggb2JqZWN0LCBkb21FbGVtZW50ICkge1xuXG5cdFx0dGhpcy5vYmplY3QgPSBvYmplY3Q7XG5cblx0XHR0aGlzLmRvbUVsZW1lbnQgPSAoIGRvbUVsZW1lbnQgIT09IHVuZGVmaW5lZCApID8gZG9tRWxlbWVudCA6IGRvY3VtZW50O1xuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgdGhpcyBjb250cm9sXG5cdFx0dGhpcy5lbmFibGVkID0gdHJ1ZTtcblxuXHRcdC8vIFwidGFyZ2V0XCIgc2V0cyB0aGUgbG9jYXRpb24gb2YgZm9jdXMsIHdoZXJlIHRoZSBvYmplY3Qgb3JiaXRzIGFyb3VuZFxuXHRcdHRoaXMudGFyZ2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiBkb2xseSBpbiBhbmQgb3V0ICggUGVyc3BlY3RpdmVDYW1lcmEgb25seSApXG5cdFx0dGhpcy5taW5EaXN0YW5jZSA9IDA7XG5cdFx0dGhpcy5tYXhEaXN0YW5jZSA9IEluZmluaXR5O1xuXG5cdFx0Ly8gSG93IGZhciB5b3UgY2FuIHpvb20gaW4gYW5kIG91dCAoIE9ydGhvZ3JhcGhpY0NhbWVyYSBvbmx5IClcblx0XHR0aGlzLm1pblpvb20gPSAwO1xuXHRcdHRoaXMubWF4Wm9vbSA9IEluZmluaXR5O1xuXG5cdFx0Ly8gSG93IGZhciB5b3UgY2FuIG9yYml0IHZlcnRpY2FsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG5cdFx0Ly8gUmFuZ2UgaXMgMCB0byBNYXRoLlBJIHJhZGlhbnMuXG5cdFx0dGhpcy5taW5Qb2xhckFuZ2xlID0gMDsgLy8gcmFkaWFuc1xuXHRcdHRoaXMubWF4UG9sYXJBbmdsZSA9IE1hdGguUEk7IC8vIHJhZGlhbnNcblxuXHRcdC8vIEhvdyBmYXIgeW91IGNhbiBvcmJpdCBob3Jpem9udGFsbHksIHVwcGVyIGFuZCBsb3dlciBsaW1pdHMuXG5cdFx0Ly8gSWYgc2V0LCBtdXN0IGJlIGEgc3ViLWludGVydmFsIG9mIHRoZSBpbnRlcnZhbCBbIC0gTWF0aC5QSSwgTWF0aC5QSSBdLlxuXHRcdHRoaXMubWluQXppbXV0aEFuZ2xlID0gLSBJbmZpbml0eTsgLy8gcmFkaWFuc1xuXHRcdHRoaXMubWF4QXppbXV0aEFuZ2xlID0gSW5maW5pdHk7IC8vIHJhZGlhbnNcblxuXHRcdC8vIFNldCB0byB0cnVlIHRvIGVuYWJsZSBkYW1waW5nIChpbmVydGlhKVxuXHRcdC8vIElmIGRhbXBpbmcgaXMgZW5hYmxlZCwgeW91IG11c3QgY2FsbCBjb250cm9scy51cGRhdGUoKSBpbiB5b3VyIGFuaW1hdGlvbiBsb29wXG5cdFx0dGhpcy5lbmFibGVEYW1waW5nID0gZmFsc2U7XG5cdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gMC4yNTtcblxuXHRcdC8vIFRoaXMgb3B0aW9uIGFjdHVhbGx5IGVuYWJsZXMgZG9sbHlpbmcgaW4gYW5kIG91dDsgbGVmdCBhcyBcInpvb21cIiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgem9vbWluZ1xuXHRcdHRoaXMuZW5hYmxlWm9vbSA9IHRydWU7XG5cdFx0dGhpcy56b29tU3BlZWQgPSAxLjA7XG5cblx0XHQvLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSByb3RhdGluZ1xuXHRcdHRoaXMuZW5hYmxlUm90YXRlID0gdHJ1ZTtcblx0XHR0aGlzLnJvdGF0ZVNwZWVkID0gMS4wO1xuXG5cdFx0Ly8gU2V0IHRvIGZhbHNlIHRvIGRpc2FibGUgcGFubmluZ1xuXHRcdHRoaXMuZW5hYmxlUGFuID0gdHJ1ZTtcblx0XHR0aGlzLmtleVBhblNwZWVkID0gNy4wO1x0Ly8gcGl4ZWxzIG1vdmVkIHBlciBhcnJvdyBrZXkgcHVzaFxuXG5cdFx0Ly8gU2V0IHRvIHRydWUgdG8gYXV0b21hdGljYWxseSByb3RhdGUgYXJvdW5kIHRoZSB0YXJnZXRcblx0XHQvLyBJZiBhdXRvLXJvdGF0ZSBpcyBlbmFibGVkLCB5b3UgbXVzdCBjYWxsIGNvbnRyb2xzLnVwZGF0ZSgpIGluIHlvdXIgYW5pbWF0aW9uIGxvb3Bcblx0XHR0aGlzLmF1dG9Sb3RhdGUgPSBmYWxzZTtcblx0XHR0aGlzLmF1dG9Sb3RhdGVTcGVlZCA9IDIuMDsgLy8gMzAgc2Vjb25kcyBwZXIgcm91bmQgd2hlbiBmcHMgaXMgNjBcblxuXHRcdC8vIFNldCB0byBmYWxzZSB0byBkaXNhYmxlIHVzZSBvZiB0aGUga2V5c1xuXHRcdHRoaXMuZW5hYmxlS2V5cyA9IHRydWU7XG5cblx0XHQvLyBUaGUgZm91ciBhcnJvdyBrZXlzXG5cdFx0dGhpcy5rZXlzID0geyBMRUZUOiAzNywgVVA6IDM4LCBSSUdIVDogMzksIEJPVFRPTTogNDAgfTtcblxuXHRcdC8vIE1vdXNlIGJ1dHRvbnNcblx0XHR0aGlzLm1vdXNlQnV0dG9ucyA9IHsgT1JCSVQ6IFRIUkVFLk1PVVNFLkxFRlQsIFpPT006IFRIUkVFLk1PVVNFLk1JRERMRSwgUEFOOiBUSFJFRS5NT1VTRS5SSUdIVCB9O1xuXG5cdFx0Ly8gZm9yIHJlc2V0XG5cdFx0dGhpcy50YXJnZXQwID0gdGhpcy50YXJnZXQuY2xvbmUoKTtcblx0XHR0aGlzLnBvc2l0aW9uMCA9IHRoaXMub2JqZWN0LnBvc2l0aW9uLmNsb25lKCk7XG5cdFx0dGhpcy56b29tMCA9IHRoaXMub2JqZWN0Lnpvb207XG5cblx0XHQvL1xuXHRcdC8vIHB1YmxpYyBtZXRob2RzXG5cdFx0Ly9cblxuXHRcdHRoaXMuZ2V0UG9sYXJBbmdsZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNwaGVyaWNhbC5waGk7XG5cblx0XHR9O1xuXG5cdFx0dGhpcy5nZXRBemltdXRoYWxBbmdsZSA9IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0cmV0dXJuIHNwaGVyaWNhbC50aGV0YTtcblxuXHRcdH07XG5cblx0XHR0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRzY29wZS50YXJnZXQuY29weSggc2NvcGUudGFyZ2V0MCApO1xuXHRcdFx0c2NvcGUub2JqZWN0LnBvc2l0aW9uLmNvcHkoIHNjb3BlLnBvc2l0aW9uMCApO1xuXHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBzY29wZS56b29tMDtcblxuXHRcdFx0c2NvcGUub2JqZWN0LnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIGNoYW5nZUV2ZW50ICk7XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9O1xuXG5cdFx0Ly8gdGhpcyBtZXRob2QgaXMgZXhwb3NlZCwgYnV0IHBlcmhhcHMgaXQgd291bGQgYmUgYmV0dGVyIGlmIHdlIGNhbiBtYWtlIGl0IHByaXZhdGUuLi5cblx0XHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHR2YXIgb2Zmc2V0ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdFx0Ly8gc28gY2FtZXJhLnVwIGlzIHRoZSBvcmJpdCBheGlzXG5cdFx0XHR2YXIgcXVhdCA9IG5ldyBUSFJFRS5RdWF0ZXJuaW9uKCkuc2V0RnJvbVVuaXRWZWN0b3JzKCBvYmplY3QudXAsIG5ldyBUSFJFRS5WZWN0b3IzKCAwLCAxLCAwICkgKTtcblx0XHRcdHZhciBxdWF0SW52ZXJzZSA9IHF1YXQuY2xvbmUoKS5pbnZlcnNlKCk7XG5cblx0XHRcdHZhciBsYXN0UG9zaXRpb24gPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXHRcdFx0dmFyIGxhc3RRdWF0ZXJuaW9uID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG5cblx0XHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xuXG5cdFx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cblx0XHRcdFx0Ly8gcm90YXRlIG9mZnNldCB0byBcInktYXhpcy1pcy11cFwiIHNwYWNlXG5cdFx0XHRcdG9mZnNldC5hcHBseVF1YXRlcm5pb24oIHF1YXQgKTtcblxuXHRcdFx0XHQvLyBhbmdsZSBmcm9tIHotYXhpcyBhcm91bmQgeS1heGlzXG5cdFx0XHRcdHNwaGVyaWNhbC5zZXRGcm9tVmVjdG9yMyggb2Zmc2V0ICk7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5hdXRvUm90YXRlICYmIHN0YXRlID09PSBTVEFURS5OT05FICkge1xuXG5cdFx0XHRcdFx0cm90YXRlTGVmdCggZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcGhlcmljYWwudGhldGEgKz0gc3BoZXJpY2FsRGVsdGEudGhldGE7XG5cdFx0XHRcdHNwaGVyaWNhbC5waGkgKz0gc3BoZXJpY2FsRGVsdGEucGhpO1xuXG5cdFx0XHRcdC8vIHJlc3RyaWN0IHRoZXRhIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblx0XHRcdFx0c3BoZXJpY2FsLnRoZXRhID0gTWF0aC5tYXgoIHNjb3BlLm1pbkF6aW11dGhBbmdsZSwgTWF0aC5taW4oIHNjb3BlLm1heEF6aW11dGhBbmdsZSwgc3BoZXJpY2FsLnRoZXRhICkgKTtcblxuXHRcdFx0XHQvLyByZXN0cmljdCBwaGkgdG8gYmUgYmV0d2VlbiBkZXNpcmVkIGxpbWl0c1xuXHRcdFx0XHRzcGhlcmljYWwucGhpID0gTWF0aC5tYXgoIHNjb3BlLm1pblBvbGFyQW5nbGUsIE1hdGgubWluKCBzY29wZS5tYXhQb2xhckFuZ2xlLCBzcGhlcmljYWwucGhpICkgKTtcblxuXHRcdFx0XHRzcGhlcmljYWwubWFrZVNhZmUoKTtcblxuXG5cdFx0XHRcdHNwaGVyaWNhbC5yYWRpdXMgKj0gc2NhbGU7XG5cblx0XHRcdFx0Ly8gcmVzdHJpY3QgcmFkaXVzIHRvIGJlIGJldHdlZW4gZGVzaXJlZCBsaW1pdHNcblx0XHRcdFx0c3BoZXJpY2FsLnJhZGl1cyA9IE1hdGgubWF4KCBzY29wZS5taW5EaXN0YW5jZSwgTWF0aC5taW4oIHNjb3BlLm1heERpc3RhbmNlLCBzcGhlcmljYWwucmFkaXVzICkgKTtcblxuXHRcdFx0XHQvLyBtb3ZlIHRhcmdldCB0byBwYW5uZWQgbG9jYXRpb25cblx0XHRcdFx0c2NvcGUudGFyZ2V0LmFkZCggcGFuT2Zmc2V0ICk7XG5cblx0XHRcdFx0b2Zmc2V0LnNldEZyb21TcGhlcmljYWwoIHNwaGVyaWNhbCApO1xuXG5cdFx0XHRcdC8vIHJvdGF0ZSBvZmZzZXQgYmFjayB0byBcImNhbWVyYS11cC12ZWN0b3ItaXMtdXBcIiBzcGFjZVxuXHRcdFx0XHRvZmZzZXQuYXBwbHlRdWF0ZXJuaW9uKCBxdWF0SW52ZXJzZSApO1xuXG5cdFx0XHRcdHBvc2l0aW9uLmNvcHkoIHNjb3BlLnRhcmdldCApLmFkZCggb2Zmc2V0ICk7XG5cblx0XHRcdFx0c2NvcGUub2JqZWN0Lmxvb2tBdCggc2NvcGUudGFyZ2V0ICk7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVEYW1waW5nID09PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgKj0gKCAxIC0gc2NvcGUuZGFtcGluZ0ZhY3RvciApO1xuXHRcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAqPSAoIDEgLSBzY29wZS5kYW1waW5nRmFjdG9yICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdHNwaGVyaWNhbERlbHRhLnNldCggMCwgMCwgMCApO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzY2FsZSA9IDE7XG5cdFx0XHRcdHBhbk9mZnNldC5zZXQoIDAsIDAsIDAgKTtcblxuXHRcdFx0XHQvLyB1cGRhdGUgY29uZGl0aW9uIGlzOlxuXHRcdFx0XHQvLyBtaW4oY2FtZXJhIGRpc3BsYWNlbWVudCwgY2FtZXJhIHJvdGF0aW9uIGluIHJhZGlhbnMpXjIgPiBFUFNcblx0XHRcdFx0Ly8gdXNpbmcgc21hbGwtYW5nbGUgYXBwcm94aW1hdGlvbiBjb3MoeC8yKSA9IDEgLSB4XjIgLyA4XG5cblx0XHRcdFx0aWYgKCB6b29tQ2hhbmdlZCB8fFxuXHRcdFx0XHRcdGxhc3RQb3NpdGlvbi5kaXN0YW5jZVRvU3F1YXJlZCggc2NvcGUub2JqZWN0LnBvc2l0aW9uICkgPiBFUFMgfHxcblx0XHRcdFx0XHQ4ICogKCAxIC0gbGFzdFF1YXRlcm5pb24uZG90KCBzY29wZS5vYmplY3QucXVhdGVybmlvbiApICkgPiBFUFMgKSB7XG5cblx0XHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBjaGFuZ2VFdmVudCApO1xuXG5cdFx0XHRcdFx0bGFzdFBvc2l0aW9uLmNvcHkoIHNjb3BlLm9iamVjdC5wb3NpdGlvbiApO1xuXHRcdFx0XHRcdGxhc3RRdWF0ZXJuaW9uLmNvcHkoIHNjb3BlLm9iamVjdC5xdWF0ZXJuaW9uICk7XG5cdFx0XHRcdFx0em9vbUNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRcdH07XG5cblx0XHR9KCk7XG5cblx0XHR0aGlzLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnY29udGV4dG1lbnUnLCBvbkNvbnRleHRNZW51LCBmYWxzZSApO1xuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vkb3duJywgb25Nb3VzZURvd24sIGZhbHNlICk7XG5cdFx0XHRzY29wZS5kb21FbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTtcblxuXHRcdFx0c2NvcGUuZG9tRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgZmFsc2UgKTtcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RvdWNoZW5kJywgb25Ub3VjaEVuZCwgZmFsc2UgKTtcblx0XHRcdHNjb3BlLmRvbUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSApO1xuXG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUsIGZhbHNlICk7XG5cdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcblxuXHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSApO1xuXG5cdFx0XHQvL3Njb3BlLmRpc3BhdGNoRXZlbnQoIHsgdHlwZTogJ2Rpc3Bvc2UnIH0gKTsgLy8gc2hvdWxkIHRoaXMgYmUgYWRkZWQgaGVyZT9cblxuXHRcdH07XG5cblx0XHQvL1xuXHRcdC8vIGludGVybmFsc1xuXHRcdC8vXG5cblx0XHR2YXIgc2NvcGUgPSB0aGlzO1xuXG5cdFx0dmFyIGNoYW5nZUV2ZW50ID0geyB0eXBlOiAnY2hhbmdlJyB9O1xuXHRcdHZhciBzdGFydEV2ZW50ID0geyB0eXBlOiAnc3RhcnQnIH07XG5cdFx0dmFyIGVuZEV2ZW50ID0geyB0eXBlOiAnZW5kJyB9O1xuXG5cdFx0dmFyIFNUQVRFID0geyBOT05FIDogLSAxLCBST1RBVEUgOiAwLCBET0xMWSA6IDEsIFBBTiA6IDIsIFRPVUNIX1JPVEFURSA6IDMsIFRPVUNIX0RPTExZIDogNCwgVE9VQ0hfUEFOIDogNSB9O1xuXG5cdFx0dmFyIHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdHZhciBFUFMgPSAwLjAwMDAwMTtcblxuXHRcdC8vIGN1cnJlbnQgcG9zaXRpb24gaW4gc3BoZXJpY2FsIGNvb3JkaW5hdGVzXG5cdFx0dmFyIHNwaGVyaWNhbCA9IG5ldyBUSFJFRS5TcGhlcmljYWwoKTtcblx0XHR2YXIgc3BoZXJpY2FsRGVsdGEgPSBuZXcgVEhSRUUuU3BoZXJpY2FsKCk7XG5cblx0XHR2YXIgc2NhbGUgPSAxO1xuXHRcdHZhciBwYW5PZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXHRcdHZhciB6b29tQ2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0dmFyIHJvdGF0ZVN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcm90YXRlRW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcm90YXRlRGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdFx0dmFyIHBhblN0YXJ0ID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcGFuRW5kID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcblx0XHR2YXIgcGFuRGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdFx0dmFyIGRvbGx5U3RhcnQgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXHRcdHZhciBkb2xseUVuZCA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cdFx0dmFyIGRvbGx5RGVsdGEgPSBuZXcgVEhSRUUuVmVjdG9yMigpO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0QXV0b1JvdGF0aW9uQW5nbGUoKSB7XG5cblx0XHRcdHJldHVybiAyICogTWF0aC5QSSAvIDYwIC8gNjAgKiBzY29wZS5hdXRvUm90YXRlU3BlZWQ7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBnZXRab29tU2NhbGUoKSB7XG5cblx0XHRcdHJldHVybiBNYXRoLnBvdyggMC45NSwgc2NvcGUuem9vbVNwZWVkICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByb3RhdGVMZWZ0KCBhbmdsZSApIHtcblxuXHRcdFx0c3BoZXJpY2FsRGVsdGEudGhldGEgLT0gYW5nbGU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiByb3RhdGVVcCggYW5nbGUgKSB7XG5cblx0XHRcdHNwaGVyaWNhbERlbHRhLnBoaSAtPSBhbmdsZTtcblxuXHRcdH1cblxuXHRcdHZhciBwYW5MZWZ0ID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhbkxlZnQoIGRpc3RhbmNlLCBvYmplY3RNYXRyaXggKSB7XG5cblx0XHRcdFx0di5zZXRGcm9tTWF0cml4Q29sdW1uKCBvYmplY3RNYXRyaXgsIDAgKTsgLy8gZ2V0IFggY29sdW1uIG9mIG9iamVjdE1hdHJpeFxuXHRcdFx0XHR2Lm11bHRpcGx5U2NhbGFyKCAtIGRpc3RhbmNlICk7XG5cblx0XHRcdFx0cGFuT2Zmc2V0LmFkZCggdiApO1xuXG5cdFx0XHR9O1xuXG5cdFx0fSgpO1xuXG5cdFx0dmFyIHBhblVwID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciB2ID0gbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIHBhblVwKCBkaXN0YW5jZSwgb2JqZWN0TWF0cml4ICkge1xuXG5cdFx0XHRcdHYuc2V0RnJvbU1hdHJpeENvbHVtbiggb2JqZWN0TWF0cml4LCAxICk7IC8vIGdldCBZIGNvbHVtbiBvZiBvYmplY3RNYXRyaXhcblx0XHRcdFx0di5tdWx0aXBseVNjYWxhciggZGlzdGFuY2UgKTtcblxuXHRcdFx0XHRwYW5PZmZzZXQuYWRkKCB2ICk7XG5cblx0XHRcdH07XG5cblx0XHR9KCk7XG5cblx0XHQvLyBkZWx0YVggYW5kIGRlbHRhWSBhcmUgaW4gcGl4ZWxzOyByaWdodCBhbmQgZG93biBhcmUgcG9zaXRpdmVcblx0XHR2YXIgcGFuID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBvZmZzZXQgPSBuZXcgVEhSRUUuVmVjdG9yMygpO1xuXG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gcGFuICggZGVsdGFYLCBkZWx0YVkgKSB7XG5cblx0XHRcdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHRcdC8vIHBlcnNwZWN0aXZlXG5cdFx0XHRcdFx0dmFyIHBvc2l0aW9uID0gc2NvcGUub2JqZWN0LnBvc2l0aW9uO1xuXHRcdFx0XHRcdG9mZnNldC5jb3B5KCBwb3NpdGlvbiApLnN1Yiggc2NvcGUudGFyZ2V0ICk7XG5cdFx0XHRcdFx0dmFyIHRhcmdldERpc3RhbmNlID0gb2Zmc2V0Lmxlbmd0aCgpO1xuXG5cdFx0XHRcdFx0Ly8gaGFsZiBvZiB0aGUgZm92IGlzIGNlbnRlciB0byB0b3Agb2Ygc2NyZWVuXG5cdFx0XHRcdFx0dGFyZ2V0RGlzdGFuY2UgKj0gTWF0aC50YW4oICggc2NvcGUub2JqZWN0LmZvdiAvIDIgKSAqIE1hdGguUEkgLyAxODAuMCApO1xuXG5cdFx0XHRcdFx0Ly8gd2UgYWN0dWFsbHkgZG9uJ3QgdXNlIHNjcmVlbldpZHRoLCBzaW5jZSBwZXJzcGVjdGl2ZSBjYW1lcmEgaXMgZml4ZWQgdG8gc2NyZWVuIGhlaWdodFxuXHRcdFx0XHRcdHBhbkxlZnQoIDIgKiBkZWx0YVggKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cdFx0XHRcdFx0cGFuVXAoIDIgKiBkZWx0YVkgKiB0YXJnZXREaXN0YW5jZSAvIGVsZW1lbnQuY2xpZW50SGVpZ2h0LCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIGlmICggc2NvcGUub2JqZWN0IGluc3RhbmNlb2YgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhICkge1xuXG5cdFx0XHRcdFx0Ly8gb3J0aG9ncmFwaGljXG5cdFx0XHRcdFx0cGFuTGVmdCggZGVsdGFYICogKCBzY29wZS5vYmplY3QucmlnaHQgLSBzY29wZS5vYmplY3QubGVmdCApIC8gc2NvcGUub2JqZWN0Lnpvb20gLyBlbGVtZW50LmNsaWVudFdpZHRoLCBzY29wZS5vYmplY3QubWF0cml4ICk7XG5cdFx0XHRcdFx0cGFuVXAoIGRlbHRhWSAqICggc2NvcGUub2JqZWN0LnRvcCAtIHNjb3BlLm9iamVjdC5ib3R0b20gKSAvIHNjb3BlLm9iamVjdC56b29tIC8gZWxlbWVudC5jbGllbnRIZWlnaHQsIHNjb3BlLm9iamVjdC5tYXRyaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gY2FtZXJhIG5laXRoZXIgb3J0aG9ncmFwaGljIG5vciBwZXJzcGVjdGl2ZVxuXHRcdFx0XHRcdGNvbnNvbGUud2FybiggJ1dBUk5JTkc6IE9yYml0Q29udHJvbHMuanMgZW5jb3VudGVyZWQgYW4gdW5rbm93biBjYW1lcmEgdHlwZSAtIHBhbiBkaXNhYmxlZC4nICk7XG5cdFx0XHRcdFx0c2NvcGUuZW5hYmxlUGFuID0gZmFsc2U7XG5cblx0XHRcdFx0fVxuXG5cdFx0XHR9O1xuXG5cdFx0fSgpO1xuXG5cdFx0ZnVuY3Rpb24gZG9sbHlJbiggZG9sbHlTY2FsZSApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHRzY2FsZSAvPSBkb2xseVNjYWxlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggc2NvcGUubWluWm9vbSwgTWF0aC5taW4oIHNjb3BlLm1heFpvb20sIHNjb3BlLm9iamVjdC56b29tICogZG9sbHlTY2FsZSApICk7XG5cdFx0XHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBkb2xseS96b29tIGRpc2FibGVkLicgKTtcblx0XHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBkb2xseU91dCggZG9sbHlTY2FsZSApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSApIHtcblxuXHRcdFx0XHRzY2FsZSAqPSBkb2xseVNjYWxlO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzY29wZS5vYmplY3QgaW5zdGFuY2VvZiBUSFJFRS5PcnRob2dyYXBoaWNDYW1lcmEgKSB7XG5cblx0XHRcdFx0c2NvcGUub2JqZWN0Lnpvb20gPSBNYXRoLm1heCggc2NvcGUubWluWm9vbSwgTWF0aC5taW4oIHNjb3BlLm1heFpvb20sIHNjb3BlLm9iamVjdC56b29tIC8gZG9sbHlTY2FsZSApICk7XG5cdFx0XHRcdHNjb3BlLm9iamVjdC51cGRhdGVQcm9qZWN0aW9uTWF0cml4KCk7XG5cdFx0XHRcdHpvb21DaGFuZ2VkID0gdHJ1ZTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdXQVJOSU5HOiBPcmJpdENvbnRyb2xzLmpzIGVuY291bnRlcmVkIGFuIHVua25vd24gY2FtZXJhIHR5cGUgLSBkb2xseS96b29tIGRpc2FibGVkLicgKTtcblx0XHRcdFx0c2NvcGUuZW5hYmxlWm9vbSA9IGZhbHNlO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHQvL1xuXHRcdC8vIGV2ZW50IGNhbGxiYWNrcyAtIHVwZGF0ZSB0aGUgb2JqZWN0IHN0YXRlXG5cdFx0Ly9cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZURvd25Sb3RhdGUnICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlTW91c2VEb3duRG9sbHkoIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duRG9sbHknICk7XG5cblx0XHRcdGRvbGx5U3RhcnQuc2V0KCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZURvd25QYW4oIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlTW91c2VEb3duUGFuJyApO1xuXG5cdFx0XHRwYW5TdGFydC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZVJvdGF0ZSggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVNb3VzZU1vdmVSb3RhdGUnICk7XG5cblx0XHRcdHJvdGF0ZUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblx0XHRcdHJvdGF0ZURlbHRhLnN1YlZlY3RvcnMoIHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQgKTtcblxuXHRcdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHRcdC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcblx0XHRcdHJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0XHQvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcblx0XHRcdHJvdGF0ZVVwKCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkgLyBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlTW92ZURvbGx5JyApO1xuXG5cdFx0XHRkb2xseUVuZC5zZXQoIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkgKTtcblxuXHRcdFx0ZG9sbHlEZWx0YS5zdWJWZWN0b3JzKCBkb2xseUVuZCwgZG9sbHlTdGFydCApO1xuXG5cdFx0XHRpZiAoIGRvbGx5RGVsdGEueSA+IDAgKSB7XG5cblx0XHRcdFx0ZG9sbHlJbiggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggZG9sbHlEZWx0YS55IDwgMCApIHtcblxuXHRcdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fVxuXG5cdFx0XHRkb2xseVN0YXJ0LmNvcHkoIGRvbGx5RW5kICk7XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlUGFuKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlTW92ZVBhbicgKTtcblxuXHRcdFx0cGFuRW5kLnNldCggZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSApO1xuXG5cdFx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XG5cblx0XHRcdHBhbiggcGFuRGVsdGEueCwgcGFuRGVsdGEueSApO1xuXG5cdFx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlVXAnICk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVNb3VzZVdoZWVsKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZU1vdXNlV2hlZWwnICk7XG5cblx0XHRcdGlmICggZXZlbnQuZGVsdGFZIDwgMCApIHtcblxuXHRcdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggZXZlbnQuZGVsdGFZID4gMCApIHtcblxuXHRcdFx0XHRkb2xseUluKCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlS2V5RG93biggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVLZXlEb3duJyApO1xuXG5cdFx0XHRzd2l0Y2ggKCBldmVudC5rZXlDb2RlICkge1xuXG5cdFx0XHRcdGNhc2Ugc2NvcGUua2V5cy5VUDpcblx0XHRcdFx0XHRwYW4oIDAsIHNjb3BlLmtleVBhblNwZWVkICk7XG5cdFx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBzY29wZS5rZXlzLkJPVFRPTTpcblx0XHRcdFx0XHRwYW4oIDAsIC0gc2NvcGUua2V5UGFuU3BlZWQgKTtcblx0XHRcdFx0XHRzY29wZS51cGRhdGUoKTtcblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIHNjb3BlLmtleXMuTEVGVDpcblx0XHRcdFx0XHRwYW4oIHNjb3BlLmtleVBhblNwZWVkLCAwICk7XG5cdFx0XHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSBzY29wZS5rZXlzLlJJR0hUOlxuXHRcdFx0XHRcdHBhbiggLSBzY29wZS5rZXlQYW5TcGVlZCwgMCApO1xuXHRcdFx0XHRcdHNjb3BlLnVwZGF0ZSgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaFN0YXJ0Um90YXRlKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoU3RhcnRSb3RhdGUnICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnREb2xseSggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaFN0YXJ0RG9sbHknICk7XG5cblx0XHRcdHZhciBkeCA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWDtcblx0XHRcdHZhciBkeSA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSAtIGV2ZW50LnRvdWNoZXNbIDEgXS5wYWdlWTtcblxuXHRcdFx0dmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KCBkeCAqIGR4ICsgZHkgKiBkeSApO1xuXG5cdFx0XHRkb2xseVN0YXJ0LnNldCggMCwgZGlzdGFuY2UgKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoU3RhcnRQYW4oIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hTdGFydFBhbicgKTtcblxuXHRcdFx0cGFuU3RhcnQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGFuZGxlVG91Y2hNb3ZlUm90YXRlKCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZVJvdGF0ZScgKTtcblxuXHRcdFx0cm90YXRlRW5kLnNldCggZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYLCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgKTtcblx0XHRcdHJvdGF0ZURlbHRhLnN1YlZlY3RvcnMoIHJvdGF0ZUVuZCwgcm90YXRlU3RhcnQgKTtcblxuXHRcdFx0dmFyIGVsZW1lbnQgPSBzY29wZS5kb21FbGVtZW50ID09PSBkb2N1bWVudCA/IHNjb3BlLmRvbUVsZW1lbnQuYm9keSA6IHNjb3BlLmRvbUVsZW1lbnQ7XG5cblx0XHRcdC8vIHJvdGF0aW5nIGFjcm9zcyB3aG9sZSBzY3JlZW4gZ29lcyAzNjAgZGVncmVlcyBhcm91bmRcblx0XHRcdHJvdGF0ZUxlZnQoIDIgKiBNYXRoLlBJICogcm90YXRlRGVsdGEueCAvIGVsZW1lbnQuY2xpZW50V2lkdGggKiBzY29wZS5yb3RhdGVTcGVlZCApO1xuXG5cdFx0XHQvLyByb3RhdGluZyB1cCBhbmQgZG93biBhbG9uZyB3aG9sZSBzY3JlZW4gYXR0ZW1wdHMgdG8gZ28gMzYwLCBidXQgbGltaXRlZCB0byAxODBcblx0XHRcdHJvdGF0ZVVwKCAyICogTWF0aC5QSSAqIHJvdGF0ZURlbHRhLnkgLyBlbGVtZW50LmNsaWVudEhlaWdodCAqIHNjb3BlLnJvdGF0ZVNwZWVkICk7XG5cblx0XHRcdHJvdGF0ZVN0YXJ0LmNvcHkoIHJvdGF0ZUVuZCApO1xuXG5cdFx0XHRzY29wZS51cGRhdGUoKTtcblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZURvbGx5KCBldmVudCApIHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyggJ2hhbmRsZVRvdWNoTW92ZURvbGx5JyApO1xuXG5cdFx0XHR2YXIgZHggPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVggLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVg7XG5cdFx0XHR2YXIgZHkgPSBldmVudC50b3VjaGVzWyAwIF0ucGFnZVkgLSBldmVudC50b3VjaGVzWyAxIF0ucGFnZVk7XG5cblx0XHRcdHZhciBkaXN0YW5jZSA9IE1hdGguc3FydCggZHggKiBkeCArIGR5ICogZHkgKTtcblxuXHRcdFx0ZG9sbHlFbmQuc2V0KCAwLCBkaXN0YW5jZSApO1xuXG5cdFx0XHRkb2xseURlbHRhLnN1YlZlY3RvcnMoIGRvbGx5RW5kLCBkb2xseVN0YXJ0ICk7XG5cblx0XHRcdGlmICggZG9sbHlEZWx0YS55ID4gMCApIHtcblxuXHRcdFx0XHRkb2xseU91dCggZ2V0Wm9vbVNjYWxlKCkgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggZG9sbHlEZWx0YS55IDwgMCApIHtcblxuXHRcdFx0XHRkb2xseUluKCBnZXRab29tU2NhbGUoKSApO1xuXG5cdFx0XHR9XG5cblx0XHRcdGRvbGx5U3RhcnQuY29weSggZG9sbHlFbmQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaE1vdmVQYW4oIGV2ZW50ICkge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKCAnaGFuZGxlVG91Y2hNb3ZlUGFuJyApO1xuXG5cdFx0XHRwYW5FbmQuc2V0KCBldmVudC50b3VjaGVzWyAwIF0ucGFnZVgsIGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSApO1xuXG5cdFx0XHRwYW5EZWx0YS5zdWJWZWN0b3JzKCBwYW5FbmQsIHBhblN0YXJ0ICk7XG5cblx0XHRcdHBhbiggcGFuRGVsdGEueCwgcGFuRGVsdGEueSApO1xuXG5cdFx0XHRwYW5TdGFydC5jb3B5KCBwYW5FbmQgKTtcblxuXHRcdFx0c2NvcGUudXBkYXRlKCk7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCggZXZlbnQgKSB7XG5cblx0XHRcdC8vY29uc29sZS5sb2coICdoYW5kbGVUb3VjaEVuZCcgKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cdFx0Ly8gZXZlbnQgaGFuZGxlcnMgLSBGU006IGxpc3RlbiBmb3IgZXZlbnRzIGFuZCByZXNldCBzdGF0ZVxuXHRcdC8vXG5cblx0XHRmdW5jdGlvbiBvbk1vdXNlRG93biggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdGlmICggZXZlbnQuYnV0dG9uID09PSBzY29wZS5tb3VzZUJ1dHRvbnMuT1JCSVQgKSB7XG5cblx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlRG93blJvdGF0ZSggZXZlbnQgKTtcblxuXHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlJPVEFURTtcblxuXHRcdFx0fSBlbHNlIGlmICggZXZlbnQuYnV0dG9uID09PSBzY29wZS5tb3VzZUJ1dHRvbnMuWk9PTSApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlRG93bkRvbGx5KCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuRE9MTFk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIGV2ZW50LmJ1dHRvbiA9PT0gc2NvcGUubW91c2VCdXR0b25zLlBBTiApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0aGFuZGxlTW91c2VEb3duUGFuKCBldmVudCApO1xuXG5cdFx0XHRcdHN0YXRlID0gU1RBVEUuUEFOO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIG9uTW91c2VNb3ZlLCBmYWxzZSApO1xuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnbW91c2V1cCcsIG9uTW91c2VVcCwgZmFsc2UgKTtcblxuXHRcdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBzdGFydEV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uTW91c2VNb3ZlKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gU1RBVEUuUk9UQVRFICkge1xuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHN0YXRlID09PSBTVEFURS5ET0xMWSApIHtcblxuXHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRcdGhhbmRsZU1vdXNlTW92ZURvbGx5KCBldmVudCApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBzdGF0ZSA9PT0gU1RBVEUuUEFOICkge1xuXG5cdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRoYW5kbGVNb3VzZU1vdmVQYW4oIGV2ZW50ICk7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uTW91c2VVcCggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGhhbmRsZU1vdXNlVXAoIGV2ZW50ICk7XG5cblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZW1vdmUnLCBvbk1vdXNlTW92ZSwgZmFsc2UgKTtcblx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdtb3VzZXVwJywgb25Nb3VzZVVwLCBmYWxzZSApO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbk1vdXNlV2hlZWwoIGV2ZW50ICkge1xuXG5cdFx0XHRpZiAoIHNjb3BlLmVuYWJsZWQgPT09IGZhbHNlIHx8IHNjb3BlLmVuYWJsZVpvb20gPT09IGZhbHNlIHx8ICggc3RhdGUgIT09IFNUQVRFLk5PTkUgJiYgc3RhdGUgIT09IFNUQVRFLlJPVEFURSApICkgcmV0dXJuO1xuXG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cblx0XHRcdGhhbmRsZU1vdXNlV2hlZWwoIGV2ZW50ICk7XG5cblx0XHRcdHNjb3BlLmRpc3BhdGNoRXZlbnQoIHN0YXJ0RXZlbnQgKTsgLy8gbm90IHN1cmUgd2h5IHRoZXNlIGFyZSBoZXJlLi4uXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25LZXlEb3duKCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVLZXlzID09PSBmYWxzZSB8fCBzY29wZS5lbmFibGVQYW4gPT09IGZhbHNlICkgcmV0dXJuO1xuXG5cdFx0XHRoYW5kbGVLZXlEb3duKCBldmVudCApO1xuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KCBldmVudCApIHtcblxuXHRcdFx0aWYgKCBzY29wZS5lbmFibGVkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0c3dpdGNoICggZXZlbnQudG91Y2hlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y2FzZSAxOlx0Ly8gb25lLWZpbmdlcmVkIHRvdWNoOiByb3RhdGVcblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUm90YXRlID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0XHRcdGhhbmRsZVRvdWNoU3RhcnRSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX1JPVEFURTtcblxuXHRcdFx0XHRcdGJyZWFrO1xuXG5cdFx0XHRcdGNhc2UgMjpcdC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRoYW5kbGVUb3VjaFN0YXJ0RG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRzdGF0ZSA9IFNUQVRFLlRPVUNIX0RPTExZO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0Y2FzZSAzOiAvLyB0aHJlZS1maW5nZXJlZCB0b3VjaDogcGFuXG5cblx0XHRcdFx0XHRpZiAoIHNjb3BlLmVuYWJsZVBhbiA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdFx0XHRoYW5kbGVUb3VjaFN0YXJ0UGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5UT1VDSF9QQU47XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRkZWZhdWx0OlxuXG5cdFx0XHRcdFx0c3RhdGUgPSBTVEFURS5OT05FO1xuXG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLk5PTkUgKSB7XG5cblx0XHRcdFx0c2NvcGUuZGlzcGF0Y2hFdmVudCggc3RhcnRFdmVudCApO1xuXG5cdFx0XHR9XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvblRvdWNoTW92ZSggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuXHRcdFx0c3dpdGNoICggZXZlbnQudG91Y2hlcy5sZW5ndGggKSB7XG5cblx0XHRcdFx0Y2FzZSAxOiAvLyBvbmUtZmluZ2VyZWQgdG91Y2g6IHJvdGF0ZVxuXG5cdFx0XHRcdFx0aWYgKCBzY29wZS5lbmFibGVSb3RhdGUgPT09IGZhbHNlICkgcmV0dXJuO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgIT09IFNUQVRFLlRPVUNIX1JPVEFURSApIHJldHVybjsgLy8gaXMgdGhpcyBuZWVkZWQ/Li4uXG5cblx0XHRcdFx0XHRoYW5kbGVUb3VjaE1vdmVSb3RhdGUoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDI6IC8vIHR3by1maW5nZXJlZCB0b3VjaDogZG9sbHlcblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlWm9vbSA9PT0gZmFsc2UgKSByZXR1cm47XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSAhPT0gU1RBVEUuVE9VQ0hfRE9MTFkgKSByZXR1cm47IC8vIGlzIHRoaXMgbmVlZGVkPy4uLlxuXG5cdFx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlRG9sbHkoIGV2ZW50ICk7XG5cblx0XHRcdFx0XHRicmVhaztcblxuXHRcdFx0XHRjYXNlIDM6IC8vIHRocmVlLWZpbmdlcmVkIHRvdWNoOiBwYW5cblxuXHRcdFx0XHRcdGlmICggc2NvcGUuZW5hYmxlUGFuID09PSBmYWxzZSApIHJldHVybjtcblx0XHRcdFx0XHRpZiAoIHN0YXRlICE9PSBTVEFURS5UT1VDSF9QQU4gKSByZXR1cm47IC8vIGlzIHRoaXMgbmVlZGVkPy4uLlxuXG5cdFx0XHRcdFx0aGFuZGxlVG91Y2hNb3ZlUGFuKCBldmVudCApO1xuXG5cdFx0XHRcdFx0YnJlYWs7XG5cblx0XHRcdFx0ZGVmYXVsdDpcblxuXHRcdFx0XHRcdHN0YXRlID0gU1RBVEUuTk9ORTtcblxuXHRcdFx0fVxuXG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gb25Ub3VjaEVuZCggZXZlbnQgKSB7XG5cblx0XHRcdGlmICggc2NvcGUuZW5hYmxlZCA9PT0gZmFsc2UgKSByZXR1cm47XG5cblx0XHRcdGhhbmRsZVRvdWNoRW5kKCBldmVudCApO1xuXG5cdFx0XHRzY29wZS5kaXNwYXRjaEV2ZW50KCBlbmRFdmVudCApO1xuXG5cdFx0XHRzdGF0ZSA9IFNUQVRFLk5PTkU7XG5cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbkNvbnRleHRNZW51KCBldmVudCApIHtcblxuXHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuXHRcdH1cblxuXHRcdC8vXG5cblx0XHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdjb250ZXh0bWVudScsIG9uQ29udGV4dE1lbnUsIGZhbHNlICk7XG5cblx0XHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICdtb3VzZWRvd24nLCBvbk1vdXNlRG93biwgZmFsc2UgKTtcblx0XHRzY29wZS5kb21FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoICd3aGVlbCcsIG9uTW91c2VXaGVlbCwgZmFsc2UgKTtcblxuXHRcdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNoc3RhcnQnLCBvblRvdWNoU3RhcnQsIGZhbHNlICk7XG5cdFx0c2NvcGUuZG9tRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hlbmQnLCBvblRvdWNoRW5kLCBmYWxzZSApO1xuXHRcdHNjb3BlLmRvbUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCBmYWxzZSApO1xuXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdrZXlkb3duJywgb25LZXlEb3duLCBmYWxzZSApO1xuXG5cdFx0Ly8gZm9yY2UgYW4gdXBkYXRlIGF0IHN0YXJ0XG5cblx0XHR0aGlzLnVwZGF0ZSgpO1xuXG5cdH07XG5cblx0T3JiaXRDb250cm9scy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlICk7XG5cdE9yYml0Q29udHJvbHMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gT3JiaXRDb250cm9scztcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyggT3JiaXRDb250cm9scy5wcm90b3R5cGUsIHtcblxuXHRcdGNlbnRlcjoge1xuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuY2VudGVyIGhhcyBiZWVuIHJlbmFtZWQgdG8gLnRhcmdldCcgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXMudGFyZ2V0O1xuXG5cdFx0XHR9XG5cblx0XHR9LFxuXG5cdFx0Ly8gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXG5cdFx0bm9ab29tOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1pvb20gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVab29tIGluc3RlYWQuJyApO1xuXHRcdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZVpvb207XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9ab29tIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlWm9vbSBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5lbmFibGVab29tID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdG5vUm90YXRlOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1JvdGF0ZSBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVJvdGF0ZSBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVSb3RhdGU7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9Sb3RhdGUgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVSb3RhdGUgaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZW5hYmxlUm90YXRlID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdG5vUGFuOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5ub1BhbiBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZVBhbiBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVQYW47XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9QYW4gaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVQYW4gaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZW5hYmxlUGFuID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdG5vS2V5czoge1xuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAubm9LZXlzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlS2V5cyBpbnN0ZWFkLicgKTtcblx0XHRcdFx0cmV0dXJuICEgdGhpcy5lbmFibGVLZXlzO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLm5vS2V5cyBoYXMgYmVlbiBkZXByZWNhdGVkLiBVc2UgLmVuYWJsZUtleXMgaW5zdGVhZC4nICk7XG5cdFx0XHRcdHRoaXMuZW5hYmxlS2V5cyA9ICEgdmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH0sXG5cblx0XHRzdGF0aWNNb3ZpbmcgOiB7XG5cblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXG5cdFx0XHRcdGNvbnNvbGUud2FybiggJ1RIUkVFLk9yYml0Q29udHJvbHM6IC5zdGF0aWNNb3ZpbmcgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVXNlIC5lbmFibGVEYW1waW5nIGluc3RlYWQuJyApO1xuXHRcdFx0XHRyZXR1cm4gISB0aGlzLmVuYWJsZURhbXBpbmc7XG5cblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24gKCB2YWx1ZSApIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuc3RhdGljTW92aW5nIGhhcyBiZWVuIGRlcHJlY2F0ZWQuIFVzZSAuZW5hYmxlRGFtcGluZyBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5lbmFibGVEYW1waW5nID0gISB2YWx1ZTtcblxuXHRcdFx0fVxuXG5cdFx0fSxcblxuXHRcdGR5bmFtaWNEYW1waW5nRmFjdG9yIDoge1xuXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblxuXHRcdFx0XHRjb25zb2xlLndhcm4oICdUSFJFRS5PcmJpdENvbnRyb2xzOiAuZHluYW1pY0RhbXBpbmdGYWN0b3IgaGFzIGJlZW4gcmVuYW1lZC4gVXNlIC5kYW1waW5nRmFjdG9yIGluc3RlYWQuJyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5kYW1waW5nRmFjdG9yO1xuXG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0XHRcdFx0Y29uc29sZS53YXJuKCAnVEhSRUUuT3JiaXRDb250cm9sczogLmR5bmFtaWNEYW1waW5nRmFjdG9yIGhhcyBiZWVuIHJlbmFtZWQuIFVzZSAuZGFtcGluZ0ZhY3RvciBpbnN0ZWFkLicgKTtcblx0XHRcdFx0dGhpcy5kYW1waW5nRmFjdG9yID0gdmFsdWU7XG5cblx0XHRcdH1cblxuXHRcdH1cblxuXHR9ICk7XG5cblx0cmV0dXJuIE9yYml0Q29udHJvbHM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3RocmVlLW9yYml0LWNvbnRyb2xzL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.default = BaseRenderer;\n\nvar _three = __webpack_require__(1);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n// Textures\nvar TEXTURES = {\n  'moon': __webpack_require__(133),\n  'earth': __webpack_require__(127),\n  'earthspec': __webpack_require__(128),\n  'earthbump': __webpack_require__(126),\n  'jupiter': __webpack_require__(129),\n  'saturn': __webpack_require__(136),\n  'mercury': __webpack_require__(132),\n  'venus': __webpack_require__(138),\n  'mars': __webpack_require__(131),\n  'pluto': __webpack_require__(135),\n  'neptune': __webpack_require__(134),\n  'uranus': __webpack_require__(137),\n  'lensflare': __webpack_require__(130),\n  'rock1': __webpack_require__(125)\n};\n\nvar MODELS = {\n  'rock1': __webpack_require__(139)\n};\n\nfunction BaseRenderer(textureLoader, modelLoader, state) {\n  this.textureLoader = textureLoader;\n  this.modelLoader = modelLoader;\n  this.state = state;\n};\n\n// Allow renderers to act on changes to the user interface\nObject.assign(BaseRenderer.prototype, THREE.EventDispatcher.prototype);\n\n/**\n *\n */\nBaseRenderer.prototype._onWindowResize = function (originalHeight, originalFov) {\n  var _this = this;\n\n  var tanFOV = Math.tan(Math.PI / 180 * originalFov / 2);\n  return function (event) {\n    _this.camera.aspect = window.innerWidth / window.innerHeight;\n    _this.camera.fov = 360 / Math.PI * Math.atan(tanFOV * (window.innerHeight / originalHeight));\n\n    _this.camera.updateProjectionMatrix();\n    _this.renderer.setSize(window.innerWidth, window.innerHeight);\n  };\n};\n\nBaseRenderer.prototype._loadTextures = function (textures) {\n  var _this2 = this;\n\n  return Promise.all(textures.filter(function (t) {\n    return TEXTURES.hasOwnProperty(t);\n  }).map(function (key) {\n    return new Promise(function (resolve, reject) {\n      _this2.textureLoader.load(TEXTURES[key], function (texture) {\n        resolve([key, texture]);\n      });\n    });\n  })).then(function (values) {\n    return Promise.resolve(new Map(values));\n  });\n};\n\nBaseRenderer.prototype._loadModels = function () {\n  var _this3 = this;\n\n  return Promise.all(Object.entries(MODELS).map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return new Promise(function (resolve, reject) {\n      _this3.modelLoader.load(value, function (model) {\n        resolve([key, model]);\n      });\n    });\n  })).then(function (values) {\n    return Promise.resolve(new Map(values));\n  });\n};\n\nBaseRenderer.prototype._setupLightSources = function () {\n  var ambientLight = new THREE.AmbientLight(0x202020);\n  var directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n\n  directionalLight.castShadow = true;\n  directionalLight.shadow.camera.up = new THREE.Vector3(0, 0, 1);\n\n  this.scene.add(ambientLight);\n  this.scene.add(directionalLight);\n\n  return directionalLight;\n};\n\nBaseRenderer.prototype._createSkyBox = function () {\n\n  //This will add a starfield to the background of a scene\n  var vertices = [];\n\n  for (var i = 0; i < 20000; i++) {\n\n    var r = void 0;\n\n    // Generate stars that are a minimum distance away\n    do {\n      r = new THREE.Vector3(THREE.Math.randFloatSpread(2000), THREE.Math.randFloatSpread(2000), THREE.Math.randFloatSpread(2000));\n    } while (r.lengthSq() < 100);\n\n    vertices.push(r.x, r.y, r.z);\n  }\n\n  var starsGeometry = new THREE.BufferGeometry();\n  starsGeometry.addAttribute('position', new THREE.BufferAttribute(Float32Array.from(vertices), 3));\n\n  var starsMaterial = new THREE.PointsMaterial({\n    color: 0x888888\n  });\n\n  var starField = new THREE.Points(starsGeometry, starsMaterial);\n  starField.matrixAutoUpdate = false;\n\n  return starField;\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvYXBwL0Jhc2VSZW5kZXJlci5qcz8zMzEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcblxuLy8gVGV4dHVyZXNcbmNvbnN0IFRFWFRVUkVTID0ge1xuICAnbW9vbic6IHJlcXVpcmUoJy4uL2ltZy9tb29ubWFwLmpwZycpLFxuICAnZWFydGgnOiByZXF1aXJlKCcuLi9pbWcvZWFydGhtYXAuanBnJyksXG4gICdlYXJ0aHNwZWMnOiByZXF1aXJlKCcuLi9pbWcvZWFydGhzcGVjLmpwZycpLFxuICAnZWFydGhidW1wJzogcmVxdWlyZSgnLi4vaW1nL2VhcnRoYnVtcC5qcGcnKSxcbiAgJ2p1cGl0ZXInOiByZXF1aXJlKCcuLi9pbWcvanVwaXRlcm1hcC5qcGcnKSxcbiAgJ3NhdHVybic6IHJlcXVpcmUoJy4uL2ltZy9zYXR1cm5tYXAuanBnJyksXG4gICdtZXJjdXJ5JzogcmVxdWlyZSgnLi4vaW1nL21lcmN1cnltYXAuanBnJyksXG4gICd2ZW51cyc6IHJlcXVpcmUoJy4uL2ltZy92ZW51c21hcC5qcGcnKSxcbiAgJ21hcnMnOiByZXF1aXJlKCcuLi9pbWcvbWFyc21hcC5qcGcnKSxcbiAgJ3BsdXRvJzogcmVxdWlyZSgnLi4vaW1nL3BsdXRvbWFwLmpwZycpLFxuICAnbmVwdHVuZSc6IHJlcXVpcmUoJy4uL2ltZy9uZXB0dW5lbWFwLmpwZycpLFxuICAndXJhbnVzJzogcmVxdWlyZSgnLi4vaW1nL3VyYW51c21hcC5qcGcnKSxcbiAgJ2xlbnNmbGFyZSc6IHJlcXVpcmUoJy4uL2ltZy9sZW5zZmxhcmUucG5nJyksXG4gICdyb2NrMSc6IHJlcXVpcmUoJy4uL21vZGVscy9yb2NrMS9Bcm1HcmEwNS5qcGcnKSxcbn07XG5cbmNvbnN0IE1PREVMUyA9IHtcbiAgJ3JvY2sxJzogcmVxdWlyZSgnLi4vbW9kZWxzL3JvY2sxLmRhZScpLFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYXNlUmVuZGVyZXIodGV4dHVyZUxvYWRlciwgbW9kZWxMb2FkZXIsIHN0YXRlKSB7XG4gIHRoaXMudGV4dHVyZUxvYWRlciA9IHRleHR1cmVMb2FkZXI7XG4gIHRoaXMubW9kZWxMb2FkZXIgPSBtb2RlbExvYWRlcjtcbiAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xufTtcblxuLy8gQWxsb3cgcmVuZGVyZXJzIHRvIGFjdCBvbiBjaGFuZ2VzIHRvIHRoZSB1c2VyIGludGVyZmFjZVxuT2JqZWN0LmFzc2lnbihCYXNlUmVuZGVyZXIucHJvdG90eXBlLCBUSFJFRS5FdmVudERpc3BhdGNoZXIucHJvdG90eXBlKTtcblxuLyoqXG4gKlxuICovXG5CYXNlUmVuZGVyZXIucHJvdG90eXBlLl9vbldpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uIChvcmlnaW5hbEhlaWdodCwgb3JpZ2luYWxGb3YpIHtcbiAgY29uc3QgdGFuRk9WID0gTWF0aC50YW4oKChNYXRoLlBJIC8gMTgwKSAqIG9yaWdpbmFsRm92IC8gMikpO1xuICByZXR1cm4gKGV2ZW50KSA9PiB7XG4gICAgdGhpcy5jYW1lcmEuYXNwZWN0ID0gd2luZG93LmlubmVyV2lkdGggLyB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgdGhpcy5jYW1lcmEuZm92ID0gKDM2MCAvIE1hdGguUEkpICogTWF0aC5hdGFuKHRhbkZPViAqICh3aW5kb3cuaW5uZXJIZWlnaHQgLyBvcmlnaW5hbEhlaWdodCkpO1xuXG4gICAgdGhpcy5jYW1lcmEudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcbiAgfVxuXG59O1xuXG5CYXNlUmVuZGVyZXIucHJvdG90eXBlLl9sb2FkVGV4dHVyZXMgPSBmdW5jdGlvbiAodGV4dHVyZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgdGV4dHVyZXMuZmlsdGVyKCh0KSA9PiBURVhUVVJFUy5oYXNPd25Qcm9wZXJ0eSh0KSlcbiAgICAgIC5tYXAoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgIHRoaXMudGV4dHVyZUxvYWRlci5sb2FkKFRFWFRVUkVTW2tleV0sXG4gICAgICAgICAgICAodGV4dHVyZSkgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKFtrZXksIHRleHR1cmVdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgKVxuICAgIC50aGVuKHZhbHVlcyA9PiB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBNYXAodmFsdWVzKSlcbiAgICB9KTtcbn07XG5cbkJhc2VSZW5kZXJlci5wcm90b3R5cGUuX2xvYWRNb2RlbHMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChPYmplY3QuZW50cmllcyhNT0RFTFMpXG4gICAgICAubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICB0aGlzLm1vZGVsTG9hZGVyLmxvYWQodmFsdWUsXG4gICAgICAgICAgICAobW9kZWwpID0+IHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShba2V5LCBtb2RlbF0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSkpXG4gICAgLnRoZW4odmFsdWVzID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IE1hcCh2YWx1ZXMpKTtcbiAgICB9KTtcbn07XG5cbkJhc2VSZW5kZXJlci5wcm90b3R5cGUuX3NldHVwTGlnaHRTb3VyY2VzID0gZnVuY3Rpb24gKCkge1xuICBjb25zdCBhbWJpZW50TGlnaHQgPSBuZXcgVEhSRUUuQW1iaWVudExpZ2h0KDB4MjAyMDIwKTtcbiAgY29uc3QgZGlyZWN0aW9uYWxMaWdodCA9IG5ldyBUSFJFRS5EaXJlY3Rpb25hbExpZ2h0KDB4ZmZmZmZmLCAxKTtcblxuICBkaXJlY3Rpb25hbExpZ2h0LmNhc3RTaGFkb3cgPSB0cnVlO1xuICBkaXJlY3Rpb25hbExpZ2h0LnNoYWRvdy5jYW1lcmEudXAgPSBuZXcgVEhSRUUuVmVjdG9yMygwLCAwLCAxKTtcblxuICB0aGlzLnNjZW5lLmFkZChhbWJpZW50TGlnaHQpO1xuICB0aGlzLnNjZW5lLmFkZChkaXJlY3Rpb25hbExpZ2h0KTtcblxuICByZXR1cm4gZGlyZWN0aW9uYWxMaWdodDtcbn07XG5cbkJhc2VSZW5kZXJlci5wcm90b3R5cGUuX2NyZWF0ZVNreUJveCA9IGZ1bmN0aW9uICgpIHtcblxuICAvL1RoaXMgd2lsbCBhZGQgYSBzdGFyZmllbGQgdG8gdGhlIGJhY2tncm91bmQgb2YgYSBzY2VuZVxuICBsZXQgdmVydGljZXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IDIwMDAwOyBpKyspIHtcblxuICAgIGxldCByO1xuXG4gICAgLy8gR2VuZXJhdGUgc3RhcnMgdGhhdCBhcmUgYSBtaW5pbXVtIGRpc3RhbmNlIGF3YXlcbiAgICBkbyB7XG4gICAgICByID0gbmV3IFRIUkVFLlZlY3RvcjMoXG4gICAgICAgIFRIUkVFLk1hdGgucmFuZEZsb2F0U3ByZWFkKDIwMDApLFxuICAgICAgICBUSFJFRS5NYXRoLnJhbmRGbG9hdFNwcmVhZCgyMDAwKSxcbiAgICAgICAgVEhSRUUuTWF0aC5yYW5kRmxvYXRTcHJlYWQoMjAwMCkpXG4gICAgfSB3aGlsZSAoci5sZW5ndGhTcSgpIDwgMTAwKVxuXG4gICAgdmVydGljZXMucHVzaChyLngsIHIueSwgci56KTtcbiAgfVxuXG4gIGxldCBzdGFyc0dlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG4gIHN0YXJzR2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsXG4gICAgbmV3IFRIUkVFLkJ1ZmZlckF0dHJpYnV0ZShGbG9hdDMyQXJyYXkuZnJvbSh2ZXJ0aWNlcyksIDMpKTtcblxuICBsZXQgc3RhcnNNYXRlcmlhbCA9IG5ldyBUSFJFRS5Qb2ludHNNYXRlcmlhbCh7XG4gICAgY29sb3I6IDB4ODg4ODg4XG4gIH0pXG5cbiAgbGV0IHN0YXJGaWVsZCA9IG5ldyBUSFJFRS5Qb2ludHMoc3RhcnNHZW9tZXRyeSwgc3RhcnNNYXRlcmlhbCk7XG4gIHN0YXJGaWVsZC5tYXRyaXhBdXRvVXBkYXRlID0gZmFsc2U7XG5cbiAgcmV0dXJuIHN0YXJGaWVsZDtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2FwcC9CYXNlUmVuZGVyZXIuanMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBd0JBO0FBQ0E7QUF6QkE7QUFDQTtBQURBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBZEE7QUFDQTtBQWdCQTtBQUNBO0FBREE7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _BaseRenderer = __webpack_require__(5);\n\nvar _BaseRenderer2 = _interopRequireDefault(_BaseRenderer);\n\nvar _three = __webpack_require__(1);\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _Bodies = __webpack_require__(2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OrbitControls = __webpack_require__(4)(THREE);\n\nfunction CameraViewRenderer(container, textureLoader, modelLoader, commonState) {\n\n  _BaseRenderer2.default.call(this, textureLoader, modelLoader, commonState);\n\n  this.renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: false\n  });\n  this.renderer.setPixelRatio(window.devicePixelRatio);\n  this.renderer.shadowMap.enabled = true;\n  this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n  this.container = container;\n  container.appendChild(this.renderer.domElement);\n\n  this.bodyCache = new Map();\n};\n\n/**\n * Use this lifeycle method to add event listeners\n */\nCameraViewRenderer.prototype.viewDidLoad = function (solarSystem) {\n  var _this = this;\n\n  // Find the body we are focusing on\n  var focus = solarSystem.find(this.state.focus);\n\n  this.scene = new THREE.Scene();\n  this.scene.background = new THREE.Color('black');\n\n  // Background stars\n  var skybox = this._createSkyBox();\n  this.scene.add(skybox);\n\n  // Setup light\n  this.lightSource = this._setupLightSources();\n\n  var width = window.innerWidth;\n  var height = window.innerHeight;\n\n  // initialize camera and scene\n  this.camera = new THREE.PerspectiveCamera(45, width / height, 1e-10, 2);\n\n  /**\n   * Callback to recenter the camera\n   */\n  var recenter = function recenter() {\n    var focus = solarSystem.find(_this.state.focus);\n\n    if (focus.name === 'sun') {\n      _this.camera.up = new THREE.Vector3(0, 0, 1);\n      _this.camera.position.set(0, -5 * focus.constants.radius, 0);\n      _this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n      return;\n    }\n\n    // Set camera behind in the opposite direction of the velocity vector\n    var camera_position = focus.derived.velocity.clone().normalize().negate().multiplyScalar(5 * focus.constants.radius);\n\n    var primary_position = new THREE.Vector3().sub(_this._adjustCoordinates(focus, focus.primary.derived.position));\n\n    // Base the camera UP direction off of the velocity vector, rotated 90 degrees up.\n    _this.camera.up = new THREE.Vector3().copy(focus.derived.velocity).applyAxisAngle(primary_position.normalize(), Math.PI / 2).normalize();\n\n    _this.camera.position.set(camera_position.x, camera_position.y, camera_position.z);\n    _this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n  };\n\n  /**\n   * Callback for when we change the body focus\n   */\n  var onFocus = function onFocus(focus) {\n    // First dispose of existing orbit controls if they exist.\n    _this.orbitControls && _this.orbitControls.dispose();\n\n    recenter();\n\n    _this.orbitControls = new OrbitControls(_this.camera, _this.renderer.domElement);\n    _this.orbitControls.minDistance = focus.constants.radius * 1.5;\n    _this.orbitControls.maxDistance = focus.constants.radius * 100;\n  };\n\n  this.addEventListener('focus', function (event) {\n    var focus = solarSystem.find(event.focus);\n    onFocus(focus);\n  });\n\n  this.addEventListener('recenter', function (event) {\n    recenter();\n  });\n\n  var onWindowResize = this._onWindowResize(height, this.camera.fov);\n  this.addEventListener('resize', function (event) {\n    onWindowResize();\n  });\n\n  /**\n   * Setup lifecycle methods for registering/deregistering event listeners\n   */\n\n  this.viewWillAppear = function () {\n    var focus = solarSystem.find(_this.state.focus);\n    onFocus(focus);\n    onWindowResize();\n  };\n\n  this.viewWillDisappear = function () {\n    _this.orbitControls.dispose();\n    _this.orbitControls = null;\n  };\n\n  return Promise.resolve();\n};\n\n/**\n * Render the given solar system\n */\nCameraViewRenderer.prototype.render = function (solarSystem) {\n  var _this2 = this;\n\n  // Find the body we are focusing on\n  var focus = solarSystem.find(this.state.focus);\n  var sun = solarSystem.find('sun');\n\n  // Track the light source\n  this._adjustLightSource(focus, sun);\n\n  // Find all of the bodies that are we are concerned about in our render loop\n\n  var _lookupNearbyBodies = this._lookupNearbyBodies(focus, solarSystem.bodies),\n      _lookupNearbyBodies2 = _slicedToArray(_lookupNearbyBodies, 2),\n      neighbours = _lookupNearbyBodies2[0],\n      outliers = _lookupNearbyBodies2[1];\n\n  // Make objects outside of our current sphere invisible (to save resources)\n\n\n  outliers.forEach(function (body) {\n    var cached = _this2.bodyCache.get(body.name);\n    if (cached) cached.visible = false;\n  });\n\n  // Update the positions of all of our bodies\n  neighbours.forEach(function (body) {\n\n    _this2.loadThreeBody(body).then(function (threeBody) {\n\n      threeBody.visible = true;\n\n      var derived = body.derived;\n\n      // Adjust position to re-center the coordinate system on the focus\n      var position = _this2._adjustCoordinates(focus, derived.position);\n      threeBody.position.set(position.x, position.y, position.z);\n\n      // Adjust orbital tilt and rotation.  First, rotate the body using the same\n      // set of transforms we use to transform to ecliptic.  Then, apply the axial tilt,\n      // and the accumulated rotation around the axis ('derived.rotation');\n      threeBody.rotation.set(0, 0, 0);\n      threeBody.rotateZ(derived.omega);\n      threeBody.rotateX(derived.I);\n      threeBody.rotateZ(derived.argumentPerihelion);\n      threeBody.rotateOnAxis(new THREE.Vector3(1, 0, 0), Math.PI / 2);\n      threeBody.rotateOnAxis(new THREE.Vector3(1, 0, 0), -(body.constants.axial_tilt || 0) * Math.PI / 180);\n      threeBody.rotateY(derived.rotation);\n    });\n  });\n\n  this.renderer.render(this.scene, this.camera);\n};\n\nCameraViewRenderer.prototype.loadThreeBody = function (body) {\n  var _this3 = this;\n\n  // Cache our bodies\n  var cached = this.bodyCache.get(body.name);\n  if (cached) {\n    return Promise.resolve(cached);\n  }\n\n  var material = void 0;\n  if (body.name === 'sun') {\n    material = new THREE.MeshBasicMaterial({\n      color: 'yellow'\n    });\n  } else {\n    material = new THREE.MeshPhongMaterial();\n  }\n\n  var threeBody = new THREE.Mesh(new THREE.SphereGeometry(body.constants.radius, 128, 128), material);\n\n  threeBody.receiveShadow = true;\n  threeBody.castShadow = true;\n\n  this.scene.add(threeBody);\n  this.bodyCache.set(body.name, threeBody);\n\n  return Promise.race([new Promise(function (resolve, reject) {\n    return resolve(threeBody);\n  }), new Promise(function (resolve, reject) {\n\n    var texturesToLoad = [body.name, body.name + 'bump', body.name + 'spec'];\n    return _this3._loadTextures(texturesToLoad).then(function (textures) {\n\n      if (textures.has(body.name + 'bump')) {\n        material.bumpMap = textures.get(body.name + 'bump');\n        material.bumpScale = 100000 / _Bodies.AU;\n      }\n\n      if (textures.has(body.name + 'spec')) {\n        material.specularMap = textures.get(body.name + 'spec');\n        material.specular = new THREE.Color('grey');\n      }\n\n      if (textures.has(body.name)) {\n        // Reduce harsh glare effect of the light source (default 30 -> 1);\n        material.map = textures.get(body.name);\n        material.shininess = 1;\n      }\n\n      material.needsUpdate = true;\n      return Promise.resolve(threeBody);\n    });\n  })]);\n};\n\nCameraViewRenderer.prototype._adjustLightSource = function (focus, sun) {\n\n  var light = this.lightSource;\n  var lightPosition = this._adjustCoordinates(focus, sun.derived.position);\n\n  light.position.set(lightPosition.x, lightPosition.y, lightPosition.z);\n\n  // Frame the shadow box appropriately\n  if (focus.primary && focus.primary.name !== 'sun') {\n    var lightBoxLength = focus.primary.constants.radius;\n    light.shadow.camera.near = 0.99 * focus.primary.derived.position.length();\n    light.shadow.camera.far = 1.01 * focus.primary.derived.position.length();\n    light.shadow.camera.left = -lightBoxLength;\n    light.shadow.camera.right = lightBoxLength;\n    light.shadow.camera.top = lightBoxLength;\n    light.shadow.camera.bottom = -lightBoxLength;\n  }\n};\n\nCameraViewRenderer.prototype._lookupNearbyBodies = function (focus, bodies) {\n\n  var nearbyThreshold = 0.05;\n  var partitioned = bodies.map(function (body) {\n    var distance = new THREE.Vector3().subVectors(focus.derived.position, body.derived.position);\n    return [body, distance.lengthSq()];\n  }).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        body = _ref2[0],\n        distance = _ref2[1];\n\n    if (distance < nearbyThreshold || body.name === 'sun') {\n      acc[0].push(body);\n    } else {\n      acc[1].push(body);\n    }\n    return acc;\n  }, [[], []]);\n\n  var neighbours = partitioned[0];\n  var outliers = partitioned[1];\n  return [neighbours, outliers];\n};\n\n/**\n * Recenter the coordinate system on the focus being the 'center'.\n */\nCameraViewRenderer.prototype._adjustCoordinates = function (focus, position) {\n\n  if (!focus) return position.clone();\n\n  var coordinates = position.clone().sub(focus.derived.position);\n\n  return coordinates;\n};\n\n// Inherit from BaseRenderer\nObject.assign(CameraViewRenderer.prototype, _BaseRenderer2.default.prototype);\n\nexports.default = CameraViewRenderer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DEFAULT_FOCUS = 'earth';\n\nvar CommonState = function CommonState() {\n  var focus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_FOCUS;\n\n  _classCallCheck(this, CommonState);\n\n  this.focus = focus;\n};\n\nexports.default = CommonState;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9hcHAvQ29tbW9uU3RhdGUuanM/ZWY4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBERUZBVUxUX0ZPQ1VTID0gJ2VhcnRoJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tbW9uU3RhdGUge1xuICBjb25zdHJ1Y3Rvcihmb2N1cyA9IERFRkFVTFRfRk9DVVMpIHtcbiAgICB0aGlzLmZvY3VzID0gZm9jdXM7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYXBwL0NvbW1vblN0YXRlLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBSkEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _BaseRenderer = __webpack_require__(5);\n\nvar _BaseRenderer2 = _interopRequireDefault(_BaseRenderer);\n\nvar _Bodies = __webpack_require__(2);\n\nvar _three = __webpack_require__(1);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar OrbitControls = __webpack_require__(4)(THREE);\n\nvar TRAJECTORY_SCALE = 2;\nvar SHOW_VELOCITY_VECTORS = false;\n\nvar PLANET_COLOURS = {\n  \"sun\": \"yellow\",\n  \"mercury\": \"silver\",\n  \"venus\": \"green\",\n  \"earth\": \"skyblue\",\n  \"moon\": \"gray\",\n  \"mars\": \"red\",\n  \"jupiter\": \"orange\",\n  \"saturn\": \"tan\",\n  \"uranus\": \"skyblue\",\n  \"neptune\": \"lightblue\",\n  \"pluto\": \"silver\"\n};\n\nfunction OrbitalMapRenderer(container, textureLoader, modelLoader, commonState) {\n\n  _BaseRenderer2.default.call(this, textureLoader, modelLoader, commonState);\n\n  this.container = container;\n  this.renderer = new THREE.WebGLRenderer();\n  this.renderer.setPixelRatio(window.devicePixelRatio);\n  container.appendChild(this.renderer.domElement);\n\n  this.scene = new THREE.Scene();\n  this.bodyMap = new Map();\n};\n\nOrbitalMapRenderer.prototype.viewDidLoad = function (solarSystem) {\n  var _this = this;\n\n  return Promise.race([Promise.resolve()]).then(function () {\n\n    var width = window.innerWidth;\n    var height = window.innerHeight;\n\n    _this.camera = new THREE.PerspectiveCamera(45, width / height, 1e-10, 2);\n    _this.camera.up = new THREE.Vector3(0, 0, 1);\n\n    var skybox = _this._createSkyBox();\n    _this.scene.add(skybox);\n\n    var recenter = function recenter() {\n      var focus = solarSystem.find(_this.state.focus);\n\n      // For all bodies (except sun), use the size of the orbiting radius for\n      // the camera position.\n      var cameraDistance = void 0;\n      if (focus.name === 'sun') {\n        cameraDistance = 100;\n      } else {\n        var position = focus.derived.position;\n        var primary_position = focus.primary.derived.position;\n        cameraDistance = 10 * primary_position.distanceTo(position);\n      }\n\n      _this.orbitControls.reset();\n      _this.camera.position.set(0, 0, cameraDistance);\n      _this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n    };\n\n    _this.addEventListener('click', function (event) {\n      var location = event.location;\n\n      // Do a hit-test check for all planets\n      var found = Array.from(_this.bodyMap.entries()).map(function (entry) {\n\n        var id = entry[0];\n        var objects = entry[1];\n\n        var position = objects.body.position.clone();\n        var projection = position.project(_this.camera);\n        var body = new THREE.Vector2(projection.x * width, projection.y * height);\n\n        return {\n          id: id,\n          distance: body.distanceTo(location)\n        };\n      }).sort(function (left, right) {\n        return left.distance - right.distance;\n      }).find(function (_ref) {\n        var id = _ref.id,\n            distance = _ref.distance;\n        return distance < 50;\n      });\n\n      // Update the focus to the target planet\n      if (found) {\n        _this.state.focus = found.id;\n      }\n    });\n\n    _this.addEventListener('focus', function (event) {\n      recenter();\n    });\n\n    _this.addEventListener('recenter', function (event) {\n      recenter();\n    });\n\n    var onWindowResize = _this._onWindowResize(height, _this.camera.fov);\n    _this.addEventListener('resize', function (event) {\n      onWindowResize();\n    });\n\n    _this.viewWillAppear = function () {\n      this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.orbitControls.maxDistance = 100 * TRAJECTORY_SCALE;\n      this.orbitControls.dollySpeed = 2.0;\n      onWindowResize();\n      recenter();\n    };\n\n    _this.viewWillDisappear = function () {\n      this.orbitControls.dispose();\n      this.orbitControls = null;\n    };\n\n    // Maintain a mapping from planet -> THREE object representing the planet\n    // This will allow us to update the existing THREE object on each iteration\n    // of the render loop.\n    solarSystem.bodies.forEach(function (body) {\n\n      _this.bodyMap.set(body.name, {});\n\n      var threeBody = new THREE.Mesh(new THREE.SphereGeometry(body.constants.radius, 32, 32), new THREE.MeshBasicMaterial({\n        color: PLANET_COLOURS[body.name] || 'white'\n      }));\n\n      var periapsis = new THREE.Mesh(new THREE.SphereGeometry(0.01, 32, 32), new THREE.MeshBasicMaterial({\n        color: 'purple'\n      }));\n\n      var apoapsis = new THREE.Mesh(new THREE.SphereGeometry(0.01, 32, 32), new THREE.MeshBasicMaterial({\n        color: 'aqua'\n      }));\n\n      _this.scene.add(threeBody);\n      //this.scene.add(periapsis);\n      //this.scene.add(apoapsis);\n\n      if (body.name !== 'sun') {\n\n        var trajectory = new THREE.Line(_this._createTrajectoryGeometry(), new THREE.LineBasicMaterial({\n          color: PLANET_COLOURS[body.name] || 'white'\n        }));\n\n        _this.scene.add(trajectory);\n        _this.bodyMap.get(body.name).trajectory = trajectory;\n        _this.bodyMap.get(body.name).trajectoryVertices = Array.from(trajectory.geometry.attributes.position.array);\n        _this.bodyMap.get(body.name).trajectoryVerticesDirty = [];\n      }\n\n      Object.assign(_this.bodyMap.get(body.name), {\n        body: threeBody,\n        periapsis: periapsis,\n        apoapsis: apoapsis\n      });\n    });\n\n    return Promise.resolve();\n  });\n};\n\nOrbitalMapRenderer.prototype.render = function (solarSystem) {\n  var _this2 = this;\n\n  // Find the current user focus\n  var focus = solarSystem.find(this.state.focus);\n\n  // Locate primary body, sun\n  var sun = solarSystem.find('sun');\n\n  solarSystem.bodies.forEach(function (body) {\n\n    var bodyMap = _this2.bodyMap.get(body.name);\n    var threeBody = bodyMap.body;\n    var threePeriapsis = bodyMap.periapsis;\n    var threeApoapsis = bodyMap.apoapsis;\n    var derived = body.derived;\n\n    // Adjust position to re-center the coordinate system on the focus\n    var position = _this2._adjustCoordinates(focus, derived.position);\n    // let apoapsis = this._adjustCoordinates(focus, derived.apoapsis);\n    // let periapsis = this._adjustCoordinates(focus, derived.periapsis);\n\n    threeBody.position.set(position.x, position.y, position.z);\n\n    if (SHOW_VELOCITY_VECTORS) {\n      bodyMap.arrowHelper && _this2.scene.remove(bodyMap.arrowHelper);\n      var arrowHelper = new THREE.ArrowHelper(derived.velocity.clone().normalize(), position, 1, 0xffff00);\n      _this2.scene.add(arrowHelper);\n      bodyMap.arrowHelper = arrowHelper;\n    }\n\n    // threePeriapsis.position.set(periapsis.x, periapsis.y, periapsis.z);\n    // threeApoapsis.position.set(apoapsis.x, apoapsis.y, apoapsis.z);\n\n    _this2._updateTrajectory(focus, body);\n    _this2._scaleBody(body);\n  });\n\n  this.renderer.render(this.scene, this.camera);\n};\n\n/**\n * Recenter the coordinate system on the focus being the 'center'.\n */\nOrbitalMapRenderer.prototype._adjustCoordinates = function (focus, position) {\n\n  if (!focus) return position.clone();\n\n  var coordinates = position.clone().sub(focus.derived.position).multiplyScalar(TRAJECTORY_SCALE);\n\n  return coordinates;\n};\n\nOrbitalMapRenderer.prototype._scaleBody = function (body) {\n\n  var bodyMap = this.bodyMap.get(body.name);\n  var threeBody = bodyMap.body;\n  var trajectory = bodyMap.trajectory;\n  var cameraDistance = this.camera.position.distanceTo(threeBody.position);\n\n  var scale = Math.max(0.005 * cameraDistance, body.constants.radius) / body.constants.radius;\n  threeBody.scale.set(scale, scale, scale);\n\n  // Allow more 'space' between large bodies and their satellites\n  trajectory && trajectory.scale.set(trajectory.scale.x * TRAJECTORY_SCALE, trajectory.scale.y * TRAJECTORY_SCALE, 1);\n};\n\nOrbitalMapRenderer.prototype._updateTrajectory = function (focus, body) {\n\n  if (body.name === 'sun') return;\n\n  // Redraw the trajectory for this body\n  var bodyMap = this.bodyMap.get(body.name);\n  var trajectory = bodyMap.trajectory;\n  var trajectoryVertices = bodyMap.trajectoryVertices;\n  var trajectoryVerticesDirty = bodyMap.trajectoryVerticesDirty;\n\n  var derived = body.derived;\n  var position_in_plane = body.derived.position_in_plane;\n  var center_in_plane = body.derived.center_in_plane;\n  var semiMajorAxis = derived.semiMajorAxis;\n  var semiMinorAxis = derived.semiMinorAxis;\n  var center = this._adjustCoordinates(focus, derived.center);\n\n  var scaledPosition = new THREE.Vector3().copy(position_in_plane).sub(center_in_plane);\n  scaledPosition.multiply(new THREE.Vector3(1 / semiMajorAxis, 1 / semiMinorAxis, 1));\n\n  // Workaround for natural limitations of drawing arcs using straight line segments;\n  // you inherently cannot track a planet moving in an ellipse between the planet\n  // will always be between two vertices.  This code attempts to manually 'insert'\n  // a vertex that corresponds to the planets location.\n  // This fixes the issue where the trajectory would wobble in and out of the planet\n\n  var geometry = trajectory.geometry;\n  var positions = geometry.attributes.position.array;\n  var range = positions.length / 3;\n  var verticesToChange = 1;\n  var verticesToTest = [];\n\n  for (var i = 0; i < range; i++) {\n    var offset = i * 3;\n    verticesToTest.push(new THREE.Vector3(trajectoryVertices[offset], trajectoryVertices[offset + 1], trajectoryVertices[offset + 2]));\n  };\n\n  // Find the vertex that is closest to the planets position\n  var sorted = verticesToTest.map(function (vertex, idx) {\n    return [vertex.distanceTo(scaledPosition), vertex, idx];\n  }).sort(function (left, right) {\n    return left[0] - right[0];\n  });\n\n  trajectoryVerticesDirty.forEach(function (idx) {\n    var offset = idx * 3;\n    positions[offset] = trajectoryVertices[offset];\n    positions[offset + 1] = trajectoryVertices[offset + 1];\n    positions[offset + 2] = trajectoryVertices[offset + 2];\n  });\n  var updatedDirtyVertices = [];\n\n  // Overwrite the closest vertices with the planets actual position.  This will\n  // ensure that a vertex for our trajectory is always located at the planets\n  // location.\n  sorted.slice(0, verticesToChange).forEach(function (element) {\n    var vertex = element[1];\n    var offset = element[2] * 3;\n    positions[offset] = scaledPosition.x;\n    positions[offset + 1] = scaledPosition.y;\n    positions[offset + 2] = scaledPosition.z;\n\n    updatedDirtyVertices.push(element[2]);\n  });\n\n  // Set new value of dirty vertices;\n  bodyMap.trajectoryVerticesDirty = updatedDirtyVertices;\n\n  // Signal that this geometry needs a redraw\n  geometry.attributes.position.needsUpdate = true;\n\n  // Finally, apply scale/rotation/translation to the trajectory to place it\n  // into the correct orbit\n  trajectory.scale.set(1, 1, 1);\n  trajectory.rotation.set(0, 0, 0);\n  trajectory.position.set(0, 0, 0);\n\n  // Now adjust the trajectory to its actual orientation\n  trajectory.translateX(center.x);\n  trajectory.translateY(center.y);\n  trajectory.translateZ(center.z);\n  trajectory.rotateZ(derived.omega);\n  trajectory.rotateX(derived.I);\n  trajectory.rotateZ(derived.argumentPerihelion);\n  trajectory.scale.set(semiMajorAxis, semiMinorAxis, 1);\n};\n\nOrbitalMapRenderer.prototype._createTrajectoryGeometry = function () {\n\n  var NUM_POINTS = 256;\n\n  // Create the trajectory using a strandard ellipse curve that will\n  // eventually scale/rotate/translate into the correct orbit path during\n  // the render loop.\n  var pointsGeometry = new THREE.Path(new THREE.EllipseCurve(0, 0, // ax, aY\n  1, 1, // xRadius, yRadius\n  0, 2 * Math.PI, // aStartAngle, aEndAngle\n  false, // aClockwise\n  0 // aRotation\n  ).getPoints(NUM_POINTS)).createPointsGeometry(NUM_POINTS);\n  var bufferGeometry = new THREE.BufferGeometry();\n  var vertices = [];\n  for (var i = 0; i < pointsGeometry.vertices.length; i++) {\n    vertices.push(pointsGeometry.vertices[i].x, pointsGeometry.vertices[i].y, pointsGeometry.vertices[i].z);\n  }\n\n  bufferGeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\n\n  return bufferGeometry;\n};\n\nObject.assign(OrbitalMapRenderer.prototype, _BaseRenderer2.default.prototype);\n\nexports.default = OrbitalMapRenderer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _moment = __webpack_require__(0);\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _three = __webpack_require__(1);\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _Bodies = __webpack_require__(2);\n\nvar _StringExtensions = __webpack_require__(122);\n\nvar _StringExtensions2 = _interopRequireDefault(_StringExtensions);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar numToRun = 10000;\n\nfunction Simulation(solarSystem, renderers, state, stats) {\n  var _this = this;\n\n  this.solarSystem = solarSystem;\n  this.renderers = renderers;\n  this.rendererIdx = 0;\n  this.renderer = renderers[this.rendererIdx];\n  this.loaded = new Set();\n  this.state = state;\n  this.stats = stats;\n  this.isStopped = true;\n  this.time = Date.now();\n  this.startingTime = this.time;\n  this.timeWarpValues = [1, 5, 10, 50, 100, 10e2, 10e3, 10e4, 10e5, 10e6];\n  this.timeWarpIdx = 0;\n\n  this.timeCounter = document.getElementById('time');\n  this.warpValues = document.getElementById('warp-values');\n  this.timeWarpValues.forEach(function (value, idx) {\n    var arrow = document.createElement('div');\n    _this.warpValues.appendChild(arrow);\n  });\n\n  /**\n   * Handle window event listeners\n   */\n  var keypresses = function keypresses(event) {\n    var keyCodes = {\n      32: _this.toggleRun,\n      44: _this.slowDown,\n      46: _this.speedUp,\n      99: _this.recenter,\n      91: _this.toggleFocus,\n      93: _this.toggleFocus,\n      122: _this.toggleView\n    };\n\n    if (event.type === \"keypress\" && keyCodes.hasOwnProperty(event.keyCode)) {\n      keyCodes[event.keyCode].call(_this, event);\n      event.preventDefault();\n    }\n  };\n\n  window.addEventListener(\"keypress\", keypresses, false);\n  window.addEventListener(\"resize\", function (event) {\n    _this.renderer.dispatchEvent({\n      type: \"resize\"\n    });\n  }, true);\n\n  window.addEventListener(\"mousedown\", function (event) {\n    var width = window.innerWidth;\n    var height = window.innerHeight;\n    var pixelMultiplier = window.devicePixelRatio;\n\n    var target = new THREE.Vector2((event.clientX - width / 2) * pixelMultiplier, (height / 2 - event.clientY) * pixelMultiplier);\n\n    _this.renderer.dispatchEvent({\n      type: 'click',\n      location: target\n    });\n  }, true);\n};\n\nSimulation.prototype.speedUp = function () {\n  if (!this.isRunning()) {\n    return;\n  }\n\n  this.timeWarpIdx = Math.min(this.timeWarpValues.length - 1, this.timeWarpIdx + 1);\n};\n\nSimulation.prototype.slowDown = function () {\n  if (!this.isRunning()) {\n    return;\n  }\n\n  this.timeWarpIdx = Math.max(0, this.timeWarpIdx - 1);\n};\n\nSimulation.prototype.pause = function () {\n  this.isStopped = true;\n};\n\nSimulation.prototype.isRunning = function () {\n  return !this.isStopped;\n};\n\nSimulation.prototype.toggleRun = function () {\n  if (this.isRunning()) {\n    this.pause();\n  } else {\n    this.run();\n  }\n};\n\nSimulation.prototype.recenter = function () {\n  if (!this.isRunning()) {\n    return;\n  }\n\n  this.renderer.dispatchEvent({\n    type: 'recenter'\n  });\n};\n\nSimulation.prototype.toggleFocus = function (event) {\n  var _this2 = this;\n\n  var solarSystem = this.solarSystem;\n  var focusIdx = solarSystem.bodies.findIndex(function (p) {\n    return p.name === _this2.state.focus;\n  });\n\n  if (event.keyCode === 91) {\n    focusIdx--;\n    if (focusIdx < 0) focusIdx = solarSystem.bodies.length - 1;\n  } else {\n    focusIdx = (focusIdx + 1) % solarSystem.bodies.length;\n  }\n\n  this.state.focus = solarSystem.bodies[focusIdx].name;\n  this.renderer.dispatchEvent({\n    type: 'focus',\n    focus: this.state.focus\n  });\n};\n\nSimulation.prototype.initialize = function () {\n  var _this3 = this;\n\n  // Ensure the solar system is fully 'seeded' before we attempt to render\n  this.solarSystem.update(this.time, 0);\n\n  this.renderers.forEach(function (renderer) {\n    renderer.container.style = 'display: none;';\n  });\n\n  // Bring up the appropriate view and hide the others\n  console.log('Loading ' + this.renderer.constructor.name);\n  return this.renderer.viewDidLoad(this.solarSystem).then(function () {\n    // Once the views are loaded, we can be prepare to surface this view\n    _this3.renderer.viewWillAppear();\n    _this3.renderer.container.style = '';\n    _this3.loaded.add(_this3.renderer);\n    return Promise.resolve();\n  });\n};\n\nSimulation.prototype.toggleView = function () {\n  var _this4 = this;\n\n  this.rendererIdx = (this.rendererIdx + 1) % this.renderers.length;\n  var oldRenderer = this.renderer;\n\n  oldRenderer.viewWillDisappear();\n  oldRenderer.container.style = 'display: none;';\n\n  var newRenderer = this.renderers[this.rendererIdx];\n\n  var promise = void 0;\n  if (!this.loaded.has(newRenderer)) {\n    console.log('Loading ' + newRenderer.constructor.name);\n    promise = newRenderer.viewDidLoad(this.solarSystem).then(function () {\n      _this4.loaded.add(newRenderer);\n      return Promise.resolve();\n    });\n  } else {\n    promise = Promise.resolve();\n  }\n\n  promise.then(function () {\n    newRenderer.viewWillAppear();\n    newRenderer.container.style = '';\n    _this4.renderer = newRenderer;\n  });\n};\n\nSimulation.prototype.run = function () {\n\n  if (this.isRunning()) {\n    return;\n  }\n\n  this.isStopped = false;\n  var numTimes = 0;\n  var accumulator = 0.0;\n  var dt = 10; // ms\n\n  runAnimation(function (frameTime) {\n\n    if (this.isStopped) {\n      return false;\n    }\n\n    this.stats.begin();\n\n    accumulator += frameTime;\n\n    while (accumulator >= dt) {\n      var t = this.time;\n      var scaledDt = this.timeWarpValues[this.timeWarpIdx] * dt;\n\n      // Update physics\n      this.solarSystem.update(t, scaledDt);\n\n      accumulator -= dt;\n      this.time += scaledDt;\n    }\n\n    this.renderer.render(this.solarSystem);\n\n    this.updateOrbitalDisplay();\n    this.updateTimeDisplay();\n    this.stats.end();\n\n    numTimes++;\n    if (numTimes >= numToRun) {\n      console.log('All done!');\n      this.isStopped = true;\n      return false;\n    }\n  }.bind(this));\n};\n\nSimulation.prototype.updateOrbitalDisplay = function () {\n\n  var focus = this.solarSystem.find(this.state.focus);\n  var name = focus.name;\n  var velocity = focus.derived.velocity.length() * _Bodies.AU;\n  var eccentricity = focus.derived.e || 0;\n  var semiMajorAxis = focus.derived.semiMajorAxis * _Bodies.AU;\n  var semiMinorAxis = focus.derived.semiMinorAxis * _Bodies.AU;\n  var rotation_period = focus.constants.rotation_period || 0;\n  var axial_tilt = focus.constants.axial_tilt || 0;\n  var orbital_period = (focus.derived.orbital_period || 0) / 86400;\n\n  document.getElementById('orbital-name').innerHTML = name.escapeHtml();\n  document.getElementById('orbital-primary').innerHTML = (focus.primary ? focus.primary.name : '').escapeHtml();\n  document.getElementById('orbital-speed').innerHTML = (velocity.toFixed(2) + ' m/s').escapeHtml();\n  document.getElementById('orbital-eccentricity').innerHTML = ('' + eccentricity.toFixed(4)).escapeHtml();\n  document.getElementById('orbital-semiMajorAxis').innerHTML = (semiMajorAxis.toExponential(4) + ' m').escapeHtml();\n  document.getElementById('orbital-semiMinorAxis').innerHTML = (semiMinorAxis.toExponential(4) + ' m').escapeHtml();\n  document.getElementById('orbital-period').innerHTML = (orbital_period.toFixed(4) + ' days').escapeHtml();\n  document.getElementById('orbital-rotation-period').innerHTML = (rotation_period.toFixed(4) + ' days').escapeHtml();\n  document.getElementById('orbital-axial-tilt').innerHTML = (axial_tilt.toFixed(2) + '\\xB0').escapeHtml();\n};\n\nSimulation.prototype.updateTimeDisplay = function () {\n  var _this5 = this;\n\n  var elapsed = _moment2.default.duration(this.time - this.startingTime);\n  var years = elapsed.years();\n  var months = elapsed.months();\n  var days = elapsed.days() + months * 30;\n  var hours = elapsed.hours();\n  var minutes = elapsed.minutes();\n  var seconds = elapsed.seconds();\n\n  var values = [];\n\n  if (years > 0) values.push(years + 'Y');\n\n  if (days > 0) values.push(days + 'd');\n\n  values.push(hours.toString().paddingLeft('00'), minutes.toString().paddingLeft('00'), seconds.toString().paddingLeft('00'));\n\n  Array.from(this.warpValues.children).forEach(function (value, idx) {\n    if (idx <= _this5.timeWarpIdx) {\n      value.className = 'warp-enabled';\n    } else {\n      value.className = 'warp-disabled';\n    }\n  });\n  this.timeCounter.innerHTML = ('+T ' + values.join(':')).escapeHtml();\n};\n\nfunction runAnimation(frameFunc) {\n  var lastTime = null;\n\n  function frame(time) {\n    var stop = false;\n    if (lastTime != null) {\n      var timeStep = time - lastTime;\n      stop = frameFunc(timeStep) === false;\n    }\n    lastTime = time;\n    if (!stop) requestAnimationFrame(frame);\n  }\n  requestAnimationFrame(frame);\n};\n\nexports.default = Simulation;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _moment = __webpack_require__(0);\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _Bodies = __webpack_require__(2);\n\nvar _three = __webpack_require__(1);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar J2000_date = (0, _moment2.default)('2000-01-01T12:00:00Z');\nvar J2000_epoch = 2451545.0;\n\nfunction SolarSystem() {\n  this.bodies = Array.from(_Bodies.ALL_BODIES);\n  this.initialized = false;\n};\n\nSolarSystem.prototype.find = function (bodyId) {\n  return this.bodies.find(function (body) {\n    return body.name == bodyId;\n  });\n};\n\nSolarSystem.prototype.update = function (t, dt) {\n  var _this = this;\n\n  var currentDate = (0, _moment2.default)(t + dt);\n  var T = this._calculateJulianDate(currentDate);\n\n  if (!this.initialized) {\n    /**\n     * Generate a starting position/velocity from the initial kepler\n     * elements\n     */\n    this.bodies.forEach(function (body) {\n      var kepler_elements = _this._calculateInitialKeplerElements(body, T);\n      body.derived = kepler_elements;\n    });\n\n    this.initialized = true;\n  }\n\n  this.bodies.forEach(function (body) {\n\n    var kepler_elements = _this._calculateKeplerElementsAtTime(body, t + dt);\n    var coords = _this._toCartesianCoordinates(body.primary, kepler_elements);\n    var position = coords.position;\n    var velocity = coords.velocity;\n\n    var body_constants = body.constants;\n    var primary = body.primary;\n    var derived = body.derived;\n    var u = body.primary ? primary.constants.u : 0;\n    var offset = body.primary ? primary.derived.position : new _three.Vector3(0, 0, 0);\n    var a = kepler_elements.a,\n        e = kepler_elements.e,\n        I = kepler_elements.I,\n        argumentPerihelion = kepler_elements.argumentPerihelion,\n        omega = kepler_elements.omega,\n        M = kepler_elements.M;\n\n    // Semi-minor axis\n\n    var b = a * Math.sqrt(1 - Math.pow(e, 2));\n\n    // Trajectory Elements\n    var periapsis = new _three.Vector3(a * (1 - e), 0, 0);\n    var apoapsis = new _three.Vector3(-a * (1 + e), 0, 0);\n    var center = new _three.Vector3(periapsis.x - a, 0, 0);\n\n    // Orbital Period and Rotational Period\n    var orbital_period = 2 * Math.PI * Math.sqrt(Math.pow(a, 3) / (u + (body_constants.u || 0)));\n\n    var rotation = (derived.rotation || 0) + 2 * Math.PI * dt / ((body_constants.rotation_period || 1) * 86400e3);\n\n    body.derived = {\n      T: T,\n      a: a,\n      e: e,\n      I: I,\n      omega: omega,\n      argumentPerihelion: argumentPerihelion,\n      M: M,\n      position: position,\n      position_in_plane: coords.position_in_plane,\n      velocity: velocity,\n      semiMajorAxis: a,\n      semiMinorAxis: b,\n      orbital_period: orbital_period,\n      rotation: rotation,\n      center_in_plane: center,\n      center: _this._transformToEcliptic(offset, center, argumentPerihelion, omega, I),\n      periapsis: _this._transformToEcliptic(offset, periapsis, argumentPerihelion, omega, I),\n      apoapsis: _this._transformToEcliptic(offset, apoapsis, argumentPerihelion, omega, I)\n    };\n  });\n\n  this.lastTime = t + dt;\n};\n\nSolarSystem.prototype._calculateInitialKeplerElements = function (body, T) {\n\n  // Planets are fixed on rails; we simply a\n  var kepler_elements = body.kepler_elements;\n  var a = kepler_elements.a[0] + kepler_elements.a[1] * T;\n  var e = kepler_elements.e[0] + kepler_elements.e[1] * T;\n  var I = kepler_elements.I[0] + kepler_elements.I[1] * T;\n  var L = kepler_elements.L[0] + kepler_elements.L[1] * T;\n  var w = kepler_elements.w[0] + kepler_elements.w[1] * T;\n  var omega = kepler_elements.omega[0] + kepler_elements.omega[1] * T;\n  var perturbations = kepler_elements.perturbations;\n  var M = this._calculateMeanAnomaly(L, w, perturbations, T);\n  var argumentPerihelion = w - omega;\n\n  return {\n    a: a,\n    e: e,\n    I: I * Math.PI / 180,\n    omega: omega * Math.PI / 180,\n    argumentPerihelion: argumentPerihelion * Math.PI / 180,\n    M: M * Math.PI / 180\n  };\n};\n\nSolarSystem.prototype._calculateKeplerElementsAtTime = function (body, t) {\n  var _body$derived = body.derived,\n      a = _body$derived.a,\n      e = _body$derived.e,\n      I = _body$derived.I,\n      omega = _body$derived.omega,\n      argumentPerihelion = _body$derived.argumentPerihelion,\n      M = _body$derived.M;\n\n  /**\n   * For elliptical orbits, M - M0 = n(t - t0)\n   */\n\n  var lastTime = this.lastTime || t;\n  var delta = (t - lastTime) / 1000;\n  var u = body.primary ? body.primary.constants.u : 0;\n  var n = Math.sqrt(u / Math.pow(a, 3));\n  M = n * delta + M;\n\n  return {\n    a: a,\n    e: e,\n    I: I,\n    omega: omega,\n    argumentPerihelion: argumentPerihelion,\n    M: M\n  };\n};\n\nSolarSystem.prototype._calculateKeplerElementsFromCartesian = function (body) {\n\n  var primary = body.primary;\n  var position = body.derived.position;\n  var velocity = body.derived.velocity;\n\n  var r = new _three.Vector3().subVectors(position, primary.derived.position);\n  var v = new _three.Vector3().subVectors(velocity, primary.derived.velocity);\n  var u = primary.constants.u;\n\n  var h = new _three.Vector3().crossVectors(r, v);\n\n  if (h.length() <= 0) {\n    console.error(\"angular momentum is zero!\");\n  }\n\n  // Semi-Major Axis\n  var specificEnergy = v.lengthSq() / 2 - u / r.length();\n  var a = -u / (2 * specificEnergy);\n\n  // Eccentricity\n  var e_sub = h.lengthSq() / (u * a);\n  var e = e_sub > 1 ? 0 : Math.sqrt(1 - e_sub);\n\n  // Inclination, Longitude of the ascending node\n  var I = Math.acos(h.z / h.length());\n  var omega = Math.atan2(h.x, -h.y);\n  if (Math.abs(omega) >= Math.PI) {\n    throw new Error('omega jumped');\n  }\n\n  var E = void 0,\n      w = void 0;\n  if (e === 0 && I === 0) {\n    // Circular Orbits with zero inclincation\n\n    var trueLongitude = Math.acos(r.x / r.length());\n    if (v.x > 0) {\n      trueLongitude = 2 * Math.PI - trueLongitude;\n    }\n  } else if (e === 0) {\n    // Circular orbits with a +/- inclincation\n    // True anomaly is undefined for a circular orbit because circular orbits\n    // do not have a uniquely-determined periapsis; Instead, the argument of\n    // latitude is used:\n    var argumentLatitude = Math.atan2(r.z / Math.sin(I), r.x * Math.cos(omega) + r.y * Math.sin(omega));\n    E = 2 * Math.atan(Math.tan(argumentLatitude / 2));\n    w = 0;\n  } else {\n    var v_eccentricity = new _three.Vector3().crossVectors(v, h).multiplyScalar(1 / u).sub(r.clone().multiplyScalar(1 / r.length()));\n\n    var trueAnomaly = Math.acos(v_eccentricity.dot(r) / (v_eccentricity.length() * r.length()));\n    if (r.dot(v) < 0) trueAnomaly = 2 * Math.PI - trueAnomaly;\n\n    var _argumentLatitude = Math.atan2(r.z / Math.sin(I), r.x * Math.cos(omega) + r.y * Math.sin(omega));\n    E = 2 * Math.atan(Math.sqrt((1 - e) / (1 + e)) * Math.tan(trueAnomaly / 2));\n    w = _argumentLatitude - trueAnomaly;\n  }\n\n  var M = E - e * Math.sin(E);\n  var L = M + w;\n\n  var calculated_kepler_elements = {\n    a: a,\n    e: e,\n    I: I * 180 / Math.PI,\n    w: w * 180 / Math.PI,\n    omega: omega * 180 / Math.PI,\n    M: M * 180 / Math.PI,\n    E: E * 180 / Math.PI\n  };\n\n  return calculated_kepler_elements;\n};\n\nSolarSystem.prototype._toCartesianCoordinates = function (primary, kepler_elements) {\n  var a = kepler_elements.a,\n      e = kepler_elements.e,\n      I = kepler_elements.I,\n      argumentPerihelion = kepler_elements.argumentPerihelion,\n      omega = kepler_elements.omega,\n      M = kepler_elements.M;\n\n\n  var u = primary ? primary.constants.u : 0;\n  var offset = primary ? primary.derived.position : new _three.Vector3(0, 0, 0);\n  var E = this._calculateEccentricAnomaly(e, M * 180 / Math.PI) * Math.PI / 180;\n\n  var trueAnomaly = 2 * Math.atan2(Math.sqrt(1 + e) * Math.sin(E / 2), Math.sqrt(1 - e) * Math.cos(E / 2));\n\n  // Calculate heliocentric coordinates in the planets orbital plane\n  var helioCentricPosition = new _three.Vector3(a * (Math.cos(E) - e), a * Math.sqrt(1 - Math.pow(e, 2)) * Math.sin(E), 0);\n\n  // Convert to the ecliptic plane\n  var eclipticPosition = this._transformToEcliptic(offset, helioCentricPosition, argumentPerihelion, omega, I);\n\n  // Calculate the velocity in the planets orbital planet\n  var helioCentricVelocity = new _three.Vector3(-Math.sin(trueAnomaly), e + Math.cos(trueAnomaly), 0).multiplyScalar(Math.sqrt(u / Math.pow(a, 3)) * a / Math.sqrt(1 - Math.pow(e, 2)));\n\n  // Convert to the ecliptic plane\n  var eclipticVelocity = this._transformToEcliptic(new _three.Vector3(0, 0, 0), helioCentricVelocity, argumentPerihelion, omega, I);\n\n  return {\n    meanAnomaly: M,\n    eccentricAnomaly: E,\n    trueAnomaly: trueAnomaly,\n    position: eclipticPosition,\n    position_in_plane: helioCentricPosition,\n    velocity: eclipticVelocity,\n    velocity_in_plane: helioCentricVelocity\n  };\n};\n\nSolarSystem.prototype._calculateJulianDate = function (date) {\n  var Teph = J2000_epoch + date.diff(J2000_date, 'days', true);\n  var T = (Teph - J2000_epoch) / 36525;\n  return T;\n};\n\nSolarSystem.prototype._calculateMeanAnomaly = function (L, w, perturbations, T) {\n\n  var M = L - w;\n  if (perturbations) {\n    M += perturbations.b * Math.pow(T, 2) + perturbations.c * Math.cos(perturbations.f * T) + perturbations.s * Math.sin(perturbations.f * T);\n  }\n\n  M = M % 360;\n  if (M > 180) {\n    M = M - 360;\n  } else if (M < -180) {\n    M = 360 + M;\n  }\n\n  return M;\n};\n\nSolarSystem.prototype._calculateEccentricAnomaly = function (e, M) {\n  // Calculate eccentric anomaly, E\n  // e_star = degrees\n  // e = radians\n  var tol = 10e-6;\n  var e_star = 57.29578 * e;\n  var E = M + e_star * Math.sin(Math.PI / 180 * M);\n  var deltaE = void 0,\n      deltaM = void 0;\n  var numTimes = 0;\n  do {\n    deltaM = M - (E - e_star * Math.sin(Math.PI / 180 * E));\n    deltaE = deltaM / (1 - e * Math.cos(Math.PI / 180 * E));\n    E = E + deltaE;\n    numTimes++;\n  } while (Math.abs(deltaE) > tol && numTimes <= 10);\n\n  if (numTimes === 10) {\n    console.log(\"Didn't iterate on a solution!\");\n  }\n\n  return E;\n};\n\nSolarSystem.prototype._transformToEcliptic = function (offset, position, w, omega, I) {\n\n  var Q1 = new _three.Quaternion().setFromAxisAngle(new _three.Vector3(0, 0, 1), w);\n  var Q2 = new _three.Quaternion().setFromAxisAngle(new _three.Vector3(1, 0, 0), I);\n  var Q3 = new _three.Quaternion().setFromAxisAngle(new _three.Vector3(0, 0, 1), omega);\n\n  var rotation = new _three.Vector3().copy(position).applyQuaternion(Q1).applyQuaternion(Q2).applyQuaternion(Q3);\n\n  return rotation.add(offset);\n};\n\nexports.default = SolarSystem;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _three = __webpack_require__(1);\n\nvar THREE = _interopRequireWildcard(_three);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar OrbitControls = __webpack_require__(4)(THREE);\n\nvar POINTS = 8;\n\nfunction TestingRenderer(container) {\n\n  this.width = window.innerWidth;\n  this.height = window.innerHeight;\n  this.renderer = new THREE.WebGLRenderer();\n  this.renderer.setSize(this.width, this.height);\n\n  this.container = container;\n  container.appendChild(this.renderer.domElement);\n\n  this.scene = new THREE.Scene();\n};\n\nTestingRenderer.prototype.recenter = function () {};\n\nTestingRenderer.prototype.viewDidLoad = function (solarSystem) {\n\n  // initialize camera and scene\n  this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 0.01, 1000);\n  this.camera.position.z = 50;\n  this.scene.background = new THREE.Color('gray');\n\n  this.threeBody = new THREE.Mesh(new THREE.SphereGeometry(0.5, 32, 32), new THREE.MeshBasicMaterial({\n    color: 'black'\n  }));\n\n  var curve = new THREE.EllipseCurve(0, 0, // ax, aY\n  1, 1, // xRadius, yRadius\n  0, 2 * Math.PI, // aStartAngle, aEndAngle\n  false, // aClockwise\n  0 // aRotation\n  );\n\n  var pointsGeometry = new THREE.Path(curve.getPoints(POINTS)).createPointsGeometry(POINTS);\n\n  //Create the final object to add to the scene\n  var bufferGeometry = new THREE.BufferGeometry();\n  var vertices = [];\n  for (var i = 0; i < pointsGeometry.vertices.length; i++) {\n    vertices.push(pointsGeometry.vertices[i].x, pointsGeometry.vertices[i].y, pointsGeometry.vertices[i].z);\n  }\n\n  this.originalVertices = Array.from(vertices);\n  bufferGeometry.addAttribute('position', new THREE.BufferAttribute(new Float32Array(vertices), 3));\n\n  var ellipse = new THREE.Line(bufferGeometry, new THREE.LineBasicMaterial({\n    color: 0xff0000\n  }));\n\n  //\n  // const ellipse = new THREE.Line(new THREE.RingGeometry(1, 1, 8),\n  //   new THREE.LineBasicMaterial({\n  //     color: 'red'\n  //   }));\n\n  this.ellipse = ellipse;\n  this.ellipse.scale.set(10, 5, 1);\n  // this.ellipse.matrix.setPosition(new THREE.Vector3(0, 0, 0));\n  // this.ellipse.matrix.scale(new THREE.Vector3(10, 5, 1));\n  // this.ellipse.matrixAutoUpdate = false;\n\n  this.angle = 0;\n\n  this.scene.add(this.threeBody);\n  this.scene.add(this.ellipse);\n  this.renderer.render(this.scene, this.camera);\n  this.orbitControls = new OrbitControls(this.camera, this.scene.domElement);\n\n  return Promise.resolve();\n};\n\nTestingRenderer.prototype.viewWillAppear = function () {};\nTestingRenderer.prototype.viewWillDisappear = function () {};\n\nTestingRenderer.prototype.render = function (solarSystem) {\n  var _this = this;\n\n  var threeBody = this.threeBody;\n  threeBody.position.set(10 * Math.cos(this.angle), 5 * Math.sin(this.angle), 0);\n\n  var scaledPosition = new THREE.Vector3().copy(threeBody.position).multiply(new THREE.Vector3(1 / 10, 1 / 5, 1));\n\n  // let newVertices = [];\n  // let angle = this.angle;\n  // for (let i = 0; i < 9; i++) {\n  //\n  //   let vertex = new THREE.Vector3(10 * Math.cos(angle), 5 * Math.sin(angle), 0);\n  //   newVertices.push(vertex);\n  //   angle += 2 * Math.PI / 8;\n  // }\n  //\n  //\n\n  var geometry = this.ellipse.geometry;\n  var positions = geometry.attributes.position.array;\n  var range = Math.floor(positions.length / 3 / 2);\n  var verticesToTest = [];\n\n  for (var i = 0; i < range; i++) {\n    var offset = (i * 2 + 1) * 3;\n    verticesToTest.push(new THREE.Vector3(this.originalVertices[offset], this.originalVertices[offset + 1], this.originalVertices[offset + 2]));\n  };\n\n  var sorted = verticesToTest.map(function (vertex, idx) {\n    return [vertex.distanceTo(scaledPosition), vertex, idx];\n  }).sort(function (left, right) {\n    return left[0] - right[0];\n  });\n\n  sorted.forEach(function (element, idx) {\n    var vertex = element[1];\n    var offset = (element[2] * 2 + 1) * 3;\n    if (idx == 0) {\n      positions[offset] = scaledPosition.x;\n      positions[offset + 1] = scaledPosition.y;\n      positions[offset + 2] = scaledPosition.z;\n    } else {\n      positions[offset] = _this.originalVertices[offset];\n      positions[offset + 1] = _this.originalVertices[offset + 1];\n      positions[offset + 2] = _this.originalVertices[offset + 2];\n    }\n  });\n\n  geometry.attributes.position.needsUpdate = true;\n\n  //this.ellipse.updateMatrix();\n  //this.ellipse.geometry.setDrawRange(0, vertices.length)\n\n  // const angle = Math.atan2(threeBody.position.y, threeBody.position.x) - Math.atan2(closest.y, closest.x);\n  //this.ringBody.scale.set(10, 5, 1);\n  //this.ringBody.rotation.set(0, 0, 0);\n  //this.ringBody.rotateZ(angle);\n  this.angle += Math.PI / 256;\n  this.renderer.render(this.scene, this.camera);\n};\n\nexports.default = TestingRenderer;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9hcHAvVGVzdGluZ1JlbmRlcmVyLmpzP2QxNTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuY29uc3QgT3JiaXRDb250cm9scyA9IHJlcXVpcmUoJ3RocmVlLW9yYml0LWNvbnRyb2xzJykoVEhSRUUpO1xuXG5jb25zdCBQT0lOVFMgPSA4O1xuXG5mdW5jdGlvbiBUZXN0aW5nUmVuZGVyZXIoY29udGFpbmVyKSB7XG5cbiAgdGhpcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICB0aGlzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgdGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKCk7XG4gIHRoaXMucmVuZGVyZXIuc2V0U2l6ZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cbiAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXG4gIHRoaXMuc2NlbmUgPSBuZXcgVEhSRUUuU2NlbmUoKTtcbn07XG5cblRlc3RpbmdSZW5kZXJlci5wcm90b3R5cGUucmVjZW50ZXIgPSBmdW5jdGlvbiAoKSB7fTtcblxuVGVzdGluZ1JlbmRlcmVyLnByb3RvdHlwZS52aWV3RGlkTG9hZCA9IGZ1bmN0aW9uIChzb2xhclN5c3RlbSkge1xuXG4gIC8vIGluaXRpYWxpemUgY2FtZXJhIGFuZCBzY2VuZVxuICB0aGlzLmNhbWVyYSA9IG5ldyBUSFJFRS5QZXJzcGVjdGl2ZUNhbWVyYSg0NSwgdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0LCAwLjAxLCAxMDAwKVxuICB0aGlzLmNhbWVyYS5wb3NpdGlvbi56ID0gNTA7XG4gIHRoaXMuc2NlbmUuYmFja2dyb3VuZCA9IG5ldyBUSFJFRS5Db2xvcignZ3JheScpO1xuXG4gIHRoaXMudGhyZWVCb2R5ID0gbmV3IFRIUkVFLk1lc2goXG4gICAgbmV3IFRIUkVFLlNwaGVyZUdlb21ldHJ5KDAuNSwgMzIsIDMyKSxcbiAgICBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgICAgY29sb3I6ICdibGFjaydcbiAgICB9KSk7XG5cbiAgY29uc3QgY3VydmUgPSBuZXcgVEhSRUUuRWxsaXBzZUN1cnZlKFxuICAgIDAsIDAsIC8vIGF4LCBhWVxuICAgIDEsIDEsIC8vIHhSYWRpdXMsIHlSYWRpdXNcbiAgICAwLCAyICogTWF0aC5QSSwgLy8gYVN0YXJ0QW5nbGUsIGFFbmRBbmdsZVxuICAgIGZhbHNlLCAvLyBhQ2xvY2t3aXNlXG4gICAgMCAvLyBhUm90YXRpb25cbiAgKTtcblxuICBjb25zdCBwb2ludHNHZW9tZXRyeSA9IG5ldyBUSFJFRS5QYXRoKGN1cnZlLmdldFBvaW50cyhQT0lOVFMpKVxuICAgIC5jcmVhdGVQb2ludHNHZW9tZXRyeShQT0lOVFMpO1xuXG4gIC8vQ3JlYXRlIHRoZSBmaW5hbCBvYmplY3QgdG8gYWRkIHRvIHRoZSBzY2VuZVxuICBjb25zdCBidWZmZXJHZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuICBjb25zdCB2ZXJ0aWNlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0dlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmVydGljZXMucHVzaChcbiAgICAgIHBvaW50c0dlb21ldHJ5LnZlcnRpY2VzW2ldLngsXG4gICAgICBwb2ludHNHZW9tZXRyeS52ZXJ0aWNlc1tpXS55LFxuICAgICAgcG9pbnRzR2VvbWV0cnkudmVydGljZXNbaV0uelxuICAgICk7XG4gIH1cblxuICB0aGlzLm9yaWdpbmFsVmVydGljZXMgPSBBcnJheS5mcm9tKHZlcnRpY2VzKTtcbiAgYnVmZmVyR2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUobmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlcyksIDMpKTtcblxuICBjb25zdCBlbGxpcHNlID0gbmV3IFRIUkVFLkxpbmUoXG4gICAgYnVmZmVyR2VvbWV0cnksXG4gICAgbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcbiAgICAgIGNvbG9yOiAweGZmMDAwMFxuICAgIH0pKTtcblxuICAvL1xuICAvLyBjb25zdCBlbGxpcHNlID0gbmV3IFRIUkVFLkxpbmUobmV3IFRIUkVFLlJpbmdHZW9tZXRyeSgxLCAxLCA4KSxcbiAgLy8gICBuZXcgVEhSRUUuTGluZUJhc2ljTWF0ZXJpYWwoe1xuICAvLyAgICAgY29sb3I6ICdyZWQnXG4gIC8vICAgfSkpO1xuXG4gIHRoaXMuZWxsaXBzZSA9IGVsbGlwc2U7XG4gIHRoaXMuZWxsaXBzZS5zY2FsZS5zZXQoMTAsIDUsIDEpO1xuICAvLyB0aGlzLmVsbGlwc2UubWF0cml4LnNldFBvc2l0aW9uKG5ldyBUSFJFRS5WZWN0b3IzKDAsIDAsIDApKTtcbiAgLy8gdGhpcy5lbGxpcHNlLm1hdHJpeC5zY2FsZShuZXcgVEhSRUUuVmVjdG9yMygxMCwgNSwgMSkpO1xuICAvLyB0aGlzLmVsbGlwc2UubWF0cml4QXV0b1VwZGF0ZSA9IGZhbHNlO1xuXG4gIHRoaXMuYW5nbGUgPSAwO1xuXG4gIHRoaXMuc2NlbmUuYWRkKHRoaXMudGhyZWVCb2R5KTtcbiAgdGhpcy5zY2VuZS5hZGQodGhpcy5lbGxpcHNlKTtcbiAgdGhpcy5yZW5kZXJlci5yZW5kZXIodGhpcy5zY2VuZSwgdGhpcy5jYW1lcmEpO1xuICB0aGlzLm9yYml0Q29udHJvbHMgPSBuZXcgT3JiaXRDb250cm9scyh0aGlzLmNhbWVyYSwgdGhpcy5zY2VuZS5kb21FbGVtZW50KTtcblxuICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG5UZXN0aW5nUmVuZGVyZXIucHJvdG90eXBlLnZpZXdXaWxsQXBwZWFyID0gZnVuY3Rpb24gKCkge307XG5UZXN0aW5nUmVuZGVyZXIucHJvdG90eXBlLnZpZXdXaWxsRGlzYXBwZWFyID0gZnVuY3Rpb24gKCkge307XG5cblRlc3RpbmdSZW5kZXJlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHNvbGFyU3lzdGVtKSB7XG5cbiAgbGV0IHRocmVlQm9keSA9IHRoaXMudGhyZWVCb2R5O1xuICB0aHJlZUJvZHkucG9zaXRpb24uc2V0KDEwICogTWF0aC5jb3ModGhpcy5hbmdsZSksIDUgKiBNYXRoLnNpbih0aGlzLmFuZ2xlKSwgMCk7XG5cbiAgbGV0IHNjYWxlZFBvc2l0aW9uID0gbmV3IFRIUkVFLlZlY3RvcjMoKVxuICAgIC5jb3B5KHRocmVlQm9keS5wb3NpdGlvbilcbiAgICAubXVsdGlwbHkobmV3IFRIUkVFLlZlY3RvcjMoMSAvIDEwLCAxIC8gNSwgMSkpO1xuXG4gIC8vIGxldCBuZXdWZXJ0aWNlcyA9IFtdO1xuICAvLyBsZXQgYW5nbGUgPSB0aGlzLmFuZ2xlO1xuICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAvL1xuICAvLyAgIGxldCB2ZXJ0ZXggPSBuZXcgVEhSRUUuVmVjdG9yMygxMCAqIE1hdGguY29zKGFuZ2xlKSwgNSAqIE1hdGguc2luKGFuZ2xlKSwgMCk7XG4gIC8vICAgbmV3VmVydGljZXMucHVzaCh2ZXJ0ZXgpO1xuICAvLyAgIGFuZ2xlICs9IDIgKiBNYXRoLlBJIC8gODtcbiAgLy8gfVxuICAvL1xuICAvL1xuXG4gIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5lbGxpcHNlLmdlb21ldHJ5O1xuICBjb25zdCBwb3NpdGlvbnMgPSBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuICBjb25zdCByYW5nZSA9IE1hdGguZmxvb3IocG9zaXRpb25zLmxlbmd0aCAvIDMgLyAyKTtcbiAgY29uc3QgdmVydGljZXNUb1Rlc3QgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlOyBpKyspIHtcbiAgICBjb25zdCBvZmZzZXQgPSAoaSAqIDIgKyAxKSAqIDM7XG4gICAgdmVydGljZXNUb1Rlc3QucHVzaChuZXcgVEhSRUUuVmVjdG9yMyh0aGlzLm9yaWdpbmFsVmVydGljZXNbb2Zmc2V0XSxcbiAgICAgIHRoaXMub3JpZ2luYWxWZXJ0aWNlc1tvZmZzZXQgKyAxXSwgdGhpcy5vcmlnaW5hbFZlcnRpY2VzW29mZnNldCArIDJdKSk7XG4gIH07XG5cbiAgY29uc3Qgc29ydGVkID0gdmVydGljZXNUb1Rlc3QubWFwKCh2ZXJ0ZXgsIGlkeCkgPT4gW3ZlcnRleC5kaXN0YW5jZVRvKHNjYWxlZFBvc2l0aW9uKSwgdmVydGV4LCBpZHhdKVxuICAgIC5zb3J0KChsZWZ0LCByaWdodCkgPT4ge1xuICAgICAgcmV0dXJuIGxlZnRbMF0gLSByaWdodFswXTtcbiAgICB9KTtcblxuICBzb3J0ZWQuZm9yRWFjaCgoZWxlbWVudCwgaWR4KSA9PiB7XG4gICAgbGV0IHZlcnRleCA9IGVsZW1lbnRbMV07XG4gICAgbGV0IG9mZnNldCA9IChlbGVtZW50WzJdICogMiArIDEpICogMztcbiAgICBpZiAoaWR4ID09IDApIHtcbiAgICAgIHBvc2l0aW9uc1tvZmZzZXRdID0gc2NhbGVkUG9zaXRpb24ueDtcbiAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAxXSA9IHNjYWxlZFBvc2l0aW9uLnlcbiAgICAgIHBvc2l0aW9uc1tvZmZzZXQgKyAyXSA9IHNjYWxlZFBvc2l0aW9uLno7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvc2l0aW9uc1tvZmZzZXRdID0gdGhpcy5vcmlnaW5hbFZlcnRpY2VzW29mZnNldF07XG4gICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMV0gPSB0aGlzLm9yaWdpbmFsVmVydGljZXNbb2Zmc2V0ICsgMV07XG4gICAgICBwb3NpdGlvbnNbb2Zmc2V0ICsgMl0gPSB0aGlzLm9yaWdpbmFsVmVydGljZXNbb2Zmc2V0ICsgMl07XG4gICAgfVxuICB9KTtcblxuICBnZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblxuICAvL3RoaXMuZWxsaXBzZS51cGRhdGVNYXRyaXgoKTtcbiAgLy90aGlzLmVsbGlwc2UuZ2VvbWV0cnkuc2V0RHJhd1JhbmdlKDAsIHZlcnRpY2VzLmxlbmd0aClcblxuICAvLyBjb25zdCBhbmdsZSA9IE1hdGguYXRhbjIodGhyZWVCb2R5LnBvc2l0aW9uLnksIHRocmVlQm9keS5wb3NpdGlvbi54KSAtIE1hdGguYXRhbjIoY2xvc2VzdC55LCBjbG9zZXN0LngpO1xuICAvL3RoaXMucmluZ0JvZHkuc2NhbGUuc2V0KDEwLCA1LCAxKTtcbiAgLy90aGlzLnJpbmdCb2R5LnJvdGF0aW9uLnNldCgwLCAwLCAwKTtcbiAgLy90aGlzLnJpbmdCb2R5LnJvdGF0ZVooYW5nbGUpO1xuICB0aGlzLmFuZ2xlICs9IE1hdGguUEkgLyAyNTY7XG4gIHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmUsIHRoaXMuY2FtZXJhKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRlc3RpbmdSZW5kZXJlcjtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYXBwL1Rlc3RpbmdSZW5kZXJlci5qcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQURBO0FBQ0E7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBREE7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQUNBO0FBT0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQURBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(123);\nif(typeof content === 'string') content = [[module.i, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(141)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!./../../node_modules/css-loader/index.js!./styles.css\", function() {\n\t\t\tvar newContent = require(\"!!./../../node_modules/css-loader/index.js!./styles.css\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9zdHlsZXMuY3NzPzQyYzkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3N0eWxlcy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zdHlsZXMuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jc3Mvc3R5bGVzLmNzc1xuLy8gbW9kdWxlIGlkID0gMTIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

eval("var THREE = __webpack_require__( 1 );\n\n/**\n* @author Tim Knip / http://www.floorplanner.com/ / tim at floorplanner.com\n* @author Tony Parisi / http://www.tonyparisi.com/\n*/\n\nvar ColladaLoader = function () {\n\n    var COLLADA = null;\n    var scene = null;\n    var visualScene;\n    var kinematicsModel;\n\n    var readyCallbackFunc = null;\n\n    var sources = {};\n    var images = {};\n    var animations = {};\n    var controllers = {};\n    var geometries = {};\n    var materials = {};\n    var effects = {};\n    var cameras = {};\n    var lights = {};\n\n    var animData;\n    var kinematics;\n    var visualScenes;\n    var kinematicsModels;\n    var baseUrl;\n    var morphs;\n    var skins;\n\n    var flip_uv = true;\n    var preferredShading = THREE.SmoothShading;\n\n    var options = {\n        // Force Geometry to always be centered at the local origin of the\n        // containing Mesh.\n        centerGeometry: false,\n\n        // Axis conversion is done for geometries, animations, and controllers.\n        // If we ever pull cameras or lights out of the COLLADA file, they'll\n        // need extra work.\n        convertUpAxis: false,\n\n        subdivideFaces: true,\n\n        upAxis: 'Y',\n\n        // For reflective or refractive materials we'll use this cubemap\n        defaultEnvMap: null\n\n    };\n\n    var colladaUnit = 1.0;\n    var colladaUp = 'Y';\n    var upConversion = null;\n\n    function load ( url, readyCallback, progressCallback, failCallback ) {\n\n        var length = 0;\n\n        if ( document.implementation && document.implementation.createDocument ) {\n\n            var request = new XMLHttpRequest();\n\n            request.onreadystatechange = function() {\n\n                if ( request.readyState === 4 ) {\n\n                    if ( request.status === 0 || request.status === 200 ) {\n\n                        if ( request.response ) {\n\n                            readyCallbackFunc = readyCallback;\n                            parse( request.response, undefined, url );\n\n                        } else {\n\n                            if ( failCallback ) {\n\n                                failCallback();\n\n                            } else {\n\n                                console.error( \"ColladaLoader: Empty or non-existing file (\" + url + \")\" );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( request.readyState === 3 ) {\n\n                    if ( progressCallback ) {\n\n                        if ( length === 0 ) {\n\n                            length = request.getResponseHeader( \"Content-Length\" );\n\n                        }\n\n                        progressCallback( { total: length, loaded: request.responseText.length } );\n\n                    }\n\n                }\n\n            };\n\n            request.open( \"GET\", url, true );\n            request.send( null );\n\n        } else {\n\n            alert( \"Don't know how to parse XML!\" );\n\n        }\n\n    }\n\n    function parse( text, callBack, url ) {\n\n        COLLADA = new DOMParser().parseFromString( text, 'text/xml' );\n        callBack = callBack || readyCallbackFunc;\n\n        if ( url !== undefined ) {\n\n            var parts = url.split( '/' );\n            parts.pop();\n            baseUrl = ( parts.length < 1 ? '.' : parts.join( '/' ) ) + '/';\n\n        }\n\n        parseAsset();\n        setUpConversion();\n        images = parseLib( \"library_images image\", _Image, \"image\" );\n        materials = parseLib( \"library_materials material\", Material, \"material\" );\n        effects = parseLib( \"library_effects effect\", Effect, \"effect\" );\n        geometries = parseLib( \"library_geometries geometry\", Geometry, \"geometry\" );\n        cameras = parseLib( \"library_cameras camera\", Camera, \"camera\" );\n        lights = parseLib( \"library_lights light\", Light, \"light\" );\n        controllers = parseLib( \"library_controllers controller\", Controller, \"controller\" );\n        animations = parseLib( \"library_animations animation\", Animation, \"animation\" );\n        visualScenes = parseLib( \"library_visual_scenes visual_scene\", VisualScene, \"visual_scene\" );\n        kinematicsModels = parseLib( \"library_kinematics_models kinematics_model\", KinematicsModel, \"kinematics_model\" );\n\n        morphs = [];\n        skins = [];\n\n        visualScene = parseScene();\n        scene = new THREE.Group();\n\n        for ( var i = 0; i < visualScene.nodes.length; i ++ ) {\n\n            scene.add( createSceneGraph( visualScene.nodes[ i ] ) );\n\n        }\n\n        // unit conversion\n        scene.scale.multiplyScalar( colladaUnit );\n\n        createAnimations();\n\n        kinematicsModel = parseKinematicsModel();\n        createKinematics();\n\n        var result = {\n\n            scene: scene,\n            morphs: morphs,\n            skins: skins,\n            animations: animData,\n            kinematics: kinematics,\n            dae: {\n                images: images,\n                materials: materials,\n                cameras: cameras,\n                lights: lights,\n                effects: effects,\n                geometries: geometries,\n                controllers: controllers,\n                animations: animations,\n                visualScenes: visualScenes,\n                visualScene: visualScene,\n                scene: visualScene,\n                kinematicsModels: kinematicsModels,\n                kinematicsModel: kinematicsModel\n            }\n\n        };\n\n        if ( callBack ) {\n\n            callBack( result );\n\n        }\n\n        return result;\n\n    }\n\n    function setPreferredShading ( shading ) {\n\n        preferredShading = shading;\n\n    }\n\n    function parseAsset () {\n\n        var elements = COLLADA.querySelectorAll('asset');\n\n        var element = elements[0];\n\n        if ( element && element.childNodes ) {\n\n            for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n                var child = element.childNodes[ i ];\n\n                switch ( child.nodeName ) {\n\n                    case 'unit':\n\n                        var meter = child.getAttribute( 'meter' );\n\n                        if ( meter ) {\n\n                            colladaUnit = parseFloat( meter );\n\n                        }\n\n                        break;\n\n                    case 'up_axis':\n\n                        colladaUp = child.textContent.charAt(0);\n                        break;\n\n                }\n\n            }\n\n        }\n\n    }\n\n    function parseLib ( q, classSpec, prefix ) {\n\n        var elements = COLLADA.querySelectorAll(q);\n\n        var lib = {};\n\n        var i = 0;\n\n        var elementsLength = elements.length;\n\n        for ( var j = 0; j < elementsLength; j ++ ) {\n\n            var element = elements[j];\n            var daeElement = ( new classSpec() ).parse( element );\n\n            if ( !daeElement.id || daeElement.id.length === 0 ) daeElement.id = prefix + ( i ++ );\n            lib[ daeElement.id ] = daeElement;\n\n        }\n\n        return lib;\n\n    }\n\n    function parseScene() {\n\n        var sceneElement = COLLADA.querySelectorAll('scene instance_visual_scene')[0];\n\n        if ( sceneElement ) {\n\n            var url = sceneElement.getAttribute( 'url' ).replace( /^#/, '' );\n            return visualScenes[ url.length > 0 ? url : 'visual_scene0' ];\n\n        } else {\n\n            return null;\n\n        }\n\n    }\n\n    function parseKinematicsModel() {\n\n        var kinematicsModelElement = COLLADA.querySelectorAll('instance_kinematics_model')[0];\n\n        if ( kinematicsModelElement ) {\n\n            var url = kinematicsModelElement.getAttribute( 'url' ).replace(/^#/, '');\n            return kinematicsModels[ url.length > 0 ? url : 'kinematics_model0' ];\n\n        } else {\n\n            return null;\n\n        }\n\n    }\n\n    function createAnimations() {\n\n        animData = [];\n\n        // fill in the keys\n        recurseHierarchy( scene );\n\n    }\n\n    function recurseHierarchy( node ) {\n\n        var n = visualScene.getChildById( node.colladaId, true ),\n            newData = null;\n\n        if ( n && n.keys ) {\n\n            newData = {\n                fps: 60,\n                hierarchy: [ {\n                    node: n,\n                    keys: n.keys,\n                    sids: n.sids\n                } ],\n                node: node,\n                name: 'animation_' + node.name,\n                length: 0\n            };\n\n            animData.push(newData);\n\n            for ( var i = 0, il = n.keys.length; i < il; i ++ ) {\n\n                newData.length = Math.max( newData.length, n.keys[i].time );\n\n            }\n\n        } else {\n\n            newData = {\n                hierarchy: [ {\n                    keys: [],\n                    sids: []\n                } ]\n            }\n\n        }\n\n        for ( var i = 0, il = node.children.length; i < il; i ++ ) {\n\n            var d = recurseHierarchy( node.children[i] );\n\n            for ( var j = 0, jl = d.hierarchy.length; j < jl; j ++ ) {\n\n                newData.hierarchy.push( {\n                    keys: [],\n                    sids: []\n                } );\n\n            }\n\n        }\n\n        return newData;\n\n    }\n\n    function calcAnimationBounds () {\n\n        var start = 1000000;\n        var end = -start;\n        var frames = 0;\n        var ID;\n        for ( var id in animations ) {\n\n            var animation = animations[ id ];\n            ID = ID || animation.id;\n            for ( var i = 0; i < animation.sampler.length; i ++ ) {\n\n                var sampler = animation.sampler[ i ];\n\n                sampler.create();\n\n                start = Math.min( start, sampler.startTime );\n                end = Math.max( end, sampler.endTime );\n                frames = Math.max( frames, sampler.input.length );\n\n            }\n\n        }\n\n        return { start:start, end:end, frames:frames,ID:ID };\n\n    }\n\n    function createMorph ( geometry, ctrl ) {\n\n        var morphCtrl = ctrl instanceof InstanceController ? controllers[ ctrl.url ] : ctrl;\n\n        if ( !morphCtrl || !morphCtrl.morph ) {\n\n            console.log(\"could not find morph controller!\");\n            return;\n\n        }\n\n        var morph = morphCtrl.morph;\n\n        for ( var i = 0; i < morph.targets.length; i ++ ) {\n\n            var target_id = morph.targets[ i ];\n            var daeGeometry = geometries[ target_id ];\n\n            if ( !daeGeometry.mesh ||\n                 !daeGeometry.mesh.primitives ||\n                 !daeGeometry.mesh.primitives.length ) {\n                 continue;\n            }\n\n            var target = daeGeometry.mesh.primitives[ 0 ].geometry;\n\n            if ( target.vertices.length === geometry.vertices.length ) {\n\n                geometry.morphTargets.push( { name: \"target_1\", vertices: target.vertices } );\n\n            }\n\n        }\n\n        geometry.morphTargets.push( { name: \"target_Z\", vertices: geometry.vertices } );\n\n    }\n\n    function createSkin ( geometry, ctrl, applyBindShape ) {\n\n        var skinCtrl = controllers[ ctrl.url ];\n\n        if ( !skinCtrl || !skinCtrl.skin ) {\n\n            console.log( \"could not find skin controller!\" );\n            return;\n\n        }\n\n        if ( !ctrl.skeleton || !ctrl.skeleton.length ) {\n\n            console.log( \"could not find the skeleton for the skin!\" );\n            return;\n\n        }\n\n        var skin = skinCtrl.skin;\n        var skeleton = visualScene.getChildById( ctrl.skeleton[ 0 ] );\n        var hierarchy = [];\n\n        applyBindShape = applyBindShape !== undefined ? applyBindShape : true;\n\n        var bones = [];\n        geometry.skinWeights = [];\n        geometry.skinIndices = [];\n\n        //createBones( geometry.bones, skin, hierarchy, skeleton, null, -1 );\n        //createWeights( skin, geometry.bones, geometry.skinIndices, geometry.skinWeights );\n\n        /*\n        geometry.animation = {\n            name: 'take_001',\n            fps: 30,\n            length: 2,\n            JIT: true,\n            hierarchy: hierarchy\n        };\n        */\n\n        if ( applyBindShape ) {\n\n            for ( var i = 0; i < geometry.vertices.length; i ++ ) {\n\n                geometry.vertices[ i ].applyMatrix4( skin.bindShapeMatrix );\n\n            }\n\n        }\n\n    }\n\n    function setupSkeleton ( node, bones, frame, parent ) {\n\n        node.world = node.world || new THREE.Matrix4();\n        node.localworld = node.localworld || new THREE.Matrix4();\n        node.world.copy( node.matrix );\n        node.localworld.copy( node.matrix );\n\n        if ( node.channels && node.channels.length ) {\n\n            var channel = node.channels[ 0 ];\n            var m = channel.sampler.output[ frame ];\n\n            if ( m instanceof THREE.Matrix4 ) {\n\n                node.world.copy( m );\n                node.localworld.copy(m);\n                if (frame === 0)\n                    node.matrix.copy(m);\n            }\n\n        }\n\n        if ( parent ) {\n\n            node.world.multiplyMatrices( parent, node.world );\n\n        }\n\n        bones.push( node );\n\n        for ( var i = 0; i < node.nodes.length; i ++ ) {\n\n            setupSkeleton( node.nodes[ i ], bones, frame, node.world );\n\n        }\n\n    }\n\n    function setupSkinningMatrices ( bones, skin ) {\n\n        // FIXME: this is dumb...\n\n        for ( var i = 0; i < bones.length; i ++ ) {\n\n            var bone = bones[ i ];\n            var found = -1;\n\n            if ( bone.type != 'JOINT' ) continue;\n\n            for ( var j = 0; j < skin.joints.length; j ++ ) {\n\n                if ( bone.sid === skin.joints[ j ] ) {\n\n                    found = j;\n                    break;\n\n                }\n\n            }\n\n            if ( found >= 0 ) {\n\n                var inv = skin.invBindMatrices[ found ];\n\n                bone.invBindMatrix = inv;\n                bone.skinningMatrix = new THREE.Matrix4();\n                bone.skinningMatrix.multiplyMatrices(bone.world, inv); // (IBMi * JMi)\n                bone.animatrix = new THREE.Matrix4();\n\n                bone.animatrix.copy(bone.localworld);\n                bone.weights = [];\n\n                for ( var j = 0; j < skin.weights.length; j ++ ) {\n\n                    for (var k = 0; k < skin.weights[ j ].length; k ++ ) {\n\n                        var w = skin.weights[ j ][ k ];\n\n                        if ( w.joint === found ) {\n\n                            bone.weights.push( w );\n\n                        }\n\n                    }\n\n                }\n\n            } else {\n\n                console.warn( \"ColladaLoader: Could not find joint '\" + bone.sid + \"'.\" );\n\n                bone.skinningMatrix = new THREE.Matrix4();\n                bone.weights = [];\n\n            }\n        }\n\n    }\n\n    //Walk the Collada tree and flatten the bones into a list, extract the position, quat and scale from the matrix\n    function flattenSkeleton(skeleton) {\n\n        var list = [];\n        var walk = function(parentid, node, list) {\n\n            var bone = {};\n            bone.name = node.sid;\n            bone.parent = parentid;\n            bone.matrix = node.matrix;\n            var data = [ new THREE.Vector3(),new THREE.Quaternion(),new THREE.Vector3() ];\n            bone.matrix.decompose(data[0], data[1], data[2]);\n\n            bone.pos = [ data[0].x,data[0].y,data[0].z ];\n\n            bone.scl = [ data[2].x,data[2].y,data[2].z ];\n            bone.rotq = [ data[1].x,data[1].y,data[1].z,data[1].w ];\n            list.push(bone);\n\n            for (var i in node.nodes) {\n\n                walk(node.sid, node.nodes[i], list);\n\n            }\n\n        };\n\n        walk(-1, skeleton, list);\n        return list;\n\n    }\n\n    //Move the vertices into the pose that is proper for the start of the animation\n    function skinToBindPose(geometry,skeleton,skinController) {\n\n        var bones = [];\n        setupSkeleton( skeleton, bones, -1 );\n        setupSkinningMatrices( bones, skinController.skin );\n        var v = new THREE.Vector3();\n        var skinned = [];\n\n        for (var i = 0; i < geometry.vertices.length; i ++) {\n\n            skinned.push(new THREE.Vector3());\n\n        }\n\n        for ( i = 0; i < bones.length; i ++ ) {\n\n            if ( bones[ i ].type != 'JOINT' ) continue;\n\n            for ( var j = 0; j < bones[ i ].weights.length; j ++ ) {\n\n                var w = bones[ i ].weights[ j ];\n                var vidx = w.index;\n                var weight = w.weight;\n\n                var o = geometry.vertices[vidx];\n                var s = skinned[vidx];\n\n                v.x = o.x;\n                v.y = o.y;\n                v.z = o.z;\n\n                v.applyMatrix4( bones[i].skinningMatrix );\n\n                s.x += (v.x * weight);\n                s.y += (v.y * weight);\n                s.z += (v.z * weight);\n            }\n\n        }\n\n        for (var i = 0; i < geometry.vertices.length; i ++) {\n\n            geometry.vertices[i] = skinned[i];\n\n        }\n\n    }\n\n    function applySkin ( geometry, instanceCtrl, frame ) {\n\n        var skinController = controllers[ instanceCtrl.url ];\n\n        frame = frame !== undefined ? frame : 40;\n\n        if ( !skinController || !skinController.skin ) {\n\n            console.log( 'ColladaLoader: Could not find skin controller.' );\n            return;\n\n        }\n\n        if ( !instanceCtrl.skeleton || !instanceCtrl.skeleton.length ) {\n\n            console.log( 'ColladaLoader: Could not find the skeleton for the skin. ' );\n            return;\n\n        }\n\n        var animationBounds = calcAnimationBounds();\n        var skeleton = visualScene.getChildById( instanceCtrl.skeleton[0], true ) || visualScene.getChildBySid( instanceCtrl.skeleton[0], true );\n\n        //flatten the skeleton into a list of bones\n        var bonelist = flattenSkeleton(skeleton);\n        var joints = skinController.skin.joints;\n\n        //sort that list so that the order reflects the order in the joint list\n        var sortedbones = [];\n        for (var i = 0; i < joints.length; i ++) {\n\n            for (var j = 0; j < bonelist.length; j ++) {\n\n                if (bonelist[j].name === joints[i]) {\n\n                    sortedbones[i] = bonelist[j];\n\n                }\n\n            }\n\n        }\n\n        //hook up the parents by index instead of name\n        for (var i = 0; i < sortedbones.length; i ++) {\n\n            for (var j = 0; j < sortedbones.length; j ++) {\n\n                if (sortedbones[i].parent === sortedbones[j].name) {\n\n                    sortedbones[i].parent = j;\n\n                }\n\n            }\n\n        }\n\n\n        var i, j, w, vidx, weight;\n        var v = new THREE.Vector3(), o, s;\n\n        // move vertices to bind shape\n        for ( i = 0; i < geometry.vertices.length; i ++ ) {\n            geometry.vertices[i].applyMatrix4( skinController.skin.bindShapeMatrix );\n        }\n\n        var skinIndices = [];\n        var skinWeights = [];\n        var weights = skinController.skin.weights;\n\n        // hook up the skin weights\n        // TODO - this might be a good place to choose greatest 4 weights\n        for ( var i =0; i < weights.length; i ++ ) {\n\n            var indicies = new THREE.Vector4(weights[i][0] ? weights[i][0].joint : 0,weights[i][1] ? weights[i][1].joint : 0,weights[i][2] ? weights[i][2].joint : 0,weights[i][3] ? weights[i][3].joint : 0);\n            var weight = new THREE.Vector4(weights[i][0] ? weights[i][0].weight : 0,weights[i][1] ? weights[i][1].weight : 0,weights[i][2] ? weights[i][2].weight : 0,weights[i][3] ? weights[i][3].weight : 0);\n\n            skinIndices.push(indicies);\n            skinWeights.push(weight);\n\n        }\n\n        geometry.skinIndices = skinIndices;\n        geometry.skinWeights = skinWeights;\n        geometry.bones = sortedbones;\n        // process animation, or simply pose the rig if no animation\n\n        //create an animation for the animated bones\n        //NOTE: this has no effect when using morphtargets\n        var animationdata = { \"name\":animationBounds.ID,\"fps\":30,\"length\":animationBounds.frames / 30,\"hierarchy\":[] };\n\n        for (var j = 0; j < sortedbones.length; j ++) {\n\n            animationdata.hierarchy.push({ parent:sortedbones[j].parent, name:sortedbones[j].name, keys:[] });\n\n        }\n\n        console.log( 'ColladaLoader:', animationBounds.ID + ' has ' + sortedbones.length + ' bones.' );\n\n\n\n        skinToBindPose(geometry, skeleton, skinController);\n\n\n        for ( frame = 0; frame < animationBounds.frames; frame ++ ) {\n\n            var bones = [];\n            var skinned = [];\n            // process the frame and setup the rig with a fresh\n            // transform, possibly from the bone's animation channel(s)\n\n            setupSkeleton( skeleton, bones, frame );\n            setupSkinningMatrices( bones, skinController.skin );\n\n            for (var i = 0; i < bones.length; i ++) {\n\n                for (var j = 0; j < animationdata.hierarchy.length; j ++) {\n\n                    if (animationdata.hierarchy[j].name === bones[i].sid) {\n\n                        var key = {};\n                        key.time = (frame / 30);\n                        key.matrix = bones[i].animatrix;\n\n                        if (frame === 0)\n                            bones[i].matrix = key.matrix;\n\n                        var data = [ new THREE.Vector3(),new THREE.Quaternion(),new THREE.Vector3() ];\n                        key.matrix.decompose(data[0], data[1], data[2]);\n\n                        key.pos = [ data[0].x,data[0].y,data[0].z ];\n\n                        key.scl = [ data[2].x,data[2].y,data[2].z ];\n                        key.rot = data[1];\n\n                        animationdata.hierarchy[j].keys.push(key);\n\n                    }\n\n                }\n\n            }\n\n            geometry.animation = animationdata;\n\n        }\n\n    }\n\n    function createKinematics() {\n\n        if ( kinematicsModel && kinematicsModel.joints.length === 0 ) {\n            kinematics = undefined;\n            return;\n        }\n\n        var jointMap = {};\n\n        var _addToMap = function( jointIndex, parentVisualElement ) {\n\n            var parentVisualElementId = parentVisualElement.getAttribute( 'id' );\n            var colladaNode = visualScene.getChildById( parentVisualElementId, true );\n            var joint = kinematicsModel.joints[ jointIndex ];\n\n            scene.traverse(function( node ) {\n\n                if ( node.colladaId == parentVisualElementId ) {\n\n                    jointMap[ jointIndex ] = {\n                        node: node,\n                        transforms: colladaNode.transforms,\n                        joint: joint,\n                        position: joint.zeroPosition\n                    };\n\n                }\n\n            });\n\n        };\n\n        kinematics = {\n\n            joints: kinematicsModel && kinematicsModel.joints,\n\n            getJointValue: function( jointIndex ) {\n\n                var jointData = jointMap[ jointIndex ];\n\n                if ( jointData ) {\n\n                    return jointData.position;\n\n                } else {\n\n                    console.log( 'getJointValue: joint ' + jointIndex + ' doesn\\'t exist' );\n\n                }\n\n            },\n\n            setJointValue: function( jointIndex, value ) {\n\n                var jointData = jointMap[ jointIndex ];\n\n                if ( jointData ) {\n\n                    var joint = jointData.joint;\n\n                    if ( value > joint.limits.max || value < joint.limits.min ) {\n\n                        console.log( 'setJointValue: joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ')' );\n\n                    } else if ( joint.static ) {\n\n                        console.log( 'setJointValue: joint ' + jointIndex + ' is static' );\n\n                    } else {\n\n                        var threejsNode = jointData.node;\n                        var axis = joint.axis;\n                        var transforms = jointData.transforms;\n\n                        var matrix = new THREE.Matrix4();\n\n                        for (i = 0; i < transforms.length; i ++ ) {\n\n                            var transform = transforms[ i ];\n\n                            // kinda ghetto joint detection\n                            if ( transform.sid && transform.sid.indexOf( 'joint' + jointIndex ) !== -1 ) {\n\n                                // apply actual joint value here\n                                switch ( joint.type ) {\n\n                                    case 'revolute':\n\n                                        matrix.multiply( m1.makeRotationAxis( axis, THREE.Math.degToRad(value) ) );\n                                        break;\n\n                                    case 'prismatic':\n\n                                        matrix.multiply( m1.makeTranslation(axis.x * value, axis.y * value, axis.z * value ) );\n                                        break;\n\n                                    default:\n\n                                        console.warn( 'setJointValue: unknown joint type: ' + joint.type );\n                                        break;\n\n                                }\n\n                            } else {\n\n                                var m1 = new THREE.Matrix4();\n\n                                switch ( transform.type ) {\n\n                                    case 'matrix':\n\n                                        matrix.multiply( transform.obj );\n\n                                        break;\n\n                                    case 'translate':\n\n                                        matrix.multiply( m1.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );\n\n                                        break;\n\n                                    case 'rotate':\n\n                                        matrix.multiply( m1.makeRotationAxis( transform.obj, transform.angle ) );\n\n                                        break;\n\n                                }\n                            }\n                        }\n\n                        // apply the matrix to the threejs node\n                        var elementsFloat32Arr = matrix.elements;\n                        var elements = Array.prototype.slice.call( elementsFloat32Arr );\n\n                        var elementsRowMajor = [\n                            elements[ 0 ],\n                            elements[ 4 ],\n                            elements[ 8 ],\n                            elements[ 12 ],\n                            elements[ 1 ],\n                            elements[ 5 ],\n                            elements[ 9 ],\n                            elements[ 13 ],\n                            elements[ 2 ],\n                            elements[ 6 ],\n                            elements[ 10 ],\n                            elements[ 14 ],\n                            elements[ 3 ],\n                            elements[ 7 ],\n                            elements[ 11 ],\n                            elements[ 15 ]\n                        ];\n\n                        threejsNode.matrix.set.apply( threejsNode.matrix, elementsRowMajor );\n                        threejsNode.matrix.decompose( threejsNode.position, threejsNode.quaternion, threejsNode.scale );\n                    }\n\n                } else {\n\n                    console.log( 'setJointValue: joint ' + jointIndex + ' doesn\\'t exist' );\n\n                }\n\n            }\n\n        };\n\n        var element = COLLADA.querySelector('scene instance_kinematics_scene');\n\n        if ( element ) {\n\n            for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n                var child = element.childNodes[ i ];\n\n                if ( child.nodeType != 1 ) continue;\n\n                switch ( child.nodeName ) {\n\n                    case 'bind_joint_axis':\n\n                        var visualTarget = child.getAttribute( 'target' ).split( '/' ).pop();\n                        var axis = child.querySelector('axis param').textContent;\n                        var jointIndex = parseInt( axis.split( 'joint' ).pop().split( '.' )[0] );\n                        var visualTargetElement = COLLADA.querySelector( '[sid=\"' + visualTarget + '\"]' );\n\n                        if ( visualTargetElement ) {\n                            var parentVisualElement = visualTargetElement.parentElement;\n                            _addToMap(jointIndex, parentVisualElement);\n                        }\n\n                        break;\n\n                    default:\n\n                        break;\n\n                }\n\n            }\n        }\n\n    }\n\n    function createSceneGraph ( node, parent ) {\n\n        var obj = new THREE.Object3D();\n        var skinned = false;\n        var skinController;\n        var morphController;\n        var i, j;\n\n        // FIXME: controllers\n\n        for ( i = 0; i < node.controllers.length; i ++ ) {\n\n            var controller = controllers[ node.controllers[ i ].url ];\n\n            switch ( controller.type ) {\n\n                case 'skin':\n\n                    if ( geometries[ controller.skin.source ] ) {\n\n                        var inst_geom = new InstanceGeometry();\n\n                        inst_geom.url = controller.skin.source;\n                        inst_geom.instance_material = node.controllers[ i ].instance_material;\n\n                        node.geometries.push( inst_geom );\n                        skinned = true;\n                        skinController = node.controllers[ i ];\n\n                    } else if ( controllers[ controller.skin.source ] ) {\n\n                        // urgh: controller can be chained\n                        // handle the most basic case...\n\n                        var second = controllers[ controller.skin.source ];\n                        morphController = second;\n                    //\tskinController = node.controllers[i];\n\n                        if ( second.morph && geometries[ second.morph.source ] ) {\n\n                            var inst_geom = new InstanceGeometry();\n\n                            inst_geom.url = second.morph.source;\n                            inst_geom.instance_material = node.controllers[ i ].instance_material;\n\n                            node.geometries.push( inst_geom );\n\n                        }\n\n                    }\n\n                    break;\n\n                case 'morph':\n\n                    if ( geometries[ controller.morph.source ] ) {\n\n                        var inst_geom = new InstanceGeometry();\n\n                        inst_geom.url = controller.morph.source;\n                        inst_geom.instance_material = node.controllers[ i ].instance_material;\n\n                        node.geometries.push( inst_geom );\n                        morphController = node.controllers[ i ];\n\n                    }\n\n                    console.log( 'ColladaLoader: Morph-controller partially supported.' );\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        // geometries\n\n        var double_sided_materials = {};\n\n        for ( i = 0; i < node.geometries.length; i ++ ) {\n\n            var instance_geometry = node.geometries[i];\n            var instance_materials = instance_geometry.instance_material;\n            var geometry = geometries[ instance_geometry.url ];\n            var used_materials = {};\n            var used_materials_array = [];\n            var num_materials = 0;\n            var first_material;\n\n            if ( geometry ) {\n\n                if ( !geometry.mesh || !geometry.mesh.primitives )\n                    continue;\n\n                if ( obj.name.length === 0 ) {\n\n                    obj.name = geometry.id;\n\n                }\n\n                // collect used fx for this geometry-instance\n\n                if ( instance_materials ) {\n\n                    for ( j = 0; j < instance_materials.length; j ++ ) {\n\n                        var instance_material = instance_materials[ j ];\n                        var mat = materials[ instance_material.target ];\n                        var effect_id = mat.instance_effect.url;\n                        var shader = effects[ effect_id ].shader;\n                        var material3js = shader.material;\n\n                        if ( geometry.doubleSided ) {\n\n                            if ( !( instance_material.symbol in double_sided_materials ) ) {\n\n                                var _copied_material = material3js.clone();\n                                _copied_material.side = THREE.DoubleSide;\n                                double_sided_materials[ instance_material.symbol ] = _copied_material;\n\n                            }\n\n                            material3js = double_sided_materials[ instance_material.symbol ];\n\n                        }\n\n                        material3js.opacity = !material3js.opacity ? 1 : material3js.opacity;\n                        used_materials[ instance_material.symbol ] = num_materials;\n                        used_materials_array.push( material3js );\n                        first_material = material3js;\n                        first_material.name = mat.name === null || mat.name === '' ? mat.id : mat.name;\n                        num_materials ++;\n\n                    }\n\n                }\n\n                var mesh;\n                var material = first_material || new THREE.MeshLambertMaterial( { color: 0xdddddd, side: geometry.doubleSided ? THREE.DoubleSide : THREE.FrontSide } );\n                var geom = geometry.mesh.geometry3js;\n\n                if ( num_materials > 1 ) {\n\n                    material = new THREE.MultiMaterial( used_materials_array );\n\n                }\n\n                if ( skinController !== undefined ) {\n\n\n                    applySkin( geom, skinController );\n\n                    if ( geom.morphTargets.length > 0 ) {\n\n                        material.morphTargets = true;\n                        material.skinning = false;\n\n                    } else {\n\n                        material.morphTargets = false;\n                        material.skinning = true;\n\n                    }\n\n\n                    mesh = new THREE.SkinnedMesh( geom, material, false );\n\n\n                    //mesh.skeleton = skinController.skeleton;\n                    //mesh.skinController = controllers[ skinController.url ];\n                    //mesh.skinInstanceController = skinController;\n                    mesh.name = 'skin_' + skins.length;\n\n\n\n                    //mesh.animationHandle.setKey(0);\n                    skins.push( mesh );\n\n                } else if ( morphController !== undefined ) {\n\n                    createMorph( geom, morphController );\n\n                    material.morphTargets = true;\n\n                    mesh = new THREE.Mesh( geom, material );\n                    mesh.name = 'morph_' + morphs.length;\n\n                    morphs.push( mesh );\n\n                } else {\n\n                    if ( geom.isLineStrip === true ) {\n\n                        mesh = new THREE.Line( geom );\n\n                    } else {\n\n                        mesh = new THREE.Mesh( geom, material );\n\n                    }\n\n                }\n\n                obj.add(mesh);\n\n            }\n\n        }\n\n        for ( i = 0; i < node.cameras.length; i ++ ) {\n\n            var instance_camera = node.cameras[i];\n            var cparams = cameras[instance_camera.url];\n\n            var cam = new THREE.PerspectiveCamera(cparams.yfov, parseFloat(cparams.aspect_ratio),\n                    parseFloat(cparams.znear), parseFloat(cparams.zfar));\n\n            obj.add(cam);\n        }\n\n        for ( i = 0; i < node.lights.length; i ++ ) {\n\n            var light = null;\n            var instance_light = node.lights[i];\n            var lparams = lights[instance_light.url];\n\n            if ( lparams && lparams.technique ) {\n\n                var color = lparams.color.getHex();\n                var intensity = lparams.intensity;\n                var distance = lparams.distance;\n                var angle = lparams.falloff_angle;\n\n                switch ( lparams.technique ) {\n\n                    case 'directional':\n\n                        light = new THREE.DirectionalLight( color, intensity, distance );\n                        light.position.set(0, 0, 1);\n                        break;\n\n                    case 'point':\n\n                        light = new THREE.PointLight( color, intensity, distance );\n                        break;\n\n                    case 'spot':\n\n                        light = new THREE.SpotLight( color, intensity, distance, angle );\n                        light.position.set(0, 0, 1);\n                        break;\n\n                    case 'ambient':\n\n                        light = new THREE.AmbientLight( color );\n                        break;\n\n                }\n\n            }\n\n            if (light) {\n                obj.add(light);\n            }\n        }\n\n        obj.name = node.name || node.id || \"\";\n        obj.colladaId = node.id || \"\";\n        obj.layer = node.layer || \"\";\n        obj.matrix = node.matrix;\n        obj.matrix.decompose( obj.position, obj.quaternion, obj.scale );\n\n        if ( options.centerGeometry && obj.geometry ) {\n\n            var delta = obj.geometry.center();\n            delta.multiply( obj.scale );\n            delta.applyQuaternion( obj.quaternion );\n\n            obj.position.sub( delta );\n\n        }\n\n        for ( i = 0; i < node.nodes.length; i ++ ) {\n\n            obj.add( createSceneGraph( node.nodes[i], node ) );\n\n        }\n\n        return obj;\n\n    }\n\n    function getJointId( skin, id ) {\n\n        for ( var i = 0; i < skin.joints.length; i ++ ) {\n\n            if ( skin.joints[ i ] === id ) {\n\n                return i;\n\n            }\n\n        }\n\n    }\n\n    function getLibraryNode( id ) {\n\n        var nodes = COLLADA.querySelectorAll('library_nodes node');\n\n        for ( var i = 0; i < nodes.length; i++ ) {\n\n            var attObj = nodes[i].attributes.getNamedItem('id');\n\n            if ( attObj && attObj.value === id ) {\n\n                return nodes[i];\n\n            }\n\n        }\n\n        return undefined;\n\n    }\n\n    function getChannelsForNode ( node ) {\n\n        var channels = [];\n        var startTime = 1000000;\n        var endTime = -1000000;\n\n        for ( var id in animations ) {\n\n            var animation = animations[id];\n\n            for ( var i = 0; i < animation.channel.length; i ++ ) {\n\n                var channel = animation.channel[i];\n                var sampler = animation.sampler[i];\n                var id = channel.target.split('/')[0];\n\n                if ( id == node.id ) {\n\n                    sampler.create();\n                    channel.sampler = sampler;\n                    startTime = Math.min(startTime, sampler.startTime);\n                    endTime = Math.max(endTime, sampler.endTime);\n                    channels.push(channel);\n\n                }\n\n            }\n\n        }\n\n        if ( channels.length ) {\n\n            node.startTime = startTime;\n            node.endTime = endTime;\n\n        }\n\n        return channels;\n\n    }\n\n    function calcFrameDuration( node ) {\n\n        var minT = 10000000;\n\n        for ( var i = 0; i < node.channels.length; i ++ ) {\n\n            var sampler = node.channels[i].sampler;\n\n            for ( var j = 0; j < sampler.input.length - 1; j ++ ) {\n\n                var t0 = sampler.input[ j ];\n                var t1 = sampler.input[ j + 1 ];\n                minT = Math.min( minT, t1 - t0 );\n\n            }\n        }\n\n        return minT;\n\n    }\n\n    function calcMatrixAt( node, t ) {\n\n        var animated = {};\n\n        var i, j;\n\n        for ( i = 0; i < node.channels.length; i ++ ) {\n\n            var channel = node.channels[ i ];\n            animated[ channel.sid ] = channel;\n\n        }\n\n        var matrix = new THREE.Matrix4();\n\n        for ( i = 0; i < node.transforms.length; i ++ ) {\n\n            var transform = node.transforms[ i ];\n            var channel = animated[ transform.sid ];\n\n            if ( channel !== undefined ) {\n\n                var sampler = channel.sampler;\n                var value;\n\n                for ( j = 0; j < sampler.input.length - 1; j ++ ) {\n\n                    if ( sampler.input[ j + 1 ] > t ) {\n\n                        value = sampler.output[ j ];\n                        //console.log(value.flatten)\n                        break;\n\n                    }\n\n                }\n\n                if ( value !== undefined ) {\n\n                    if ( value instanceof THREE.Matrix4 ) {\n\n                        matrix.multiplyMatrices( matrix, value );\n\n                    } else {\n\n                        // FIXME: handle other types\n\n                        matrix.multiplyMatrices( matrix, transform.matrix );\n\n                    }\n\n                } else {\n\n                    matrix.multiplyMatrices( matrix, transform.matrix );\n\n                }\n\n            } else {\n\n                matrix.multiplyMatrices( matrix, transform.matrix );\n\n            }\n\n        }\n\n        return matrix;\n\n    }\n\n    function bakeAnimations ( node ) {\n\n        if ( node.channels && node.channels.length ) {\n\n            var keys = [],\n                sids = [];\n\n            for ( var i = 0, il = node.channels.length; i < il; i ++ ) {\n\n                var channel = node.channels[i],\n                    fullSid = channel.fullSid,\n                    sampler = channel.sampler,\n                    input = sampler.input,\n                    transform = node.getTransformBySid( channel.sid ),\n                    member;\n\n                if ( channel.arrIndices ) {\n\n                    member = [];\n\n                    for ( var j = 0, jl = channel.arrIndices.length; j < jl; j ++ ) {\n\n                        member[ j ] = getConvertedIndex( channel.arrIndices[ j ] );\n\n                    }\n\n                } else {\n\n                    member = getConvertedMember( channel.member );\n\n                }\n\n                if ( transform ) {\n\n                    if ( sids.indexOf( fullSid ) === -1 ) {\n\n                        sids.push( fullSid );\n\n                    }\n\n                    for ( var j = 0, jl = input.length; j < jl; j ++ ) {\n\n                        var time = input[j],\n                            data = sampler.getData( transform.type, j, member ),\n                            key = findKey( keys, time );\n\n                        if ( !key ) {\n\n                            key = new Key( time );\n                            var timeNdx = findTimeNdx( keys, time );\n                            keys.splice( timeNdx === -1 ? keys.length : timeNdx, 0, key );\n\n                        }\n\n                        key.addTarget( fullSid, transform, member, data );\n\n                    }\n\n                } else {\n\n                    console.log( 'Could not find transform \"' + channel.sid + '\" in node ' + node.id );\n\n                }\n\n            }\n\n            // post process\n            for ( var i = 0; i < sids.length; i ++ ) {\n\n                var sid = sids[ i ];\n\n                for ( var j = 0; j < keys.length; j ++ ) {\n\n                    var key = keys[ j ];\n\n                    if ( !key.hasTarget( sid ) ) {\n\n                        interpolateKeys( keys, key, j, sid );\n\n                    }\n\n                }\n\n            }\n\n            node.keys = keys;\n            node.sids = sids;\n\n        }\n\n    }\n\n    function findKey ( keys, time) {\n\n        var retVal = null;\n\n        for ( var i = 0, il = keys.length; i < il && retVal === null; i ++ ) {\n\n            var key = keys[i];\n\n            if ( key.time === time ) {\n\n                retVal = key;\n\n            } else if ( key.time > time ) {\n\n                break;\n\n            }\n\n        }\n\n        return retVal;\n\n    }\n\n    function findTimeNdx ( keys, time) {\n\n        var ndx = -1;\n\n        for ( var i = 0, il = keys.length; i < il && ndx === -1; i ++ ) {\n\n            var key = keys[i];\n\n            if ( key.time >= time ) {\n\n                ndx = i;\n\n            }\n\n        }\n\n        return ndx;\n\n    }\n\n    function interpolateKeys ( keys, key, ndx, fullSid ) {\n\n        var prevKey = getPrevKeyWith( keys, fullSid, ndx ? ndx - 1 : 0 ),\n            nextKey = getNextKeyWith( keys, fullSid, ndx + 1 );\n\n        if ( prevKey && nextKey ) {\n\n            var scale = (key.time - prevKey.time) / (nextKey.time - prevKey.time),\n                prevTarget = prevKey.getTarget( fullSid ),\n                nextData = nextKey.getTarget( fullSid ).data,\n                prevData = prevTarget.data,\n                data;\n\n            if ( prevTarget.type === 'matrix' ) {\n\n                data = prevData;\n\n            } else if ( prevData.length ) {\n\n                data = [];\n\n                for ( var i = 0; i < prevData.length; ++ i ) {\n\n                    data[ i ] = prevData[ i ] + ( nextData[ i ] - prevData[ i ] ) * scale;\n\n                }\n\n            } else {\n\n                data = prevData + ( nextData - prevData ) * scale;\n\n            }\n\n            key.addTarget( fullSid, prevTarget.transform, prevTarget.member, data );\n\n        }\n\n    }\n\n    // Get next key with given sid\n\n    function getNextKeyWith( keys, fullSid, ndx ) {\n\n        for ( ; ndx < keys.length; ndx ++ ) {\n\n            var key = keys[ ndx ];\n\n            if ( key.hasTarget( fullSid ) ) {\n\n                return key;\n\n            }\n\n        }\n\n        return null;\n\n    }\n\n    // Get previous key with given sid\n\n    function getPrevKeyWith( keys, fullSid, ndx ) {\n\n        ndx = ndx >= 0 ? ndx : ndx + keys.length;\n\n        for ( ; ndx >= 0; ndx -- ) {\n\n            var key = keys[ ndx ];\n\n            if ( key.hasTarget( fullSid ) ) {\n\n                return key;\n\n            }\n\n        }\n\n        return null;\n\n    }\n\n    function _Image() {\n\n        this.id = \"\";\n        this.init_from = \"\";\n\n    }\n\n    _Image.prototype.parse = function(element) {\n\n        this.id = element.getAttribute('id');\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            if ( child.nodeName === 'init_from' ) {\n\n                this.init_from = child.textContent;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Controller() {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.type = \"\";\n        this.skin = null;\n        this.morph = null;\n\n    }\n\n    Controller.prototype.parse = function( element ) {\n\n        this.id = element.getAttribute('id');\n        this.name = element.getAttribute('name');\n        this.type = \"none\";\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            switch ( child.nodeName ) {\n\n                case 'skin':\n\n                    this.skin = (new Skin()).parse(child);\n                    this.type = child.nodeName;\n                    break;\n\n                case 'morph':\n\n                    this.morph = (new Morph()).parse(child);\n                    this.type = child.nodeName;\n                    break;\n\n                default:\n                    break;\n\n            }\n        }\n\n        return this;\n\n    };\n\n    function Morph() {\n\n        this.method = null;\n        this.source = null;\n        this.targets = null;\n        this.weights = null;\n\n    }\n\n    Morph.prototype.parse = function( element ) {\n\n        var sources = {};\n        var inputs = [];\n        var i;\n\n        this.method = element.getAttribute( 'method' );\n        this.source = element.getAttribute( 'source' ).replace( /^#/, '' );\n\n        for ( i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'source':\n\n                    var source = ( new Source() ).parse( child );\n                    sources[ source.id ] = source;\n                    break;\n\n                case 'targets':\n\n                    inputs = this.parseInputs( child );\n                    break;\n\n                default:\n\n                    console.log( child.nodeName );\n                    break;\n\n            }\n\n        }\n\n        for ( i = 0; i < inputs.length; i ++ ) {\n\n            var input = inputs[ i ];\n            var source = sources[ input.source ];\n\n            switch ( input.semantic ) {\n\n                case 'MORPH_TARGET':\n\n                    this.targets = source.read();\n                    break;\n\n                case 'MORPH_WEIGHT':\n\n                    this.weights = source.read();\n                    break;\n\n                default:\n                    break;\n\n            }\n        }\n\n        return this;\n\n    };\n\n    Morph.prototype.parseInputs = function(element) {\n\n        var inputs = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n            if ( child.nodeType != 1) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'input':\n\n                    inputs.push( (new Input()).parse(child) );\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        return inputs;\n\n    };\n\n    function Skin() {\n\n        this.source = \"\";\n        this.bindShapeMatrix = null;\n        this.invBindMatrices = [];\n        this.joints = [];\n        this.weights = [];\n\n    }\n\n    Skin.prototype.parse = function( element ) {\n\n        var sources = {};\n        var joints, weights;\n\n        this.source = element.getAttribute( 'source' ).replace( /^#/, '' );\n        this.invBindMatrices = [];\n        this.joints = [];\n        this.weights = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'bind_shape_matrix':\n\n                    var f = _floats(child.textContent);\n                    this.bindShapeMatrix = getConvertedMat4( f );\n                    break;\n\n                case 'source':\n\n                    var src = new Source().parse(child);\n                    sources[ src.id ] = src;\n                    break;\n\n                case 'joints':\n\n                    joints = child;\n                    break;\n\n                case 'vertex_weights':\n\n                    weights = child;\n                    break;\n\n                default:\n\n                    console.log( child.nodeName );\n                    break;\n\n            }\n        }\n\n        this.parseJoints( joints, sources );\n        this.parseWeights( weights, sources );\n\n        return this;\n\n    };\n\n    Skin.prototype.parseJoints = function ( element, sources ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'input':\n\n                    var input = ( new Input() ).parse( child );\n                    var source = sources[ input.source ];\n\n                    if ( input.semantic === 'JOINT' ) {\n\n                        this.joints = source.read();\n\n                    } else if ( input.semantic === 'INV_BIND_MATRIX' ) {\n\n                        this.invBindMatrices = source.read();\n\n                    }\n\n                    break;\n\n                default:\n                    break;\n            }\n\n        }\n\n    };\n\n    Skin.prototype.parseWeights = function ( element, sources ) {\n\n        var v, vcount, inputs = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'input':\n\n                    inputs.push( ( new Input() ).parse( child ) );\n                    break;\n\n                case 'v':\n\n                    v = _ints( child.textContent );\n                    break;\n\n                case 'vcount':\n\n                    vcount = _ints( child.textContent );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        var index = 0;\n\n        for ( var i = 0; i < vcount.length; i ++ ) {\n\n            var numBones = vcount[i];\n            var vertex_weights = [];\n\n            for ( var j = 0; j < numBones; j ++ ) {\n\n                var influence = {};\n\n                for ( var k = 0; k < inputs.length; k ++ ) {\n\n                    var input = inputs[ k ];\n                    var value = v[ index + input.offset ];\n\n                    switch ( input.semantic ) {\n\n                        case 'JOINT':\n\n                            influence.joint = value;//this.joints[value];\n                            break;\n\n                        case 'WEIGHT':\n\n                            influence.weight = sources[ input.source ].data[ value ];\n                            break;\n\n                        default:\n                            break;\n\n                    }\n\n                }\n\n                vertex_weights.push( influence );\n                index += inputs.length;\n            }\n\n            for ( var j = 0; j < vertex_weights.length; j ++ ) {\n\n                vertex_weights[ j ].index = i;\n\n            }\n\n            this.weights.push( vertex_weights );\n\n        }\n\n    };\n\n    function VisualScene () {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.nodes = [];\n        this.scene = new THREE.Group();\n\n    }\n\n    VisualScene.prototype.getChildById = function( id, recursive ) {\n\n        for ( var i = 0; i < this.nodes.length; i ++ ) {\n\n            var node = this.nodes[ i ].getChildById( id, recursive );\n\n            if ( node ) {\n\n                return node;\n\n            }\n\n        }\n\n        return null;\n\n    };\n\n    VisualScene.prototype.getChildBySid = function( sid, recursive ) {\n\n        for ( var i = 0; i < this.nodes.length; i ++ ) {\n\n            var node = this.nodes[ i ].getChildBySid( sid, recursive );\n\n            if ( node ) {\n\n                return node;\n\n            }\n\n        }\n\n        return null;\n\n    };\n\n    VisualScene.prototype.parse = function( element ) {\n\n        this.id = element.getAttribute( 'id' );\n        this.name = element.getAttribute( 'name' );\n        this.nodes = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'node':\n\n                    this.nodes.push( ( new Node() ).parse( child ) );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Node() {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.sid = \"\";\n        this.nodes = [];\n        this.controllers = [];\n        this.transforms = [];\n        this.geometries = [];\n        this.channels = [];\n        this.matrix = new THREE.Matrix4();\n\n    }\n\n    Node.prototype.getChannelForTransform = function( transformSid ) {\n\n        for ( var i = 0; i < this.channels.length; i ++ ) {\n\n            var channel = this.channels[i];\n            var parts = channel.target.split('/');\n            var id = parts.shift();\n            var sid = parts.shift();\n            var dotSyntax = (sid.indexOf(\".\") >= 0);\n            var arrSyntax = (sid.indexOf(\"(\") >= 0);\n            var arrIndices;\n            var member;\n\n            if ( dotSyntax ) {\n\n                parts = sid.split(\".\");\n                sid = parts.shift();\n                member = parts.shift();\n\n            } else if ( arrSyntax ) {\n\n                arrIndices = sid.split(\"(\");\n                sid = arrIndices.shift();\n\n                for ( var j = 0; j < arrIndices.length; j ++ ) {\n\n                    arrIndices[ j ] = parseInt( arrIndices[ j ].replace( /\\)/, '' ) );\n\n                }\n\n            }\n\n            if ( sid === transformSid ) {\n\n                channel.info = { sid: sid, dotSyntax: dotSyntax, arrSyntax: arrSyntax, arrIndices: arrIndices };\n                return channel;\n\n            }\n\n        }\n\n        return null;\n\n    };\n\n    Node.prototype.getChildById = function ( id, recursive ) {\n\n        if ( this.id === id ) {\n\n            return this;\n\n        }\n\n        if ( recursive ) {\n\n            for ( var i = 0; i < this.nodes.length; i ++ ) {\n\n                var n = this.nodes[ i ].getChildById( id, recursive );\n\n                if ( n ) {\n\n                    return n;\n\n                }\n\n            }\n\n        }\n\n        return null;\n\n    };\n\n    Node.prototype.getChildBySid = function ( sid, recursive ) {\n\n        if ( this.sid === sid ) {\n\n            return this;\n\n        }\n\n        if ( recursive ) {\n\n            for ( var i = 0; i < this.nodes.length; i ++ ) {\n\n                var n = this.nodes[ i ].getChildBySid( sid, recursive );\n\n                if ( n ) {\n\n                    return n;\n\n                }\n\n            }\n        }\n\n        return null;\n\n    };\n\n    Node.prototype.getTransformBySid = function ( sid ) {\n\n        for ( var i = 0; i < this.transforms.length; i ++ ) {\n\n            if ( this.transforms[ i ].sid === sid ) return this.transforms[ i ];\n\n        }\n\n        return null;\n\n    };\n\n    Node.prototype.parse = function( element ) {\n\n        var url;\n\n        this.id = element.getAttribute('id');\n        this.sid = element.getAttribute('sid');\n        this.name = element.getAttribute('name');\n        this.type = element.getAttribute('type');\n        this.layer = element.getAttribute('layer');\n\n        this.type = this.type === 'JOINT' ? this.type : 'NODE';\n\n        this.nodes = [];\n        this.transforms = [];\n        this.geometries = [];\n        this.cameras = [];\n        this.lights = [];\n        this.controllers = [];\n        this.matrix = new THREE.Matrix4();\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'node':\n\n                    this.nodes.push( ( new Node() ).parse( child ) );\n                    break;\n\n                case 'instance_camera':\n\n                    this.cameras.push( ( new InstanceCamera() ).parse( child ) );\n                    break;\n\n                case 'instance_controller':\n\n                    this.controllers.push( ( new InstanceController() ).parse( child ) );\n                    break;\n\n                case 'instance_geometry':\n\n                    this.geometries.push( ( new InstanceGeometry() ).parse( child ) );\n                    break;\n\n                case 'instance_light':\n\n                    this.lights.push( ( new InstanceLight() ).parse( child ) );\n                    break;\n\n                case 'instance_node':\n\n                    url = child.getAttribute( 'url' ).replace( /^#/, '' );\n                    var iNode = getLibraryNode( url );\n\n                    if ( iNode ) {\n\n                        this.nodes.push( ( new Node() ).parse( iNode )) ;\n\n                    }\n\n                    break;\n\n                case 'rotate':\n                case 'translate':\n                case 'scale':\n                case 'matrix':\n                case 'lookat':\n                case 'skew':\n\n                    this.transforms.push( ( new Transform() ).parse( child ) );\n                    break;\n\n                case 'extra':\n                    break;\n\n                default:\n\n                    console.log( child.nodeName );\n                    break;\n\n            }\n\n        }\n\n        this.channels = getChannelsForNode( this );\n        bakeAnimations( this );\n\n        this.updateMatrix();\n\n        return this;\n\n    };\n\n    Node.prototype.updateMatrix = function () {\n\n        this.matrix.identity();\n\n        for ( var i = 0; i < this.transforms.length; i ++ ) {\n\n            this.transforms[ i ].apply( this.matrix );\n\n        }\n\n    };\n\n    function Transform () {\n\n        this.sid = \"\";\n        this.type = \"\";\n        this.data = [];\n        this.obj = null;\n\n    }\n\n    Transform.prototype.parse = function ( element ) {\n\n        this.sid = element.getAttribute( 'sid' );\n        this.type = element.nodeName;\n        this.data = _floats( element.textContent );\n        this.convert();\n\n        return this;\n\n    };\n\n    Transform.prototype.convert = function () {\n\n        switch ( this.type ) {\n\n            case 'matrix':\n\n                this.obj = getConvertedMat4( this.data );\n                break;\n\n            case 'rotate':\n\n                this.angle = THREE.Math.degToRad( this.data[3] );\n\n            case 'translate':\n\n                fixCoords( this.data, -1 );\n                this.obj = new THREE.Vector3( this.data[ 0 ], this.data[ 1 ], this.data[ 2 ] );\n                break;\n\n            case 'scale':\n\n                fixCoords( this.data, 1 );\n                this.obj = new THREE.Vector3( this.data[ 0 ], this.data[ 1 ], this.data[ 2 ] );\n                break;\n\n            default:\n                console.log( 'Can not convert Transform of type ' + this.type );\n                break;\n\n        }\n\n    };\n\n    Transform.prototype.apply = function () {\n\n        var m1 = new THREE.Matrix4();\n\n        return function ( matrix ) {\n\n            switch ( this.type ) {\n\n                case 'matrix':\n\n                    matrix.multiply( this.obj );\n\n                    break;\n\n                case 'translate':\n\n                    matrix.multiply( m1.makeTranslation( this.obj.x, this.obj.y, this.obj.z ) );\n\n                    break;\n\n                case 'rotate':\n\n                    matrix.multiply( m1.makeRotationAxis( this.obj, this.angle ) );\n\n                    break;\n\n                case 'scale':\n\n                    matrix.scale( this.obj );\n\n                    break;\n\n            }\n\n        };\n\n    }();\n\n    Transform.prototype.update = function ( data, member ) {\n\n        var members = [ 'X', 'Y', 'Z', 'ANGLE' ];\n\n        switch ( this.type ) {\n\n            case 'matrix':\n\n                if ( ! member ) {\n\n                    this.obj.copy( data );\n\n                } else if ( member.length === 1 ) {\n\n                    switch ( member[ 0 ] ) {\n\n                        case 0:\n\n                            this.obj.n11 = data[ 0 ];\n                            this.obj.n21 = data[ 1 ];\n                            this.obj.n31 = data[ 2 ];\n                            this.obj.n41 = data[ 3 ];\n\n                            break;\n\n                        case 1:\n\n                            this.obj.n12 = data[ 0 ];\n                            this.obj.n22 = data[ 1 ];\n                            this.obj.n32 = data[ 2 ];\n                            this.obj.n42 = data[ 3 ];\n\n                            break;\n\n                        case 2:\n\n                            this.obj.n13 = data[ 0 ];\n                            this.obj.n23 = data[ 1 ];\n                            this.obj.n33 = data[ 2 ];\n                            this.obj.n43 = data[ 3 ];\n\n                            break;\n\n                        case 3:\n\n                            this.obj.n14 = data[ 0 ];\n                            this.obj.n24 = data[ 1 ];\n                            this.obj.n34 = data[ 2 ];\n                            this.obj.n44 = data[ 3 ];\n\n                            break;\n\n                    }\n\n                } else if ( member.length === 2 ) {\n\n                    var propName = 'n' + ( member[ 0 ] + 1 ) + ( member[ 1 ] + 1 );\n                    this.obj[ propName ] = data;\n\n                } else {\n\n                    console.log('Incorrect addressing of matrix in transform.');\n\n                }\n\n                break;\n\n            case 'translate':\n            case 'scale':\n\n                if ( Object.prototype.toString.call( member ) === '[object Array]' ) {\n\n                    member = members[ member[ 0 ] ];\n\n                }\n\n                switch ( member ) {\n\n                    case 'X':\n\n                        this.obj.x = data;\n                        break;\n\n                    case 'Y':\n\n                        this.obj.y = data;\n                        break;\n\n                    case 'Z':\n\n                        this.obj.z = data;\n                        break;\n\n                    default:\n\n                        this.obj.x = data[ 0 ];\n                        this.obj.y = data[ 1 ];\n                        this.obj.z = data[ 2 ];\n                        break;\n\n                }\n\n                break;\n\n            case 'rotate':\n\n                if ( Object.prototype.toString.call( member ) === '[object Array]' ) {\n\n                    member = members[ member[ 0 ] ];\n\n                }\n\n                switch ( member ) {\n\n                    case 'X':\n\n                        this.obj.x = data;\n                        break;\n\n                    case 'Y':\n\n                        this.obj.y = data;\n                        break;\n\n                    case 'Z':\n\n                        this.obj.z = data;\n                        break;\n\n                    case 'ANGLE':\n\n                        this.angle = THREE.Math.degToRad( data );\n                        break;\n\n                    default:\n\n                        this.obj.x = data[ 0 ];\n                        this.obj.y = data[ 1 ];\n                        this.obj.z = data[ 2 ];\n                        this.angle = THREE.Math.degToRad( data[ 3 ] );\n                        break;\n\n                }\n                break;\n\n        }\n\n    };\n\n    function InstanceController() {\n\n        this.url = \"\";\n        this.skeleton = [];\n        this.instance_material = [];\n\n    }\n\n    InstanceController.prototype.parse = function ( element ) {\n\n        this.url = element.getAttribute('url').replace(/^#/, '');\n        this.skeleton = [];\n        this.instance_material = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType !== 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'skeleton':\n\n                    this.skeleton.push( child.textContent.replace(/^#/, '') );\n                    break;\n\n                case 'bind_material':\n\n                    var instances = child.querySelectorAll('instance_material');\n\n                    for ( var j = 0; j < instances.length; j ++ ) {\n\n                        var instance = instances[j];\n                        this.instance_material.push( (new InstanceMaterial()).parse(instance) );\n\n                    }\n\n\n                    break;\n\n                case 'extra':\n                    break;\n\n                default:\n                    break;\n\n            }\n        }\n\n        return this;\n\n    };\n\n    function InstanceMaterial () {\n\n        this.symbol = \"\";\n        this.target = \"\";\n\n    }\n\n    InstanceMaterial.prototype.parse = function ( element ) {\n\n        this.symbol = element.getAttribute('symbol');\n        this.target = element.getAttribute('target').replace(/^#/, '');\n        return this;\n\n    };\n\n    function InstanceGeometry() {\n\n        this.url = \"\";\n        this.instance_material = [];\n\n    }\n\n    InstanceGeometry.prototype.parse = function ( element ) {\n\n        this.url = element.getAttribute('url').replace(/^#/, '');\n        this.instance_material = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n            if ( child.nodeType != 1 ) continue;\n\n            if ( child.nodeName === 'bind_material' ) {\n\n                var instances = child.querySelectorAll('instance_material');\n\n                for ( var j = 0; j < instances.length; j ++ ) {\n\n                    var instance = instances[j];\n                    this.instance_material.push( (new InstanceMaterial()).parse(instance) );\n\n                }\n\n                break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Geometry() {\n\n        this.id = \"\";\n        this.mesh = null;\n\n    }\n\n    Geometry.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute('id');\n\n        extractDoubleSided( this, element );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n\n            switch ( child.nodeName ) {\n\n                case 'mesh':\n\n                    this.mesh = (new Mesh(this)).parse(child);\n                    break;\n\n                case 'extra':\n\n                    // console.log( child );\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        return this;\n\n    };\n\n    function Mesh( geometry ) {\n\n        this.geometry = geometry.id;\n        this.primitives = [];\n        this.vertices = null;\n        this.geometry3js = null;\n\n    }\n\n    Mesh.prototype.parse = function ( element ) {\n\n        this.primitives = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            switch ( child.nodeName ) {\n\n                case 'source':\n\n                    _source( child );\n                    break;\n\n                case 'vertices':\n\n                    this.vertices = ( new Vertices() ).parse( child );\n                    break;\n\n                case 'linestrips':\n\n                    this.primitives.push( ( new LineStrips().parse( child ) ) );\n                    break;\n\n                case 'triangles':\n\n                    this.primitives.push( ( new Triangles().parse( child ) ) );\n                    break;\n\n                case 'polygons':\n\n                    this.primitives.push( ( new Polygons().parse( child ) ) );\n                    break;\n\n                case 'polylist':\n\n                    this.primitives.push( ( new Polylist().parse( child ) ) );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        this.geometry3js = new THREE.Geometry();\n\n        if ( this.vertices === null ) {\n\n            // TODO (mrdoob): Study case when this is null (carrier.dae)\n\n            return this;\n\n        }\n\n        var vertexData = sources[ this.vertices.input['POSITION'].source ].data;\n\n        for ( var i = 0; i < vertexData.length; i += 3 ) {\n\n            this.geometry3js.vertices.push( getConvertedVec3( vertexData, i ).clone() );\n\n        }\n\n        for ( var i = 0; i < this.primitives.length; i ++ ) {\n\n            var primitive = this.primitives[ i ];\n            primitive.setVertices( this.vertices );\n            this.handlePrimitive( primitive, this.geometry3js );\n\n        }\n\n        if ( this.geometry3js.calcNormals ) {\n\n            this.geometry3js.computeVertexNormals();\n            delete this.geometry3js.calcNormals;\n\n        }\n\n        return this;\n\n    };\n\n    Mesh.prototype.handlePrimitive = function ( primitive, geom ) {\n\n        if ( primitive instanceof LineStrips ) {\n\n            // TODO: Handle indices. Maybe easier with BufferGeometry?\n\n            geom.isLineStrip = true;\n            return;\n\n        }\n\n        var j, k, pList = primitive.p, inputs = primitive.inputs;\n        var input, index, idx32;\n        var source, numParams;\n        var vcIndex = 0, vcount = 3, maxOffset = 0;\n        var texture_sets = [];\n\n        for ( j = 0; j < inputs.length; j ++ ) {\n\n            input = inputs[ j ];\n\n            var offset = input.offset + 1;\n            maxOffset = (maxOffset < offset) ? offset : maxOffset;\n\n            switch ( input.semantic ) {\n\n                case 'TEXCOORD':\n                    texture_sets.push( input.set );\n                    break;\n\n            }\n\n        }\n\n        for ( var pCount = 0; pCount < pList.length; ++ pCount ) {\n\n            var p = pList[ pCount ], i = 0;\n\n            while ( i < p.length ) {\n\n                var vs = [];\n                var ns = [];\n                var ts = null;\n                var cs = [];\n\n                if ( primitive.vcount ) {\n\n                    vcount = primitive.vcount.length ? primitive.vcount[ vcIndex ++ ] : primitive.vcount;\n\n                } else {\n\n                    vcount = p.length / maxOffset;\n\n                }\n\n\n                for ( j = 0; j < vcount; j ++ ) {\n\n                    for ( k = 0; k < inputs.length; k ++ ) {\n\n                        input = inputs[ k ];\n                        source = sources[ input.source ];\n\n                        index = p[ i + ( j * maxOffset ) + input.offset ];\n                        numParams = source.accessor.params.length;\n                        idx32 = index * numParams;\n\n                        switch ( input.semantic ) {\n\n                            case 'VERTEX':\n\n                                vs.push( index );\n\n                                break;\n\n                            case 'NORMAL':\n\n                                ns.push( getConvertedVec3( source.data, idx32 ) );\n\n                                break;\n\n                            case 'TEXCOORD':\n\n                                ts = ts || { };\n                                if ( ts[ input.set ] === undefined ) ts[ input.set ] = [];\n                                // invert the V\n                                ts[ input.set ].push( new THREE.Vector2( source.data[ idx32 ], source.data[ idx32 + 1 ] ) );\n\n                                break;\n\n                            case 'COLOR':\n\n                                cs.push( new THREE.Color().setRGB( source.data[ idx32 ], source.data[ idx32 + 1 ], source.data[ idx32 + 2 ] ) );\n\n                                break;\n\n                            default:\n\n                                break;\n\n                        }\n\n                    }\n\n                }\n\n                if ( ns.length === 0 ) {\n\n                    // check the vertices inputs\n                    input = this.vertices.input.NORMAL;\n\n                    if ( input ) {\n\n                        source = sources[ input.source ];\n                        numParams = source.accessor.params.length;\n\n                        for ( var ndx = 0, len = vs.length; ndx < len; ndx ++ ) {\n\n                            ns.push( getConvertedVec3( source.data, vs[ ndx ] * numParams ) );\n\n                        }\n\n                    } else {\n\n                        geom.calcNormals = true;\n\n                    }\n\n                }\n\n                if ( !ts ) {\n\n                    ts = { };\n                    // check the vertices inputs\n                    input = this.vertices.input.TEXCOORD;\n\n                    if ( input ) {\n\n                        texture_sets.push( input.set );\n                        source = sources[ input.source ];\n                        numParams = source.accessor.params.length;\n\n                        for ( var ndx = 0, len = vs.length; ndx < len; ndx ++ ) {\n\n                            idx32 = vs[ ndx ] * numParams;\n                            if ( ts[ input.set ] === undefined ) ts[ input.set ] = [ ];\n                            // invert the V\n                            ts[ input.set ].push( new THREE.Vector2( source.data[ idx32 ], 1.0 - source.data[ idx32 + 1 ] ) );\n\n                        }\n\n                    }\n\n                }\n\n                if ( cs.length === 0 ) {\n\n                    // check the vertices inputs\n                    input = this.vertices.input.COLOR;\n\n                    if ( input ) {\n\n                        source = sources[ input.source ];\n                        numParams = source.accessor.params.length;\n\n                        for ( var ndx = 0, len = vs.length; ndx < len; ndx ++ ) {\n\n                            idx32 = vs[ ndx ] * numParams;\n                            cs.push( new THREE.Color().setRGB( source.data[ idx32 ], source.data[ idx32 + 1 ], source.data[ idx32 + 2 ] ) );\n\n                        }\n\n                    }\n\n                }\n\n                var face = null, faces = [], uv, uvArr;\n\n                if ( vcount === 3 ) {\n\n                    faces.push( new THREE.Face3( vs[0], vs[1], vs[2], ns, cs.length ? cs : new THREE.Color() ) );\n\n                } else if ( vcount === 4 ) {\n\n                    faces.push( new THREE.Face3( vs[0], vs[1], vs[3], ns.length ? [ ns[0].clone(), ns[1].clone(), ns[3].clone() ] : [], cs.length ? [ cs[0], cs[1], cs[3] ] : new THREE.Color() ) );\n\n                    faces.push( new THREE.Face3( vs[1], vs[2], vs[3], ns.length ? [ ns[1].clone(), ns[2].clone(), ns[3].clone() ] : [], cs.length ? [ cs[1], cs[2], cs[3] ] : new THREE.Color() ) );\n\n                } else if ( vcount > 4 && options.subdivideFaces ) {\n\n                    var clr = cs.length ? cs : new THREE.Color(),\n                        vec1, vec2, vec3, v1, v2, norm;\n\n                    // subdivide into multiple Face3s\n\n                    for ( k = 1; k < vcount - 1; ) {\n\n                        faces.push( new THREE.Face3( vs[0], vs[k], vs[k + 1], ns.length ? [ ns[0].clone(), ns[k ++].clone(), ns[k].clone() ] : [], clr ) );\n\n                    }\n\n                }\n\n                if ( faces.length ) {\n\n                    for ( var ndx = 0, len = faces.length; ndx < len; ndx ++ ) {\n\n                        face = faces[ndx];\n                        face.daeMaterial = primitive.material;\n                        geom.faces.push( face );\n\n                        for ( k = 0; k < texture_sets.length; k ++ ) {\n\n                            uv = ts[ texture_sets[k] ];\n\n                            if ( vcount > 4 ) {\n\n                                // Grab the right UVs for the vertices in this face\n                                uvArr = [ uv[0], uv[ndx + 1], uv[ndx + 2] ];\n\n                            } else if ( vcount === 4 ) {\n\n                                if ( ndx === 0 ) {\n\n                                    uvArr = [ uv[0], uv[1], uv[3] ];\n\n                                } else {\n\n                                    uvArr = [ uv[1].clone(), uv[2], uv[3].clone() ];\n\n                                }\n\n                            } else {\n\n                                uvArr = [ uv[0], uv[1], uv[2] ];\n\n                            }\n\n                            if ( geom.faceVertexUvs[k] === undefined ) {\n\n                                geom.faceVertexUvs[k] = [];\n\n                            }\n\n                            geom.faceVertexUvs[k].push( uvArr );\n\n                        }\n\n                    }\n\n                } else {\n\n                    console.log( 'dropped face with vcount ' + vcount + ' for geometry with id: ' + geom.id );\n\n                }\n\n                i += maxOffset * vcount;\n\n            }\n\n        }\n\n    };\n\n    function Polygons () {\n\n        this.material = \"\";\n        this.count = 0;\n        this.inputs = [];\n        this.vcount = null;\n        this.p = [];\n        this.geometry = new THREE.Geometry();\n\n    }\n\n    Polygons.prototype.setVertices = function ( vertices ) {\n\n        for ( var i = 0; i < this.inputs.length; i ++ ) {\n\n            if ( this.inputs[ i ].source === vertices.id ) {\n\n                this.inputs[ i ].source = vertices.input[ 'POSITION' ].source;\n\n            }\n\n        }\n\n    };\n\n    Polygons.prototype.parse = function ( element ) {\n\n        this.material = element.getAttribute( 'material' );\n        this.count = _attr_as_int( element, 'count', 0 );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            switch ( child.nodeName ) {\n\n                case 'input':\n\n                    this.inputs.push( ( new Input() ).parse( element.childNodes[ i ] ) );\n                    break;\n\n                case 'vcount':\n\n                    this.vcount = _ints( child.textContent );\n                    break;\n\n                case 'p':\n\n                    this.p.push( _ints( child.textContent ) );\n                    break;\n\n                case 'ph':\n\n                    console.warn( 'polygon holes not yet supported!' );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Polylist () {\n\n        Polygons.call( this );\n\n        this.vcount = [];\n\n    }\n\n    Polylist.prototype = Object.create( Polygons.prototype );\n    Polylist.prototype.constructor = Polylist;\n\n    function LineStrips() {\n\n        Polygons.call( this );\n\n        this.vcount = 1;\n\n    }\n\n    LineStrips.prototype = Object.create( Polygons.prototype );\n    LineStrips.prototype.constructor = LineStrips;\n\n    function Triangles () {\n\n        Polygons.call( this );\n\n        this.vcount = 3;\n\n    }\n\n    Triangles.prototype = Object.create( Polygons.prototype );\n    Triangles.prototype.constructor = Triangles;\n\n    function Accessor() {\n\n        this.source = \"\";\n        this.count = 0;\n        this.stride = 0;\n        this.params = [];\n\n    }\n\n    Accessor.prototype.parse = function ( element ) {\n\n        this.params = [];\n        this.source = element.getAttribute( 'source' );\n        this.count = _attr_as_int( element, 'count', 0 );\n        this.stride = _attr_as_int( element, 'stride', 0 );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            if ( child.nodeName === 'param' ) {\n\n                var param = {};\n                param[ 'name' ] = child.getAttribute( 'name' );\n                param[ 'type' ] = child.getAttribute( 'type' );\n                this.params.push( param );\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Vertices() {\n\n        this.input = {};\n\n    }\n\n    Vertices.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute('id');\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            if ( element.childNodes[i].nodeName === 'input' ) {\n\n                var input = ( new Input() ).parse( element.childNodes[ i ] );\n                this.input[ input.semantic ] = input;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Input () {\n\n        this.semantic = \"\";\n        this.offset = 0;\n        this.source = \"\";\n        this.set = 0;\n\n    }\n\n    Input.prototype.parse = function ( element ) {\n\n        this.semantic = element.getAttribute('semantic');\n        this.source = element.getAttribute('source').replace(/^#/, '');\n        this.set = _attr_as_int(element, 'set', -1);\n        this.offset = _attr_as_int(element, 'offset', 0);\n\n        if ( this.semantic === 'TEXCOORD' && this.set < 0 ) {\n\n            this.set = 0;\n\n        }\n\n        return this;\n\n    };\n\n    function Source ( id ) {\n\n        this.id = id;\n        this.type = null;\n\n    }\n\n    Source.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute( 'id' );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n\n            switch ( child.nodeName ) {\n\n                case 'bool_array':\n\n                    this.data = _bools( child.textContent );\n                    this.type = child.nodeName;\n                    break;\n\n                case 'float_array':\n\n                    this.data = _floats( child.textContent );\n                    this.type = child.nodeName;\n                    break;\n\n                case 'int_array':\n\n                    this.data = _ints( child.textContent );\n                    this.type = child.nodeName;\n                    break;\n\n                case 'IDREF_array':\n                case 'Name_array':\n\n                    this.data = _strings( child.textContent );\n                    this.type = child.nodeName;\n                    break;\n\n                case 'technique_common':\n\n                    for ( var j = 0; j < child.childNodes.length; j ++ ) {\n\n                        if ( child.childNodes[ j ].nodeName === 'accessor' ) {\n\n                            this.accessor = ( new Accessor() ).parse( child.childNodes[ j ] );\n                            break;\n\n                        }\n                    }\n                    break;\n\n                default:\n                    // console.log(child.nodeName);\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    Source.prototype.read = function () {\n\n        var result = [];\n\n        //for (var i = 0; i < this.accessor.params.length; i++) {\n\n        var param = this.accessor.params[ 0 ];\n\n            //console.log(param.name + \" \" + param.type);\n\n        switch ( param.type ) {\n\n            case 'IDREF':\n            case 'Name': case 'name':\n            case 'float':\n\n                return this.data;\n\n            case 'float4x4':\n\n                for ( var j = 0; j < this.data.length; j += 16 ) {\n\n                    var s = this.data.slice( j, j + 16 );\n                    var m = getConvertedMat4( s );\n                    result.push( m );\n                }\n\n                break;\n\n            default:\n\n                console.log( 'ColladaLoader: Source: Read dont know how to read ' + param.type + '.' );\n                break;\n\n        }\n\n        //}\n\n        return result;\n\n    };\n\n    function Material () {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.instance_effect = null;\n\n    }\n\n    Material.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute( 'id' );\n        this.name = element.getAttribute( 'name' );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            if ( element.childNodes[ i ].nodeName === 'instance_effect' ) {\n\n                this.instance_effect = ( new InstanceEffect() ).parse( element.childNodes[ i ] );\n                break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function ColorOrTexture () {\n\n        this.color = new THREE.Color();\n        this.color.setRGB( Math.random(), Math.random(), Math.random() );\n        this.color.a = 1.0;\n\n        this.texture = null;\n        this.texcoord = null;\n        this.texOpts = null;\n\n    }\n\n    ColorOrTexture.prototype.isColor = function () {\n\n        return ( this.texture === null );\n\n    };\n\n    ColorOrTexture.prototype.isTexture = function () {\n\n        return ( this.texture != null );\n\n    };\n\n    ColorOrTexture.prototype.parse = function ( element ) {\n\n        if (element.nodeName === 'transparent') {\n\n            this.opaque = element.getAttribute('opaque');\n\n        }\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'color':\n\n                    var rgba = _floats( child.textContent );\n                    this.color = new THREE.Color();\n                    this.color.setRGB( rgba[0], rgba[1], rgba[2] );\n                    this.color.a = rgba[3];\n                    break;\n\n                case 'texture':\n\n                    this.texture = child.getAttribute('texture');\n                    this.texcoord = child.getAttribute('texcoord');\n                    // Defaults from:\n                    // https://collada.org/mediawiki/index.php/Maya_texture_placement_MAYA_extension\n                    this.texOpts = {\n                        offsetU: 0,\n                        offsetV: 0,\n                        repeatU: 1,\n                        repeatV: 1,\n                        wrapU: 1,\n                        wrapV: 1\n                    };\n                    this.parseTexture( child );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    ColorOrTexture.prototype.parseTexture = function ( element ) {\n\n        if ( ! element.childNodes ) return this;\n\n        // This should be supported by Maya, 3dsMax, and MotionBuilder\n\n        if ( element.childNodes[1] && element.childNodes[1].nodeName === 'extra' ) {\n\n            element = element.childNodes[1];\n\n            if ( element.childNodes[1] && element.childNodes[1].nodeName === 'technique' ) {\n\n                element = element.childNodes[1];\n\n            }\n\n        }\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            switch ( child.nodeName ) {\n\n                case 'offsetU':\n                case 'offsetV':\n                case 'repeatU':\n                case 'repeatV':\n\n                    this.texOpts[ child.nodeName ] = parseFloat( child.textContent );\n\n                    break;\n\n                case 'wrapU':\n                case 'wrapV':\n\n                    // some dae have a value of true which becomes NaN via parseInt\n\n                    if ( child.textContent.toUpperCase() === 'TRUE' ) {\n\n                        this.texOpts[ child.nodeName ] = 1;\n\n                    } else {\n\n                        this.texOpts[ child.nodeName ] = parseInt( child.textContent );\n\n                    }\n                    break;\n\n                default:\n\n                    this.texOpts[ child.nodeName ] = child.textContent;\n\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Shader ( type, effect ) {\n\n        this.type = type;\n        this.effect = effect;\n        this.material = null;\n\n    }\n\n    Shader.prototype.parse = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'emission':\n                case 'diffuse':\n                case 'specular':\n                case 'transparent':\n\n                    this[ child.nodeName ] = ( new ColorOrTexture() ).parse( child );\n                    break;\n\n                case 'bump':\n\n                    // If 'bumptype' is 'heightfield', create a 'bump' property\n                    // Else if 'bumptype' is 'normalmap', create a 'normal' property\n                    // (Default to 'bump')\n                    var bumpType = child.getAttribute( 'bumptype' );\n                    if ( bumpType ) {\n                        if ( bumpType.toLowerCase() === \"heightfield\" ) {\n                            this[ 'bump' ] = ( new ColorOrTexture() ).parse( child );\n                        } else if ( bumpType.toLowerCase() === \"normalmap\" ) {\n                            this[ 'normal' ] = ( new ColorOrTexture() ).parse( child );\n                        } else {\n                            console.error( \"Shader.prototype.parse: Invalid value for attribute 'bumptype' (\" + bumpType + \") - valid bumptypes are 'HEIGHTFIELD' and 'NORMALMAP' - defaulting to 'HEIGHTFIELD'\" );\n                            this[ 'bump' ] = ( new ColorOrTexture() ).parse( child );\n                        }\n                    } else {\n                        console.warn( \"Shader.prototype.parse: Attribute 'bumptype' missing from bump node - defaulting to 'HEIGHTFIELD'\" );\n                        this[ 'bump' ] = ( new ColorOrTexture() ).parse( child );\n                    }\n\n                    break;\n\n                case 'shininess':\n                case 'reflectivity':\n                case 'index_of_refraction':\n                case 'transparency':\n\n                    var f = child.querySelectorAll('float');\n\n                    if ( f.length > 0 )\n                        this[ child.nodeName ] = parseFloat( f[ 0 ].textContent );\n\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        this.create();\n        return this;\n\n    };\n\n    Shader.prototype.create = function() {\n\n        var props = {};\n\n        var transparent = false;\n\n        if (this['transparency'] !== undefined && this['transparent'] !== undefined) {\n            // convert transparent color RBG to average value\n            var transparentColor = this['transparent'];\n            var transparencyLevel = (this.transparent.color.r + this.transparent.color.g + this.transparent.color.b) / 3 * this.transparency;\n\n            if (transparencyLevel > 0) {\n                transparent = true;\n                props[ 'transparent' ] = true;\n                props[ 'opacity' ] = 1 - transparencyLevel;\n\n            }\n\n        }\n\n        var keys = {\n            'diffuse':'map',\n            'ambient':'lightMap',\n            'specular':'specularMap',\n            'emission':'emissionMap',\n            'bump':'bumpMap',\n            'normal':'normalMap'\n            };\n\n        for ( var prop in this ) {\n\n            switch ( prop ) {\n\n                case 'ambient':\n                case 'emission':\n                case 'diffuse':\n                case 'specular':\n                case 'bump':\n                case 'normal':\n\n                    var cot = this[ prop ];\n\n                    if ( cot instanceof ColorOrTexture ) {\n\n                        if ( cot.isTexture() ) {\n\n                            var samplerId = cot.texture;\n                            var surfaceId = this.effect.sampler[samplerId];\n\n                            if ( surfaceId !== undefined && surfaceId.source !== undefined ) {\n\n                                var surface = this.effect.surface[surfaceId.source];\n\n                                if ( surface !== undefined ) {\n\n                                    var image = images[ surface.init_from ];\n\n                                    if ( image ) {\n\n                                        var url = baseUrl + image.init_from;\n\n                                        var texture;\n                                        var loader = THREE.Loader.Handlers.get( url );\n\n                                        if ( loader !== null ) {\n\n                                            texture = loader.load( url );\n\n                                        } else {\n\n                                            texture = new THREE.Texture();\n\n                                            loadTextureImage( texture, url );\n\n                                        }\n\n                                        texture.wrapS = cot.texOpts.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                        texture.wrapT = cot.texOpts.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n                                        texture.offset.x = cot.texOpts.offsetU;\n                                        texture.offset.y = cot.texOpts.offsetV;\n                                        texture.repeat.x = cot.texOpts.repeatU;\n                                        texture.repeat.y = cot.texOpts.repeatV;\n                                        props[keys[prop]] = texture;\n\n                                        // Texture with baked lighting?\n                                        if (prop === 'emission') props['emissive'] = 0xffffff;\n\n                                    }\n\n                                }\n\n                            }\n\n                        } else if ( prop === 'diffuse' || !transparent ) {\n\n                            if ( prop === 'emission' ) {\n\n                                props[ 'emissive' ] = cot.color.getHex();\n\n                            } else {\n\n                                props[ prop ] = cot.color.getHex();\n\n                            }\n\n                        }\n\n                    }\n\n                    break;\n\n                case 'shininess':\n\n                    props[ prop ] = this[ prop ];\n                    break;\n\n                case 'reflectivity':\n\n                    props[ prop ] = this[ prop ];\n                    if ( props[ prop ] > 0.0 ) props['envMap'] = options.defaultEnvMap;\n                    props['combine'] = THREE.MixOperation;\t//mix regular shading with reflective component\n                    break;\n\n                case 'index_of_refraction':\n\n                    props[ 'refractionRatio' ] = this[ prop ]; //TODO: \"index_of_refraction\" becomes \"refractionRatio\" in shader, but I'm not sure if the two are actually comparable\n                    if ( this[ prop ] !== 1.0 ) props['envMap'] = options.defaultEnvMap;\n                    break;\n\n                case 'transparency':\n                    // gets figured out up top\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        props[ 'shading' ] = preferredShading;\n        props[ 'side' ] = this.effect.doubleSided ? THREE.DoubleSide : THREE.FrontSide;\n\n        if ( props.diffuse !== undefined ) {\n\n            props.color = props.diffuse;\n            delete props.diffuse;\n\n        }\n\n        switch ( this.type ) {\n\n            case 'constant':\n\n                if (props.emissive != undefined) props.color = props.emissive;\n                this.material = new THREE.MeshBasicMaterial( props );\n                break;\n\n            case 'phong':\n            case 'blinn':\n\n                this.material = new THREE.MeshPhongMaterial( props );\n                break;\n\n            case 'lambert':\n            default:\n\n                this.material = new THREE.MeshLambertMaterial( props );\n                break;\n\n        }\n\n        return this.material;\n\n    };\n\n    function Surface ( effect ) {\n\n        this.effect = effect;\n        this.init_from = null;\n        this.format = null;\n\n    }\n\n    Surface.prototype.parse = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'init_from':\n\n                    this.init_from = child.textContent;\n                    break;\n\n                case 'format':\n\n                    this.format = child.textContent;\n                    break;\n\n                default:\n\n                    console.log( \"unhandled Surface prop: \" + child.nodeName );\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Sampler2D ( effect ) {\n\n        this.effect = effect;\n        this.source = null;\n        this.wrap_s = null;\n        this.wrap_t = null;\n        this.minfilter = null;\n        this.magfilter = null;\n        this.mipfilter = null;\n\n    }\n\n    Sampler2D.prototype.parse = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'source':\n\n                    this.source = child.textContent;\n                    break;\n\n                case 'minfilter':\n\n                    this.minfilter = child.textContent;\n                    break;\n\n                case 'magfilter':\n\n                    this.magfilter = child.textContent;\n                    break;\n\n                case 'mipfilter':\n\n                    this.mipfilter = child.textContent;\n                    break;\n\n                case 'wrap_s':\n\n                    this.wrap_s = child.textContent;\n                    break;\n\n                case 'wrap_t':\n\n                    this.wrap_t = child.textContent;\n                    break;\n\n                default:\n\n                    console.log( \"unhandled Sampler2D prop: \" + child.nodeName );\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Effect () {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.shader = null;\n        this.surface = {};\n        this.sampler = {};\n\n    }\n\n    Effect.prototype.create = function () {\n\n        if ( this.shader === null ) {\n\n            return null;\n\n        }\n\n    };\n\n    Effect.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute( 'id' );\n        this.name = element.getAttribute( 'name' );\n\n        extractDoubleSided( this, element );\n\n        this.shader = null;\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'profile_COMMON':\n\n                    this.parseTechnique( this.parseProfileCOMMON( child ) );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    Effect.prototype.parseNewparam = function ( element ) {\n\n        var sid = element.getAttribute( 'sid' );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'surface':\n\n                    this.surface[sid] = ( new Surface( this ) ).parse( child );\n                    break;\n\n                case 'sampler2D':\n\n                    this.sampler[sid] = ( new Sampler2D( this ) ).parse( child );\n                    break;\n\n                case 'extra':\n\n                    break;\n\n                default:\n\n                    console.log( child.nodeName );\n                    break;\n\n            }\n\n        }\n\n    };\n\n    Effect.prototype.parseProfileCOMMON = function ( element ) {\n\n        var technique;\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'profile_COMMON':\n\n                    this.parseProfileCOMMON( child );\n                    break;\n\n                case 'technique':\n\n                    technique = child;\n                    break;\n\n                case 'newparam':\n\n                    this.parseNewparam( child );\n                    break;\n\n                case 'image':\n\n                    var _image = ( new _Image() ).parse( child );\n                    images[ _image.id ] = _image;\n                    break;\n\n                case 'extra':\n                    break;\n\n                default:\n\n                    console.log( child.nodeName );\n                    break;\n\n            }\n\n        }\n\n        return technique;\n\n    };\n\n    Effect.prototype.parseTechnique = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'constant':\n                case 'lambert':\n                case 'blinn':\n                case 'phong':\n\n                    this.shader = ( new Shader( child.nodeName, this ) ).parse( child );\n                    break;\n                case 'extra':\n                    this.parseExtra(child);\n                    break;\n                default:\n                    break;\n\n            }\n\n        }\n\n    };\n\n    Effect.prototype.parseExtra = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'technique':\n                    this.parseExtraTechnique( child );\n                    break;\n                default:\n                    break;\n\n            }\n\n        }\n\n    };\n\n    Effect.prototype.parseExtraTechnique = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[i];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'bump':\n                    this.shader.parse( element );\n                    break;\n                default:\n                    break;\n\n            }\n\n        }\n\n    };\n\n    function InstanceEffect () {\n\n        this.url = \"\";\n\n    }\n\n    InstanceEffect.prototype.parse = function ( element ) {\n\n        this.url = element.getAttribute( 'url' ).replace( /^#/, '' );\n        return this;\n\n    };\n\n    function Animation() {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.source = {};\n        this.sampler = [];\n        this.channel = [];\n\n    }\n\n    Animation.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute( 'id' );\n        this.name = element.getAttribute( 'name' );\n        this.source = {};\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'animation':\n\n                    var anim = ( new Animation() ).parse( child );\n\n                    for ( var src in anim.source ) {\n\n                        this.source[ src ] = anim.source[ src ];\n\n                    }\n\n                    for ( var j = 0; j < anim.channel.length; j ++ ) {\n\n                        this.channel.push( anim.channel[ j ] );\n                        this.sampler.push( anim.sampler[ j ] );\n\n                    }\n\n                    break;\n\n                case 'source':\n\n                    var src = ( new Source() ).parse( child );\n                    this.source[ src.id ] = src;\n                    break;\n\n                case 'sampler':\n\n                    this.sampler.push( ( new Sampler( this ) ).parse( child ) );\n                    break;\n\n                case 'channel':\n\n                    this.channel.push( ( new Channel( this ) ).parse( child ) );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Channel( animation ) {\n\n        this.animation = animation;\n        this.source = \"\";\n        this.target = \"\";\n        this.fullSid = null;\n        this.sid = null;\n        this.dotSyntax = null;\n        this.arrSyntax = null;\n        this.arrIndices = null;\n        this.member = null;\n\n    }\n\n    Channel.prototype.parse = function ( element ) {\n\n        this.source = element.getAttribute( 'source' ).replace( /^#/, '' );\n        this.target = element.getAttribute( 'target' );\n\n        var parts = this.target.split( '/' );\n\n        var id = parts.shift();\n        var sid = parts.shift();\n\n        var dotSyntax = ( sid.indexOf(\".\") >= 0 );\n        var arrSyntax = ( sid.indexOf(\"(\") >= 0 );\n\n        if ( dotSyntax ) {\n\n            parts = sid.split(\".\");\n            this.sid = parts.shift();\n            this.member = parts.shift();\n\n        } else if ( arrSyntax ) {\n\n            var arrIndices = sid.split(\"(\");\n            this.sid = arrIndices.shift();\n\n            for (var j = 0; j < arrIndices.length; j ++ ) {\n\n                arrIndices[j] = parseInt( arrIndices[j].replace(/\\)/, '') );\n\n            }\n\n            this.arrIndices = arrIndices;\n\n        } else {\n\n            this.sid = sid;\n\n        }\n\n        this.fullSid = sid;\n        this.dotSyntax = dotSyntax;\n        this.arrSyntax = arrSyntax;\n\n        return this;\n\n    };\n\n    function Sampler ( animation ) {\n\n        this.id = \"\";\n        this.animation = animation;\n        this.inputs = [];\n        this.input = null;\n        this.output = null;\n        this.strideOut = null;\n        this.interpolation = null;\n        this.startTime = null;\n        this.endTime = null;\n        this.duration = 0;\n\n    }\n\n    Sampler.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute( 'id' );\n        this.inputs = [];\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'input':\n\n                    this.inputs.push( (new Input()).parse( child ) );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    Sampler.prototype.create = function () {\n\n        for ( var i = 0; i < this.inputs.length; i ++ ) {\n\n            var input = this.inputs[ i ];\n            var source = this.animation.source[ input.source ];\n\n            switch ( input.semantic ) {\n\n                case 'INPUT':\n\n                    this.input = source.read();\n                    break;\n\n                case 'OUTPUT':\n\n                    this.output = source.read();\n                    this.strideOut = source.accessor.stride;\n                    break;\n\n                case 'INTERPOLATION':\n\n                    this.interpolation = source.read();\n                    break;\n\n                case 'IN_TANGENT':\n\n                    break;\n\n                case 'OUT_TANGENT':\n\n                    break;\n\n                default:\n\n                    console.log(input.semantic);\n                    break;\n\n            }\n\n        }\n\n        this.startTime = 0;\n        this.endTime = 0;\n        this.duration = 0;\n\n        if ( this.input.length ) {\n\n            this.startTime = 100000000;\n            this.endTime = -100000000;\n\n            for ( var i = 0; i < this.input.length; i ++ ) {\n\n                this.startTime = Math.min( this.startTime, this.input[ i ] );\n                this.endTime = Math.max( this.endTime, this.input[ i ] );\n\n            }\n\n            this.duration = this.endTime - this.startTime;\n\n        }\n\n    };\n\n    Sampler.prototype.getData = function ( type, ndx, member ) {\n\n        var data;\n\n        if ( type === 'matrix' && this.strideOut === 16 ) {\n\n            data = this.output[ ndx ];\n\n        } else if ( this.strideOut > 1 ) {\n\n            data = [];\n            ndx *= this.strideOut;\n\n            for ( var i = 0; i < this.strideOut; ++ i ) {\n\n                data[ i ] = this.output[ ndx + i ];\n\n            }\n\n            if ( this.strideOut === 3 ) {\n\n                switch ( type ) {\n\n                    case 'rotate':\n                    case 'translate':\n\n                        fixCoords( data, -1 );\n                        break;\n\n                    case 'scale':\n\n                        fixCoords( data, 1 );\n                        break;\n\n                }\n\n            } else if ( this.strideOut === 4 && type === 'matrix' ) {\n\n                fixCoords( data, -1 );\n\n            }\n\n        } else {\n\n            data = this.output[ ndx ];\n\n            if ( member && type === 'translate' ) {\n                data = getConvertedTranslation( member, data );\n            }\n\n        }\n\n        return data;\n\n    };\n\n    function Key ( time ) {\n\n        this.targets = [];\n        this.time = time;\n\n    }\n\n    Key.prototype.addTarget = function ( fullSid, transform, member, data ) {\n\n        this.targets.push( {\n            sid: fullSid,\n            member: member,\n            transform: transform,\n            data: data\n        } );\n\n    };\n\n    Key.prototype.apply = function ( opt_sid ) {\n\n        for ( var i = 0; i < this.targets.length; ++ i ) {\n\n            var target = this.targets[ i ];\n\n            if ( !opt_sid || target.sid === opt_sid ) {\n\n                target.transform.update( target.data, target.member );\n\n            }\n\n        }\n\n    };\n\n    Key.prototype.getTarget = function ( fullSid ) {\n\n        for ( var i = 0; i < this.targets.length; ++ i ) {\n\n            if ( this.targets[ i ].sid === fullSid ) {\n\n                return this.targets[ i ];\n\n            }\n\n        }\n\n        return null;\n\n    };\n\n    Key.prototype.hasTarget = function ( fullSid ) {\n\n        for ( var i = 0; i < this.targets.length; ++ i ) {\n\n            if ( this.targets[ i ].sid === fullSid ) {\n\n                return true;\n\n            }\n\n        }\n\n        return false;\n\n    };\n\n    // TODO: Currently only doing linear interpolation. Should support full COLLADA spec.\n    Key.prototype.interpolate = function ( nextKey, time ) {\n\n        for ( var i = 0, l = this.targets.length; i < l; i ++ ) {\n\n            var target = this.targets[ i ],\n                nextTarget = nextKey.getTarget( target.sid ),\n                data;\n\n            if ( target.transform.type !== 'matrix' && nextTarget ) {\n\n                var scale = ( time - this.time ) / ( nextKey.time - this.time ),\n                    nextData = nextTarget.data,\n                    prevData = target.data;\n\n                if ( scale < 0 ) scale = 0;\n                if ( scale > 1 ) scale = 1;\n\n                if ( prevData.length ) {\n\n                    data = [];\n\n                    for ( var j = 0; j < prevData.length; ++ j ) {\n\n                        data[ j ] = prevData[ j ] + ( nextData[ j ] - prevData[ j ] ) * scale;\n\n                    }\n\n                } else {\n\n                    data = prevData + ( nextData - prevData ) * scale;\n\n                }\n\n            } else {\n\n                data = target.data;\n\n            }\n\n            target.transform.update( data, target.member );\n\n        }\n\n    };\n\n    // Camera\n    function Camera() {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.technique = \"\";\n\n    }\n\n    Camera.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute( 'id' );\n        this.name = element.getAttribute( 'name' );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'optics':\n\n                    this.parseOptics( child );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    Camera.prototype.parseOptics = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            if ( element.childNodes[ i ].nodeName === 'technique_common' ) {\n\n                var technique = element.childNodes[ i ];\n\n                for ( var j = 0; j < technique.childNodes.length; j ++ ) {\n\n                    this.technique = technique.childNodes[ j ].nodeName;\n\n                    if ( this.technique === 'perspective' ) {\n\n                        var perspective = technique.childNodes[ j ];\n\n                        for ( var k = 0; k < perspective.childNodes.length; k ++ ) {\n\n                            var param = perspective.childNodes[ k ];\n\n                            switch ( param.nodeName ) {\n\n                                case 'yfov':\n                                    this.yfov = param.textContent;\n                                    break;\n                                case 'xfov':\n                                    this.xfov = param.textContent;\n                                    break;\n                                case 'znear':\n                                    this.znear = param.textContent;\n                                    break;\n                                case 'zfar':\n                                    this.zfar = param.textContent;\n                                    break;\n                                case 'aspect_ratio':\n                                    this.aspect_ratio = param.textContent;\n                                    break;\n\n                            }\n\n                        }\n\n                    } else if ( this.technique === 'orthographic' ) {\n\n                        var orthographic = technique.childNodes[ j ];\n\n                        for ( var k = 0; k < orthographic.childNodes.length; k ++ ) {\n\n                            var param = orthographic.childNodes[ k ];\n\n                            switch ( param.nodeName ) {\n\n                                case 'xmag':\n                                    this.xmag = param.textContent;\n                                    break;\n                                case 'ymag':\n                                    this.ymag = param.textContent;\n                                    break;\n                                case 'znear':\n                                    this.znear = param.textContent;\n                                    break;\n                                case 'zfar':\n                                    this.zfar = param.textContent;\n                                    break;\n                                case 'aspect_ratio':\n                                    this.aspect_ratio = param.textContent;\n                                    break;\n\n                            }\n\n                        }\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function InstanceCamera() {\n\n        this.url = \"\";\n\n    }\n\n    InstanceCamera.prototype.parse = function ( element ) {\n\n        this.url = element.getAttribute('url').replace(/^#/, '');\n\n        return this;\n\n    };\n\n    // Light\n\n    function Light() {\n\n        this.id = \"\";\n        this.name = \"\";\n        this.technique = \"\";\n\n    }\n\n    Light.prototype.parse = function ( element ) {\n\n        this.id = element.getAttribute( 'id' );\n        this.name = element.getAttribute( 'name' );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'technique_common':\n\n                    this.parseCommon( child );\n                    break;\n\n                case 'technique':\n\n                    this.parseTechnique( child );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    Light.prototype.parseCommon = function ( element ) {\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            switch ( element.childNodes[ i ].nodeName ) {\n\n                case 'directional':\n                case 'point':\n                case 'spot':\n                case 'ambient':\n\n                    this.technique = element.childNodes[ i ].nodeName;\n\n                    var light = element.childNodes[ i ];\n\n                    for ( var j = 0; j < light.childNodes.length; j ++ ) {\n\n                        var child = light.childNodes[j];\n\n                        switch ( child.nodeName ) {\n\n                            case 'color':\n\n                                var rgba = _floats( child.textContent );\n                                this.color = new THREE.Color(0);\n                                this.color.setRGB( rgba[0], rgba[1], rgba[2] );\n                                this.color.a = rgba[3];\n                                break;\n\n                            case 'falloff_angle':\n\n                                this.falloff_angle = parseFloat( child.textContent );\n                                break;\n\n                            case 'quadratic_attenuation':\n                                var f = parseFloat( child.textContent );\n                                this.distance = f ? Math.sqrt( 1 / f ) : 0;\n                        }\n\n                    }\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    Light.prototype.parseTechnique = function ( element ) {\n\n        this.profile = element.getAttribute( 'profile' );\n\n        for ( var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n\n            switch ( child.nodeName ) {\n\n                case 'intensity':\n\n                    this.intensity = parseFloat(child.textContent);\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function InstanceLight() {\n\n        this.url = \"\";\n\n    }\n\n    InstanceLight.prototype.parse = function ( element ) {\n\n        this.url = element.getAttribute('url').replace(/^#/, '');\n\n        return this;\n\n    };\n\n    function KinematicsModel( ) {\n\n        this.id = '';\n        this.name = '';\n        this.joints = [];\n        this.links = [];\n\n    }\n\n    KinematicsModel.prototype.parse = function( element ) {\n\n        this.id = element.getAttribute('id');\n        this.name = element.getAttribute('name');\n        this.joints = [];\n        this.links = [];\n\n        for (var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'technique_common':\n\n                    this.parseCommon(child);\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    KinematicsModel.prototype.parseCommon = function( element ) {\n\n        for (var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( element.childNodes[ i ].nodeName ) {\n\n                case 'joint':\n                    this.joints.push( (new Joint()).parse(child) );\n                    break;\n\n                case 'link':\n                    this.links.push( (new Link()).parse(child) );\n                    break;\n\n                default:\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Joint( ) {\n\n        this.sid = '';\n        this.name = '';\n        this.axis = new THREE.Vector3();\n        this.limits = {\n            min: 0,\n            max: 0\n        };\n        this.type = '';\n        this.static = false;\n        this.zeroPosition = 0.0;\n        this.middlePosition = 0.0;\n\n    }\n\n    Joint.prototype.parse = function( element ) {\n\n        this.sid = element.getAttribute('sid');\n        this.name = element.getAttribute('name');\n        this.axis = new THREE.Vector3();\n        this.limits = {\n            min: 0,\n            max: 0\n        };\n        this.type = '';\n        this.static = false;\n        this.zeroPosition = 0.0;\n        this.middlePosition = 0.0;\n\n        var axisElement = element.querySelector('axis');\n        var _axis = _floats(axisElement.textContent);\n        this.axis = getConvertedVec3(_axis, 0);\n\n        var min = element.querySelector('limits min') ? parseFloat(element.querySelector('limits min').textContent) : -360;\n        var max = element.querySelector('limits max') ? parseFloat(element.querySelector('limits max').textContent) : 360;\n\n        this.limits = {\n            min: min,\n            max: max\n        };\n\n        var jointTypes = [ 'prismatic', 'revolute' ];\n        for (var i = 0; i < jointTypes.length; i ++ ) {\n\n            var type = jointTypes[ i ];\n\n            var jointElement = element.querySelector(type);\n\n            if ( jointElement ) {\n\n                this.type = type;\n\n            }\n\n        }\n\n        // if the min is equal to or somehow greater than the max, consider the joint static\n        if ( this.limits.min >= this.limits.max ) {\n\n            this.static = true;\n\n        }\n\n        this.middlePosition = (this.limits.min + this.limits.max) / 2.0;\n        return this;\n\n    };\n\n    function Link( ) {\n\n        this.sid = '';\n        this.name = '';\n        this.transforms = [];\n        this.attachments = [];\n\n    }\n\n    Link.prototype.parse = function( element ) {\n\n        this.sid = element.getAttribute('sid');\n        this.name = element.getAttribute('name');\n        this.transforms = [];\n        this.attachments = [];\n\n        for (var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'attachment_full':\n                    this.attachments.push( (new Attachment()).parse(child) );\n                    break;\n\n                case 'rotate':\n                case 'translate':\n                case 'matrix':\n\n                    this.transforms.push( (new Transform()).parse(child) );\n                    break;\n\n                default:\n\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function Attachment( ) {\n\n        this.joint = '';\n        this.transforms = [];\n        this.links = [];\n\n    }\n\n    Attachment.prototype.parse = function( element ) {\n\n        this.joint = element.getAttribute('joint').split('/').pop();\n        this.links = [];\n\n        for (var i = 0; i < element.childNodes.length; i ++ ) {\n\n            var child = element.childNodes[ i ];\n            if ( child.nodeType != 1 ) continue;\n\n            switch ( child.nodeName ) {\n\n                case 'link':\n                    this.links.push( (new Link()).parse(child) );\n                    break;\n\n                case 'rotate':\n                case 'translate':\n                case 'matrix':\n\n                    this.transforms.push( (new Transform()).parse(child) );\n                    break;\n\n                default:\n\n                    break;\n\n            }\n\n        }\n\n        return this;\n\n    };\n\n    function _source( element ) {\n\n        var id = element.getAttribute( 'id' );\n\n        if ( sources[ id ] != undefined ) {\n\n            return sources[ id ];\n\n        }\n\n        sources[ id ] = ( new Source(id )).parse( element );\n        return sources[ id ];\n\n    }\n\n    function _nsResolver( nsPrefix ) {\n\n        if ( nsPrefix === \"dae\" ) {\n\n            return \"http://www.collada.org/2005/11/COLLADASchema\";\n\n        }\n\n        return null;\n\n    }\n\n    function _bools( str ) {\n\n        var raw = _strings( str );\n        var data = [];\n\n        for ( var i = 0, l = raw.length; i < l; i ++ ) {\n\n            data.push( (raw[i] === 'true' || raw[i] === '1') ? true : false );\n\n        }\n\n        return data;\n\n    }\n\n    function _floats( str ) {\n\n        var raw = _strings(str);\n        var data = [];\n\n        for ( var i = 0, l = raw.length; i < l; i ++ ) {\n\n            data.push( parseFloat( raw[ i ] ) );\n\n        }\n\n        return data;\n\n    }\n\n    function _ints( str ) {\n\n        var raw = _strings( str );\n        var data = [];\n\n        for ( var i = 0, l = raw.length; i < l; i ++ ) {\n\n            data.push( parseInt( raw[ i ], 10 ) );\n\n        }\n\n        return data;\n\n    }\n\n    function _strings( str ) {\n\n        return ( str.length > 0 ) ? _trimString( str ).split( /\\s+/ ) : [];\n\n    }\n\n    function _trimString( str ) {\n\n        return str.replace( /^\\s+/, \"\" ).replace( /\\s+$/, \"\" );\n\n    }\n\n    function _attr_as_float( element, name, defaultValue ) {\n\n        if ( element.hasAttribute( name ) ) {\n\n            return parseFloat( element.getAttribute( name ) );\n\n        } else {\n\n            return defaultValue;\n\n        }\n\n    }\n\n    function _attr_as_int( element, name, defaultValue ) {\n\n        if ( element.hasAttribute( name ) ) {\n\n            return parseInt( element.getAttribute( name ), 10) ;\n\n        } else {\n\n            return defaultValue;\n\n        }\n\n    }\n\n    function _attr_as_string( element, name, defaultValue ) {\n\n        if ( element.hasAttribute( name ) ) {\n\n            return element.getAttribute( name );\n\n        } else {\n\n            return defaultValue;\n\n        }\n\n    }\n\n    function _format_float( f, num ) {\n\n        if ( f === undefined ) {\n\n            var s = '0.';\n\n            while ( s.length < num + 2 ) {\n\n                s += '0';\n\n            }\n\n            return s;\n\n        }\n\n        num = num || 2;\n\n        var parts = f.toString().split( '.' );\n        parts[ 1 ] = parts.length > 1 ? parts[ 1 ].substr( 0, num ) : \"0\";\n\n        while ( parts[ 1 ].length < num ) {\n\n            parts[ 1 ] += '0';\n\n        }\n\n        return parts.join( '.' );\n\n    }\n\n    function loadTextureImage ( texture, url ) {\n\n        var loader = new THREE.ImageLoader();\n\n        loader.load( url, function ( image ) {\n\n            texture.image = image;\n            texture.needsUpdate = true;\n\n        } );\n\n    }\n\n    function extractDoubleSided( obj, element ) {\n\n        obj.doubleSided = false;\n\n        var node = element.querySelectorAll('extra double_sided')[0];\n\n        if ( node ) {\n\n            if ( node && parseInt( node.textContent, 10 ) === 1 ) {\n\n                obj.doubleSided = true;\n\n            }\n\n        }\n\n    }\n\n    // Up axis conversion\n\n    function setUpConversion() {\n\n        if ( options.convertUpAxis !== true || colladaUp === options.upAxis ) {\n\n            upConversion = null;\n\n        } else {\n\n            switch ( colladaUp ) {\n\n                case 'X':\n\n                    upConversion = options.upAxis === 'Y' ? 'XtoY' : 'XtoZ';\n                    break;\n\n                case 'Y':\n\n                    upConversion = options.upAxis === 'X' ? 'YtoX' : 'YtoZ';\n                    break;\n\n                case 'Z':\n\n                    upConversion = options.upAxis === 'X' ? 'ZtoX' : 'ZtoY';\n                    break;\n\n            }\n\n        }\n\n    }\n\n    function fixCoords( data, sign ) {\n\n        if ( options.convertUpAxis !== true || colladaUp === options.upAxis ) {\n\n            return;\n\n        }\n\n        switch ( upConversion ) {\n\n            case 'XtoY':\n\n                var tmp = data[ 0 ];\n                data[ 0 ] = sign * data[ 1 ];\n                data[ 1 ] = tmp;\n                break;\n\n            case 'XtoZ':\n\n                var tmp = data[ 2 ];\n                data[ 2 ] = data[ 1 ];\n                data[ 1 ] = data[ 0 ];\n                data[ 0 ] = tmp;\n                break;\n\n            case 'YtoX':\n\n                var tmp = data[ 0 ];\n                data[ 0 ] = data[ 1 ];\n                data[ 1 ] = sign * tmp;\n                break;\n\n            case 'YtoZ':\n\n                var tmp = data[ 1 ];\n                data[ 1 ] = sign * data[ 2 ];\n                data[ 2 ] = tmp;\n                break;\n\n            case 'ZtoX':\n\n                var tmp = data[ 0 ];\n                data[ 0 ] = data[ 1 ];\n                data[ 1 ] = data[ 2 ];\n                data[ 2 ] = tmp;\n                break;\n\n            case 'ZtoY':\n\n                var tmp = data[ 1 ];\n                data[ 1 ] = data[ 2 ];\n                data[ 2 ] = sign * tmp;\n                break;\n\n        }\n\n    }\n\n    function getConvertedTranslation( axis, data ) {\n\n        if ( options.convertUpAxis !== true || colladaUp === options.upAxis ) {\n\n            return data;\n\n        }\n\n        switch ( axis ) {\n            case 'X':\n                data = upConversion === 'XtoY' ? data * -1 : data;\n                break;\n            case 'Y':\n                data = upConversion === 'YtoZ' || upConversion === 'YtoX' ? data * -1 : data;\n                break;\n            case 'Z':\n                data = upConversion === 'ZtoY' ? data * -1 : data ;\n                break;\n            default:\n                break;\n        }\n\n        return data;\n    }\n\n    function getConvertedVec3( data, offset ) {\n\n        var arr = [ data[ offset ], data[ offset + 1 ], data[ offset + 2 ] ];\n        fixCoords( arr, -1 );\n        return new THREE.Vector3( arr[ 0 ], arr[ 1 ], arr[ 2 ] );\n\n    }\n\n    function getConvertedMat4( data ) {\n\n        if ( options.convertUpAxis ) {\n\n            // First fix rotation and scale\n\n            // Columns first\n            var arr = [ data[ 0 ], data[ 4 ], data[ 8 ] ];\n            fixCoords( arr, -1 );\n            data[ 0 ] = arr[ 0 ];\n            data[ 4 ] = arr[ 1 ];\n            data[ 8 ] = arr[ 2 ];\n            arr = [ data[ 1 ], data[ 5 ], data[ 9 ] ];\n            fixCoords( arr, -1 );\n            data[ 1 ] = arr[ 0 ];\n            data[ 5 ] = arr[ 1 ];\n            data[ 9 ] = arr[ 2 ];\n            arr = [ data[ 2 ], data[ 6 ], data[ 10 ] ];\n            fixCoords( arr, -1 );\n            data[ 2 ] = arr[ 0 ];\n            data[ 6 ] = arr[ 1 ];\n            data[ 10 ] = arr[ 2 ];\n            // Rows second\n            arr = [ data[ 0 ], data[ 1 ], data[ 2 ] ];\n            fixCoords( arr, -1 );\n            data[ 0 ] = arr[ 0 ];\n            data[ 1 ] = arr[ 1 ];\n            data[ 2 ] = arr[ 2 ];\n            arr = [ data[ 4 ], data[ 5 ], data[ 6 ] ];\n            fixCoords( arr, -1 );\n            data[ 4 ] = arr[ 0 ];\n            data[ 5 ] = arr[ 1 ];\n            data[ 6 ] = arr[ 2 ];\n            arr = [ data[ 8 ], data[ 9 ], data[ 10 ] ];\n            fixCoords( arr, -1 );\n            data[ 8 ] = arr[ 0 ];\n            data[ 9 ] = arr[ 1 ];\n            data[ 10 ] = arr[ 2 ];\n\n            // Now fix translation\n            arr = [ data[ 3 ], data[ 7 ], data[ 11 ] ];\n            fixCoords( arr, -1 );\n            data[ 3 ] = arr[ 0 ];\n            data[ 7 ] = arr[ 1 ];\n            data[ 11 ] = arr[ 2 ];\n\n        }\n\n        return new THREE.Matrix4().set(\n            data[0], data[1], data[2], data[3],\n            data[4], data[5], data[6], data[7],\n            data[8], data[9], data[10], data[11],\n            data[12], data[13], data[14], data[15]\n            );\n\n    }\n\n    function getConvertedIndex( index ) {\n\n        if ( index > -1 && index < 3 ) {\n\n            var members = [ 'X', 'Y', 'Z' ],\n                indices = { X: 0, Y: 1, Z: 2 };\n\n            index = getConvertedMember( members[ index ] );\n            index = indices[ index ];\n\n        }\n\n        return index;\n\n    }\n\n    function getConvertedMember( member ) {\n\n        if ( options.convertUpAxis ) {\n\n            switch ( member ) {\n\n                case 'X':\n\n                    switch ( upConversion ) {\n\n                        case 'XtoY':\n                        case 'XtoZ':\n                        case 'YtoX':\n\n                            member = 'Y';\n                            break;\n\n                        case 'ZtoX':\n\n                            member = 'Z';\n                            break;\n\n                    }\n\n                    break;\n\n                case 'Y':\n\n                    switch ( upConversion ) {\n\n                        case 'XtoY':\n                        case 'YtoX':\n                        case 'ZtoX':\n\n                            member = 'X';\n                            break;\n\n                        case 'XtoZ':\n                        case 'YtoZ':\n                        case 'ZtoY':\n\n                            member = 'Z';\n                            break;\n\n                    }\n\n                    break;\n\n                case 'Z':\n\n                    switch ( upConversion ) {\n\n                        case 'XtoZ':\n\n                            member = 'X';\n                            break;\n\n                        case 'YtoZ':\n                        case 'ZtoX':\n                        case 'ZtoY':\n\n                            member = 'Y';\n                            break;\n\n                    }\n\n                    break;\n\n            }\n\n        }\n\n        return member;\n\n    }\n\n    return {\n\n        load: load,\n        parse: parse,\n        setPreferredShading: setPreferredShading,\n        applySkin: applySkin,\n        geometries : geometries,\n        options: options\n\n    };\n\n};\n\nmodule.exports = ColladaLoader;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nString.prototype.escapeHtml = function () {\n  return this.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\n\nString.prototype.paddingLeft = function (paddingValue) {\n  return String(paddingValue + this).slice(-paddingValue.length);\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9hcHAvdXRpbC9TdHJpbmdFeHRlbnNpb25zLmpzP2EwYzMiXSwic291cmNlc0NvbnRlbnQiOlsiU3RyaW5nLnByb3RvdHlwZS5lc2NhcGVIdG1sID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIilcbiAgICAucmVwbGFjZSgvPC9nLCBcIiZsdDtcIilcbiAgICAucmVwbGFjZSgvPi9nLCBcIiZndDtcIilcbiAgICAucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIilcbiAgICAucmVwbGFjZSgvJy9nLCBcIiYjMDM5O1wiKTtcbn07XG5cblN0cmluZy5wcm90b3R5cGUucGFkZGluZ0xlZnQgPSBmdW5jdGlvbiAocGFkZGluZ1ZhbHVlKSB7XG4gIHJldHVybiBTdHJpbmcocGFkZGluZ1ZhbHVlICsgdGhpcylcbiAgICAuc2xpY2UoLXBhZGRpbmdWYWx1ZS5sZW5ndGgpO1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBzcmMvYXBwL3V0aWwvU3RyaW5nRXh0ZW5zaW9ucy5qcyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(124)();\n// imports\n\n\n// module\nexports.push([module.i, \"* {\\n    margin: 0;\\n    padding: 0;\\n}\\n\\nhtml, body {\\n    width: 100%;\\n    height: 100%;\\n}\\n\\n#camera-view canvas {\\n    display: block;\\n}\\n\\n#map-view canvas {\\n    display: block;\\n}\\n\\n#hud {\\n    position: absolute;\\n    top: 0px;\\n    left: 0px;\\n    height: 100%;\\n    opacity: 0.6;\\n    z-index: 100;\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: space-around;\\n}\\n\\n.hud-overlay {\\n    flex: 0 1 auto;\\n    display: flex;\\n    flex-direction: column;\\n    border-radius: 10px;\\n    border-style: ridge;\\n    background-color: lightgray;\\n    padding-top: 5px;\\n    padding-bottom: 5px;\\n    padding-left: 10px;\\n    padding-right: 10px;\\n}\\n\\n.hud-overlay .title {\\n    flex: 1 1 auto;\\n    text-align: center;\\n}\\n\\n#warp {\\n    display: flex;\\n    flex-direction: row;\\n    margin-bottom: 3px;\\n}\\n\\n#warp-values {\\n    display: flex;\\n    flex-direction: row;\\n    flex: 0 1 auto;\\n}\\n\\n#warp-description {\\n    flex: 0 1 auto;\\n}\\n\\n#time {\\n    flex: 0 1 auto;\\n}\\n\\n.warp-enabled {\\n    width: 0;\\n    height: 0;\\n    border-top: 7px solid transparent;\\n    border-bottom: 7px solid transparent;\\n    border-left: 12.124px solid green;\\n    margin-right: 3px;\\n}\\n\\n.warp-disabled {\\n    width: 0;\\n    height: 0;\\n    border-top: 7px solid transparent;\\n    border-bottom: 7px solid transparent;\\n    border-left: 12.124px solid white;\\n    margin-right: 3px;\\n}\\n\\n.orbital-entry {\\n    flex: 0 1 auto;\\n    display: flex;\\n    flex-direction: row;\\n    justify-content: space-between;\\n}\\n\\n.orbital-entry .label {\\n    flex: 0 1 auto;\\n    padding-right: 10px;\\n}\\n\\n.orbital-entry .value {\\n    flex: 0 1 auto;\\n}\\n\\n#orbital-name {\\n    text-transform: capitalize;\\n}\\n\\n#orbital-primary {\\n    text-transform: capitalize;\\n}\\n\\n.key-entry {\\n    flex: 0 1 auto;\\n    display: flex;\\n    flex-direction: row;\\n    align-items: center;\\n}\\n\\n.key-entry .keys {\\n    flex: 0 1 auto;\\n    display: flex;\\n    flex-direction: row;\\n}\\n\\n.keys .key {\\n    flex: 0 1 auto;\\n    margin-top: 5px;\\n    margin-bottom: 5px;\\n    border: black;\\n    border-width: 3px;\\n    border-style: outset;\\n    border-color: lightgrey;\\n    background-color: white;\\n    padding-right: 3px;\\n    padding-left: 3px;\\n    font-size: x-large;\\n}\\n\\n.keys .key+.key {\\n    margin-left: 5px;\\n}\\n\\n.key-entry .description {\\n    flex: 1 1 auto;\\n    padding-left: 5px;\\n}\\n\\n#stats {\\n    text-align: center;\\n    opacity: 0.9;\\n}\\n\\n#stats-overlay {\\n    flex: 0 1 auto;\\n    border-radius: 0px;\\n    border-style: none;\\n    background-color: unset;\\n    opacity: 1.0;\\n}\\n\", \"\"]);\n\n// exports\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTIzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2Nzcy9zdHlsZXMuY3NzPzZiZmQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5odG1sLCBib2R5IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuI2NhbWVyYS12aWV3IGNhbnZhcyB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbn1cXG5cXG4jbWFwLXZpZXcgY2FudmFzIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxufVxcblxcbiNodWQge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHRvcDogMHB4O1xcbiAgICBsZWZ0OiAwcHg7XFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgb3BhY2l0eTogMC42O1xcbiAgICB6LWluZGV4OiAxMDA7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbn1cXG5cXG4uaHVkLW92ZXJsYXkge1xcbiAgICBmbGV4OiAwIDEgYXV0bztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcXG4gICAgYm9yZGVyLXN0eWxlOiByaWRnZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1xcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xcbiAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDEwcHg7XFxufVxcblxcbi5odWQtb3ZlcmxheSAudGl0bGUge1xcbiAgICBmbGV4OiAxIDEgYXV0bztcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4jd2FycCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIG1hcmdpbi1ib3R0b206IDNweDtcXG59XFxuXFxuI3dhcnAtdmFsdWVzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleDogMCAxIGF1dG87XFxufVxcblxcbiN3YXJwLWRlc2NyaXB0aW9uIHtcXG4gICAgZmxleDogMCAxIGF1dG87XFxufVxcblxcbiN0aW1lIHtcXG4gICAgZmxleDogMCAxIGF1dG87XFxufVxcblxcbi53YXJwLWVuYWJsZWQge1xcbiAgICB3aWR0aDogMDtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLWxlZnQ6IDEyLjEyNHB4IHNvbGlkIGdyZWVuO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDNweDtcXG59XFxuXFxuLndhcnAtZGlzYWJsZWQge1xcbiAgICB3aWR0aDogMDtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBib3JkZXItdG9wOiA3cHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlci1ib3R0b206IDdweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyLWxlZnQ6IDEyLjEyNHB4IHNvbGlkIHdoaXRlO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDNweDtcXG59XFxuXFxuLm9yYml0YWwtZW50cnkge1xcbiAgICBmbGV4OiAwIDEgYXV0bztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbn1cXG5cXG4ub3JiaXRhbC1lbnRyeSAubGFiZWwge1xcbiAgICBmbGV4OiAwIDEgYXV0bztcXG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcXG59XFxuXFxuLm9yYml0YWwtZW50cnkgLnZhbHVlIHtcXG4gICAgZmxleDogMCAxIGF1dG87XFxufVxcblxcbiNvcmJpdGFsLW5hbWUge1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZTtcXG59XFxuXFxuI29yYml0YWwtcHJpbWFyeSB7XFxuICAgIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xcbn1cXG5cXG4ua2V5LWVudHJ5IHtcXG4gICAgZmxleDogMCAxIGF1dG87XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5rZXktZW50cnkgLmtleXMge1xcbiAgICBmbGV4OiAwIDEgYXV0bztcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuXFxuLmtleXMgLmtleSB7XFxuICAgIGZsZXg6IDAgMSBhdXRvO1xcbiAgICBtYXJnaW4tdG9wOiA1cHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcXG4gICAgYm9yZGVyOiBibGFjaztcXG4gICAgYm9yZGVyLXdpZHRoOiAzcHg7XFxuICAgIGJvcmRlci1zdHlsZTogb3V0c2V0O1xcbiAgICBib3JkZXItY29sb3I6IGxpZ2h0Z3JleTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDNweDtcXG4gICAgcGFkZGluZy1sZWZ0OiAzcHg7XFxuICAgIGZvbnQtc2l6ZTogeC1sYXJnZTtcXG59XFxuXFxuLmtleXMgLmtleSsua2V5IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcXG59XFxuXFxuLmtleS1lbnRyeSAuZGVzY3JpcHRpb24ge1xcbiAgICBmbGV4OiAxIDEgYXV0bztcXG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XFxufVxcblxcbiNzdGF0cyB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgb3BhY2l0eTogMC45O1xcbn1cXG5cXG4jc3RhdHMtb3ZlcmxheSB7XFxuICAgIGZsZXg6IDAgMSBhdXRvO1xcbiAgICBib3JkZXItcmFkaXVzOiAwcHg7XFxuICAgIGJvcmRlci1zdHlsZTogbm9uZTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdW5zZXQ7XFxuICAgIG9wYWNpdHk6IDEuMDtcXG59XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2Nzcy1sb2FkZXIhLi9zcmMvY3NzL3N0eWxlcy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDEyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 124 */
/***/ (function(module, exports) {

eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcz9kYTA0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXHJcbiovXHJcbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XHJcblx0dmFyIGxpc3QgPSBbXTtcclxuXHJcblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xyXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gdGhpc1tpXTtcclxuXHRcdFx0aWYoaXRlbVsyXSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgaXRlbVsxXSArIFwifVwiKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChpdGVtWzFdKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJlc3VsdC5qb2luKFwiXCIpO1xyXG5cdH07XHJcblxyXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XHJcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xyXG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXHJcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcclxuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XHJcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xyXG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXHJcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XHJcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcclxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcclxuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cclxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcclxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcclxuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcclxuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xyXG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9O1xyXG5cdHJldHVybiBsaXN0O1xyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDEyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 125 */
/***/ (function(module, exports) {

eval("module.exports = \"models/rock1/ArmGra05.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9yb2NrMS9Bcm1HcmEwNS5qcGc/NWFhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwibW9kZWxzL3JvY2sxL0FybUdyYTA1LmpwZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL21vZGVscy9yb2NrMS9Bcm1HcmEwNS5qcGdcbi8vIG1vZHVsZSBpZCA9IDEyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 126 */
/***/ (function(module, exports) {

eval("module.exports = \"img/earthbump.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9lYXJ0aGJ1bXAuanBnP2ZmMzQiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcImltZy9lYXJ0aGJ1bXAuanBnXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW1nL2VhcnRoYnVtcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 127 */
/***/ (function(module, exports) {

eval("module.exports = \"img/earthmap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9lYXJ0aG1hcC5qcGc/ZTQ3NCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiaW1nL2VhcnRobWFwLmpwZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2ltZy9lYXJ0aG1hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 128 */
/***/ (function(module, exports) {

eval("module.exports = \"img/earthspec.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9lYXJ0aHNwZWMuanBnPzdhZDAiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcImltZy9lYXJ0aHNwZWMuanBnXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW1nL2VhcnRoc3BlYy5qcGdcbi8vIG1vZHVsZSBpZCA9IDEyOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 129 */
/***/ (function(module, exports) {

eval("module.exports = \"img/jupitermap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTI5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9qdXBpdGVybWFwLmpwZz9jY2I1Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJpbWcvanVwaXRlcm1hcC5qcGdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pbWcvanVwaXRlcm1hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 130 */
/***/ (function(module, exports) {

eval("module.exports = \"img/lensflare.png\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9sZW5zZmxhcmUucG5nPzQ4NzkiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcImltZy9sZW5zZmxhcmUucG5nXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW1nL2xlbnNmbGFyZS5wbmdcbi8vIG1vZHVsZSBpZCA9IDEzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 131 */
/***/ (function(module, exports) {

eval("module.exports = \"img/marsmap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9tYXJzbWFwLmpwZz9kMWVhIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJpbWcvbWFyc21hcC5qcGdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pbWcvbWFyc21hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 132 */
/***/ (function(module, exports) {

eval("module.exports = \"img/mercurymap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9tZXJjdXJ5bWFwLmpwZz83NjYyIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJpbWcvbWVyY3VyeW1hcC5qcGdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pbWcvbWVyY3VyeW1hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 133 */
/***/ (function(module, exports) {

eval("module.exports = \"img/moonmap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9tb29ubWFwLmpwZz81NTA5Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJpbWcvbW9vbm1hcC5qcGdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pbWcvbW9vbm1hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 134 */
/***/ (function(module, exports) {

eval("module.exports = \"img/neptunemap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9uZXB0dW5lbWFwLmpwZz9jY2FmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCJpbWcvbmVwdHVuZW1hcC5qcGdcIjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9pbWcvbmVwdHVuZW1hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 135 */
/***/ (function(module, exports) {

eval("module.exports = \"img/plutomap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9wbHV0b21hcC5qcGc/ZjU3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiaW1nL3BsdXRvbWFwLmpwZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2ltZy9wbHV0b21hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 136 */
/***/ (function(module, exports) {

eval("module.exports = \"img/saturnmap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy9zYXR1cm5tYXAuanBnPzJjYWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcImltZy9zYXR1cm5tYXAuanBnXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW1nL3NhdHVybm1hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 137 */
/***/ (function(module, exports) {

eval("module.exports = \"img/uranusmap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy91cmFudXNtYXAuanBnPzY1YzUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcImltZy91cmFudXNtYXAuanBnXCI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaW1nL3VyYW51c21hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 138 */
/***/ (function(module, exports) {

eval("module.exports = \"img/venusmap.jpg\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ltZy92ZW51c21hcC5qcGc/YWE2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiaW1nL3ZlbnVzbWFwLmpwZ1wiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2ltZy92ZW51c21hcC5qcGdcbi8vIG1vZHVsZSBpZCA9IDEzOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 139 */
/***/ (function(module, exports) {

eval("module.exports = \"models/rock1.dae\";//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9yb2NrMS5kYWU/MzQ5ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwibW9kZWxzL3JvY2sxLmRhZVwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL21vZGVscy9yb2NrMS5kYWVcbi8vIG1vZHVsZSBpZCA9IDEzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 140 */,
/* 141 */
/***/ (function(module, exports) {

eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n\tmemoize = function(fn) {\r\n\t\tvar memo;\r\n\t\treturn function () {\r\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\r\n\t\t\treturn memo;\r\n\t\t};\r\n\t},\r\n\tisOldIE = memoize(function() {\r\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n\t}),\r\n\tgetHeadElement = memoize(function () {\r\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\r\n\t}),\r\n\tsingletonElement = null,\r\n\tsingletonCounter = 0,\r\n\tstyleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n\tif(typeof DEBUG !== \"undefined\" && DEBUG) {\r\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\r\n\t}\r\n\r\n\toptions = options || {};\r\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n\t// tags it will allow on a page\r\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\r\n\r\n\t// By default, add <style> tags to the bottom of <head>.\r\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\r\n\r\n\tvar styles = listToStyles(list);\r\n\taddStylesToDom(styles, options);\r\n\r\n\treturn function update(newList) {\r\n\t\tvar mayRemove = [];\r\n\t\tfor(var i = 0; i < styles.length; i++) {\r\n\t\t\tvar item = styles[i];\r\n\t\t\tvar domStyle = stylesInDom[item.id];\r\n\t\t\tdomStyle.refs--;\r\n\t\t\tmayRemove.push(domStyle);\r\n\t\t}\r\n\t\tif(newList) {\r\n\t\t\tvar newStyles = listToStyles(newList);\r\n\t\t\taddStylesToDom(newStyles, options);\r\n\t\t}\r\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\r\n\t\t\tvar domStyle = mayRemove[i];\r\n\t\t\tif(domStyle.refs === 0) {\r\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\r\n\t\t\t\t\tdomStyle.parts[j]();\r\n\t\t\t\tdelete stylesInDom[domStyle.id];\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n\tfor(var i = 0; i < styles.length; i++) {\r\n\t\tvar item = styles[i];\r\n\t\tvar domStyle = stylesInDom[item.id];\r\n\t\tif(domStyle) {\r\n\t\t\tdomStyle.refs++;\r\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\r\n\t\t\t}\r\n\t\t\tfor(; j < item.parts.length; j++) {\r\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvar parts = [];\r\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\r\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\r\n\t\t\t}\r\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n\tvar styles = [];\r\n\tvar newStyles = {};\r\n\tfor(var i = 0; i < list.length; i++) {\r\n\t\tvar item = list[i];\r\n\t\tvar id = item[0];\r\n\t\tvar css = item[1];\r\n\t\tvar media = item[2];\r\n\t\tvar sourceMap = item[3];\r\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\r\n\t\tif(!newStyles[id])\r\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\r\n\t\telse\r\n\t\t\tnewStyles[id].parts.push(part);\r\n\t}\r\n\treturn styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n\tvar head = getHeadElement();\r\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n\tif (options.insertAt === \"top\") {\r\n\t\tif(!lastStyleElementInsertedAtTop) {\r\n\t\t\thead.insertBefore(styleElement, head.firstChild);\r\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n\t\t} else {\r\n\t\t\thead.appendChild(styleElement);\r\n\t\t}\r\n\t\tstyleElementsInsertedAtTop.push(styleElement);\r\n\t} else if (options.insertAt === \"bottom\") {\r\n\t\thead.appendChild(styleElement);\r\n\t} else {\r\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\r\n\t}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n\tstyleElement.parentNode.removeChild(styleElement);\r\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n\tif(idx >= 0) {\r\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\r\n\t}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n\tvar styleElement = document.createElement(\"style\");\r\n\tstyleElement.type = \"text/css\";\r\n\tinsertStyleElement(options, styleElement);\r\n\treturn styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n\tvar linkElement = document.createElement(\"link\");\r\n\tlinkElement.rel = \"stylesheet\";\r\n\tinsertStyleElement(options, linkElement);\r\n\treturn linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n\tvar styleElement, update, remove;\r\n\r\n\tif (options.singleton) {\r\n\t\tvar styleIndex = singletonCounter++;\r\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n\t} else if(obj.sourceMap &&\r\n\t\ttypeof URL === \"function\" &&\r\n\t\ttypeof URL.createObjectURL === \"function\" &&\r\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\r\n\t\ttypeof Blob === \"function\" &&\r\n\t\ttypeof btoa === \"function\") {\r\n\t\tstyleElement = createLinkElement(options);\r\n\t\tupdate = updateLink.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t\tif(styleElement.href)\r\n\t\t\t\tURL.revokeObjectURL(styleElement.href);\r\n\t\t};\r\n\t} else {\r\n\t\tstyleElement = createStyleElement(options);\r\n\t\tupdate = applyToTag.bind(null, styleElement);\r\n\t\tremove = function() {\r\n\t\t\tremoveStyleElement(styleElement);\r\n\t\t};\r\n\t}\r\n\r\n\tupdate(obj);\r\n\r\n\treturn function updateStyle(newObj) {\r\n\t\tif(newObj) {\r\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n\t\t\t\treturn;\r\n\t\t\tupdate(obj = newObj);\r\n\t\t} else {\r\n\t\t\tremove();\r\n\t\t}\r\n\t};\r\n}\r\n\r\nvar replaceText = (function () {\r\n\tvar textStore = [];\r\n\r\n\treturn function (index, replacement) {\r\n\t\ttextStore[index] = replacement;\r\n\t\treturn textStore.filter(Boolean).join('\\n');\r\n\t};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n\tvar css = remove ? \"\" : obj.css;\r\n\r\n\tif (styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\r\n\t} else {\r\n\t\tvar cssNode = document.createTextNode(css);\r\n\t\tvar childNodes = styleElement.childNodes;\r\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n\t\tif (childNodes.length) {\r\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\r\n\t\t} else {\r\n\t\t\tstyleElement.appendChild(cssNode);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar media = obj.media;\r\n\r\n\tif(media) {\r\n\t\tstyleElement.setAttribute(\"media\", media)\r\n\t}\r\n\r\n\tif(styleElement.styleSheet) {\r\n\t\tstyleElement.styleSheet.cssText = css;\r\n\t} else {\r\n\t\twhile(styleElement.firstChild) {\r\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\r\n\t\t}\r\n\t\tstyleElement.appendChild(document.createTextNode(css));\r\n\t}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n\tvar css = obj.css;\r\n\tvar sourceMap = obj.sourceMap;\r\n\r\n\tif(sourceMap) {\r\n\t\t// http://stackoverflow.com/a/26603875\r\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\r\n\t}\r\n\r\n\tvar blob = new Blob([css], { type: \"text/css\" });\r\n\r\n\tvar oldSrc = linkElement.href;\r\n\r\n\tlinkElement.href = URL.createObjectURL(blob);\r\n\r\n\tif(oldSrc)\r\n\t\tURL.revokeObjectURL(oldSrc);\r\n}\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 142 */,
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(120);\n\nvar _CommonState = __webpack_require__(115);\n\nvar _CommonState2 = _interopRequireDefault(_CommonState);\n\nvar _SolarSystem = __webpack_require__(118);\n\nvar _SolarSystem2 = _interopRequireDefault(_SolarSystem);\n\nvar _Simulation = __webpack_require__(117);\n\nvar _Simulation2 = _interopRequireDefault(_Simulation);\n\nvar _CameraViewRenderer = __webpack_require__(114);\n\nvar _CameraViewRenderer2 = _interopRequireDefault(_CameraViewRenderer);\n\nvar _OrbitalMapRenderer = __webpack_require__(116);\n\nvar _OrbitalMapRenderer2 = _interopRequireDefault(_OrbitalMapRenderer);\n\nvar _TestingRenderer = __webpack_require__(119);\n\nvar _TestingRenderer2 = _interopRequireDefault(_TestingRenderer);\n\nvar _stats = __webpack_require__(3);\n\nvar _stats2 = _interopRequireDefault(_stats);\n\nvar _three = __webpack_require__(1);\n\nvar THREE = _interopRequireWildcard(_three);\n\nvar _threeColladaLoader = __webpack_require__(121);\n\nvar _threeColladaLoader2 = _interopRequireDefault(_threeColladaLoader);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar solarSystem = new _SolarSystem2.default();\n\nvar mapViewContainer = document.getElementById('map-view');\nvar cameraViewContainer = document.getElementById('camera-view');\nvar testingViewContainer = document.getElementById('testing-view');\n\nvar stats = new _stats2.default();\nstats.dom.id = 'stats';\nstats.dom.style = '';\n\ndocument.body.appendChild(mapViewContainer);\ndocument.body.appendChild(cameraViewContainer);\ndocument.getElementById('stats-overlay').appendChild(stats.dom);\n\nvar textureLoader = new THREE.TextureLoader();\nvar modelLoader = new _threeColladaLoader2.default();\nmodelLoader.options.convertUpAxis = true;\nmodelLoader.options.upAxis = 'Z';\n\nvar state = new _CommonState2.default();\nvar renderers = [new _OrbitalMapRenderer2.default(mapViewContainer, textureLoader, modelLoader, state), new _CameraViewRenderer2.default(cameraViewContainer, textureLoader, modelLoader, state)];\n\nvar simulation = new _Simulation2.default(solarSystem, renderers, state, stats);\nsimulation.initialize().then(function () {\n  simulation.run();\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTQzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3NyYy9pbmRleC5qcz8xZmRmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi9jc3Mvc3R5bGVzLmNzcyc7XG5pbXBvcnQgQ29tbW9uU3RhdGUgZnJvbSAnLi9hcHAvQ29tbW9uU3RhdGUnO1xuaW1wb3J0IFNvbGFyU3lzdGVtIGZyb20gJy4vYXBwL1NvbGFyU3lzdGVtJztcbmltcG9ydCBTaW11bGF0aW9uIGZyb20gJy4vYXBwL1NpbXVsYXRpb24nO1xuaW1wb3J0IENhbWVyYVZpZXdSZW5kZXJlciBmcm9tICcuL2FwcC9DYW1lcmFWaWV3UmVuZGVyZXInO1xuaW1wb3J0IE9yYml0YWxNYXBSZW5kZXJlciBmcm9tICcuL2FwcC9PcmJpdGFsTWFwUmVuZGVyZXInO1xuaW1wb3J0IFRlc3RpbmdSZW5kZXJlciBmcm9tICcuL2FwcC9UZXN0aW5nUmVuZGVyZXInO1xuaW1wb3J0IFN0YXRzIGZyb20gJ3N0YXRzLmpzJztcbmltcG9ydCAqIGFzIFRIUkVFIGZyb20gJ3RocmVlJztcbmltcG9ydCBDb2xsYWRhTG9hZGVyIGZyb20gJ3RocmVlLWNvbGxhZGEtbG9hZGVyJztcblxuY29uc3Qgc29sYXJTeXN0ZW0gPSBuZXcgU29sYXJTeXN0ZW0oKTtcblxubGV0IG1hcFZpZXdDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwLXZpZXcnKTtcbmxldCBjYW1lcmFWaWV3Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbWVyYS12aWV3Jyk7XG5sZXQgdGVzdGluZ1ZpZXdDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGVzdGluZy12aWV3Jyk7XG5cbmxldCBzdGF0cyA9IG5ldyBTdGF0cygpO1xuc3RhdHMuZG9tLmlkID0gJ3N0YXRzJztcbnN0YXRzLmRvbS5zdHlsZSA9ICcnO1xuXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG1hcFZpZXdDb250YWluZXIpO1xuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW1lcmFWaWV3Q29udGFpbmVyKTtcbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzdGF0cy1vdmVybGF5JylcbiAgLmFwcGVuZENoaWxkKHN0YXRzLmRvbSk7XG5cbmNvbnN0IHRleHR1cmVMb2FkZXIgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpO1xuY29uc3QgbW9kZWxMb2FkZXIgPSBuZXcgQ29sbGFkYUxvYWRlcigpO1xubW9kZWxMb2FkZXIub3B0aW9ucy5jb252ZXJ0VXBBeGlzID0gdHJ1ZTtcbm1vZGVsTG9hZGVyLm9wdGlvbnMudXBBeGlzID0gJ1onO1xuXG5jb25zdCBzdGF0ZSA9IG5ldyBDb21tb25TdGF0ZSgpO1xuY29uc3QgcmVuZGVyZXJzID0gW1xuICBuZXcgT3JiaXRhbE1hcFJlbmRlcmVyKG1hcFZpZXdDb250YWluZXIsIHRleHR1cmVMb2FkZXIsIG1vZGVsTG9hZGVyLCBzdGF0ZSksXG4gIG5ldyBDYW1lcmFWaWV3UmVuZGVyZXIoY2FtZXJhVmlld0NvbnRhaW5lciwgdGV4dHVyZUxvYWRlciwgbW9kZWxMb2FkZXIsIHN0YXRlKSxcbl07XG5cbmNvbnN0IHNpbXVsYXRpb24gPSBuZXcgU2ltdWxhdGlvbihzb2xhclN5c3RlbSwgcmVuZGVyZXJzLCBzdGF0ZSwgc3RhdHMpO1xuc2ltdWxhdGlvbi5pbml0aWFsaXplKClcbiAgLnRoZW4oKCkgPT4ge1xuICAgIHNpbXVsYXRpb24ucnVuKClcbiAgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL2luZGV4LmpzIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBOzs7QUFBQTtBQUNBO0FBREE7QUFDQTtBQUFBO0FBQ0E7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUFFQTsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
],[143]);